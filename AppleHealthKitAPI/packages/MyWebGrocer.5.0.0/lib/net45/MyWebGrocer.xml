<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyWebGrocer</name>
    </assembly>
    <members>
        <member name="T:MyWebGrocer.Address">
            <summary>
            An editable address entity to validate user input.
            </summary>
        </member>
        <member name="T:MyWebGrocer.ValidatingEntity">
            <summary>
            Base class for all entities which must validate themselves.
            </summary>
        </member>
        <member name="T:MyWebGrocer.IValidatingEntity">
            <summary>Interface implemented by entity which can validate themselves.</summary>
        </member>
        <member name="M:MyWebGrocer.IValidatingEntity.GetErrors">
            <summary>Gets a list of validation errors where the key is the property which is valid and the value is the validation message.</summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> containing the errors.</returns>
        </member>
        <member name="P:MyWebGrocer.IValidatingEntity.IsValid">
            <summary>Gets a value indicating if the entity is valid.</summary>
        </member>
        <member name="M:MyWebGrocer.ValidatingEntity.GetErrors">
            <summary>
            Do not override; virtual for NHibernate only
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> containing the errors.</returns>
        </member>
        <member name="P:MyWebGrocer.ValidatingEntity.IsValid">
            <summary>Gets a value indicating if the entity is valid.  Should be overridden to include
            the valid state of any child entities.</summary>
        </member>
        <member name="M:MyWebGrocer.Address.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:MyWebGrocer.Address.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Address"/> class.
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="street3">The street3.</param>
            <param name="city">The city.</param>
            <param name="region">The region.</param>
            <param name="postalCode">The postal code.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="M:MyWebGrocer.Address.ToString">
            <summary>
            String representation of the address.  For debugging only!
            </summary>
            <returns>A <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MyWebGrocer.Address.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MyWebGrocer.Address.Street1">
            <summary>
            Gets or sets the street1.
            </summary>
            <value>The street1.</value>
        </member>
        <member name="P:MyWebGrocer.Address.Street2">
            <summary>
            Gets or sets the street2.
            </summary>
            <value>The street2.</value>
        </member>
        <member name="P:MyWebGrocer.Address.Street3">
            <summary>
            Gets or sets the street3.
            </summary>
            <value>The street3.</value>
        </member>
        <member name="P:MyWebGrocer.Address.City">
            <summary>
            Gets or sets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:MyWebGrocer.Address.State">
            <summary>
            Gets or sets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:MyWebGrocer.Address.Region">
            <summary>
            Gets or sets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:MyWebGrocer.Address.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="P:MyWebGrocer.Address.Country">
            <summary>
            Gets or sets the country
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:MyWebGrocer.Address.CountryCode">
            <summary>
            Gets or sets the country
            </summary>
            <value>The country code.</value>
        </member>
        <member name="T:MyWebGrocer.Addresses.UnitedKingdomAddress">
            <summary>
            Class UnitedKingdomAddress.
            </summary>
        </member>
        <member name="T:MyWebGrocer.NamedAddress">
            <summary>
            Class NamedAddress.
            </summary>
        </member>
        <member name="M:MyWebGrocer.NamedAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.NamedAddress"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.NamedAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.NamedAddress"/> class.
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="street3">The street3.</param>
            <param name="city">The city.</param>
            <param name="region">The region.</param>
            <param name="postalCode">The postal code.</param>
            <param name="countryCode">The country code.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:MyWebGrocer.NamedAddress.AddressName">
            <summary>
            Gets or sets the name of the address.
            </summary>
            <value>The name of the address.</value>
        </member>
        <member name="M:MyWebGrocer.Addresses.UnitedKingdomAddress.#ctor(MyWebGrocer.NamedAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Addresses.UnitedKingdomAddress"/> class.
            </summary>
            <param name="namedAddress">The named address.</param>
        </member>
        <member name="M:MyWebGrocer.Addresses.UnitedKingdomAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Addresses.UnitedKingdomAddress"/> class.
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="locality">The locality.</param>
            <param name="postTown">The post town.</param>
            <param name="postalCode">The postal code.</param>
            <param name="countryCode">The country code.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:MyWebGrocer.Addresses.UnitedKingdomAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Addresses.UnitedKingdomAddress"/> class.
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="locality">The locality.</param>
            <param name="postTown">The post town.</param>
            <param name="postalCode">The postal code.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:MyWebGrocer.Addresses.UnitedKingdomAddress.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="T:MyWebGrocer.Addresses.UnitedStatesAddress">
            <summary>
            Class UnitedStatesAddress.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Addresses.UnitedStatesAddress.#ctor(MyWebGrocer.NamedAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Addresses.UnitedStatesAddress"/> class.
            </summary>
            <param name="namedAddress">The named address.</param>
        </member>
        <member name="M:MyWebGrocer.Addresses.UnitedStatesAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Addresses.UnitedStatesAddress"/> class.
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="city">The city.</param>
            <param name="region">The region.</param>
            <param name="postalCode">The postal code.</param>
            <param name="countryCode">The country code.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:MyWebGrocer.Addresses.UnitedStatesAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Addresses.UnitedStatesAddress"/> class.
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="city">The city.</param>
            <param name="region">The region.</param>
            <param name="postalCode">The postal code.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:MyWebGrocer.Addresses.UnitedStatesAddress.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="T:MyWebGrocer.AddressExtensions">
            <summary>Extension methods for <see cref="T:MyWebGrocer.Address"/></summary>
        </member>
        <member name="M:MyWebGrocer.AddressExtensions.ToAddressInfo(MyWebGrocer.Address)">
            <summary>Converts an <see cref="T:MyWebGrocer.Address"/> to an <see cref="T:MyWebGrocer.AddressInfo"/>.</summary>
            <param name="address">The address to convert.</param>
            <returns>An <see cref="T:MyWebGrocer.AddressInfo"/>.</returns>
        </member>
        <member name="T:MyWebGrocer.AddressInfo">
            <summary>
            Address information for an entity.
            </summary>
        </member>
        <member name="M:MyWebGrocer.AddressInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.AddressInfo"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.AddressInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.AddressInfo"/> class.
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="city">The city.</param>
            <param name="region">The region.</param>
            <param name="postalCode">The postal code.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:MyWebGrocer.AddressInfo.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.AddressInfo"/> class.
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="street3">The street3.</param>
            <param name="city">The city.</param>
            <param name="region">The region.</param>
            <param name="postalCode">The postal code.</param>
            <param name="countryCode">The country code.</param>
            <param name="id">The identifier.</param>
        </member>
        <member name="M:MyWebGrocer.AddressInfo.ToString">
            <summary>
            Gets a string representation of the address.  For debugging only!
            </summary>
            <returns>A <see cref="T:System.String"/>.</returns>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.Id">
            <summary>
            Gets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.Street1">
            <summary>
            Gets the street1.
            </summary>
            <value>The street1.</value>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.Street2">
            <summary>
            Gets the street2.
            </summary>
            <value>The street2.</value>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.Street3">
            <summary>
            Gets the street3.
            </summary>
            <value>The street3.</value>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.City">
            <summary>
            Gets the city.
            </summary>
            <value>The city.</value>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.State">
            <summary>
            Gets the state.
            </summary>
            <value>The state.</value>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.Region">
            <summary>
            Gets the region.
            </summary>
            <value>The region.</value>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.PostalCode">
            <summary>
            Gets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.Country">
            <summary>
            Gets the country.
            </summary>
            <value>The country.</value>
        </member>
        <member name="P:MyWebGrocer.AddressInfo.CountryCode">
            <summary>
            Gets the country code.
            </summary>
            <value>The country code.</value>
        </member>
        <member name="T:MyWebGrocer.Caching.ICacheable">
            <summary>Interface which must be implemented by all
            cacheable objects where the caching system will
            decide the final key.</summary>
        </member>
        <member name="M:MyWebGrocer.Caching.ICacheable.GetCacheKey">
            <summary>
            Gets a string which must uniquely identify an instance.
            </summary>
            <returns>A <see cref="T:System.String"/>.</returns>
            <remarks>The key only needs to be unique for instances
            of a particular type.  Objects of different types are
            not required to have distinct keys, as the type of
            the object will be taken into consideration when adding
            or retrieving items from the cache.</remarks>
        </member>
        <member name="T:MyWebGrocer.Clock">
            <summary>
            Provides the current time to clients.  Used for function which normally would
            using <see cref="P:System.DateTime.Now"/>, but can't rely on that due to unit testing.
            </summary>
        </member>
        <member name="T:MyWebGrocer.IClock">
            <summary>
            Provides the current time to clients.  Used for function which normally would
            using <see cref="P:System.DateTime.Now"/>, but can't rely on that due to unit testing.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IClock.Now">
            <summary>
            Returns the current date and time. The production implementation 
            can simply return DateTime.Now. (Unit testing or debugging of the 
            will require a different implementation that is not 
            dependent on the passing of actual time.)
            </summary>
        </member>
        <member name="P:MyWebGrocer.IClock.UtcNow">
            <summary>
            Returns the current Utc date and time. The production implementation 
            can simply return DateTime.UtcNow. (Unit testing or debugging of the 
            will require a different implementation that is not 
            dependent on the passing of actual time.)
            </summary>
        </member>
        <member name="P:MyWebGrocer.Clock.Now">
            <summary>
            Returns the current date and time.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Clock.UtcNow">
            <summary>
            Returns the current Utcdate and time.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2">
            <summary>
            Common implementation of the system configuration element collection with a keyed element.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.GetElementKey(`1)">
            <summary>
            Return the key for an item
            </summary>
            <param name="element"></param>
            <returns>item key</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.GetElementKey(System.Configuration.ConfigurationElement)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.GetElement(`0)">
            <summary>
            Get the specified element by its key
            </summary>
            <param name="key"></param>
            <returns>Instance of TItem</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.GetElementAt(System.Int32)">
            <summary>
            Gets the specific element by its index in the collection
            </summary>
            <param name="index">index in the collections</param>
            <returns>The matching element</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.CreateNewElement">
            <summary>
            Creates a new instance of T
            </summary>
            <returns>T as a configuration element</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.Add(`1)">
            <summary>
            Add an instance of T to the collection
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.Contains(`1)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.CopyTo(`1[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.Remove(`1)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.ConfigurationKeyElementCollection`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ConfigurationElementCollection`1">
            <summary>
            This class has been replaced by the ConfigurationKeyElementCollection implementation
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationElementCollection`1.CreateNewElement">
            <summary>
            Creates a new instance of T
            </summary>
            <returns>T as a configuration element</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurationElementCollection`1.Add(`0)">
            <summary>
            Add an instance of T to the collection
            </summary>
            <param name="element"></param>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.ConfigurationElementCollection`1.Item(System.Int32)">
            <summary>
            Get the specified element at the index
            </summary>
            <param name="index"></param>
            <returns>Instance of T</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.EncodedNameValueCollection">
            <summary>
            Class EncodedNameValueCollection. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.IEncodedNameValueCollection">
            <summary>
            Html Encodes name value collections
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Encode">
            <summary>
            Returns the built NVP string of all name/value pairs in the Hashtable
            </summary>
            <returns>An encoded set of NVP data points</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Decode(System.String)">
            <summary>
            Decoding the string
            </summary>
            <param name="encodedNameValues">The encoded name values.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Add(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds the specified collection.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="destination">The destination.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.HasKeys">
            <summary>
            Determines whether this instance has keys.
            </summary>
            <returns><c>true</c> if this instance has keys; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Add(System.String,System.String)">
            <summary>
            Adds the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Get(System.String)">
            <summary>
            Gets the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.GetValues(System.String)">
            <summary>
            Gets the values.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Set(System.String,System.String)">
            <summary>
            Sets the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Remove(System.String)">
            <summary>
            Removes the specified name.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.Get(System.Int32)">
            <summary>
            Gets the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.GetValues(System.Int32)">
            <summary>
            Gets the values.
            </summary>
            <param name="index">The index.</param>
            <returns>System.String[].</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.GetKey(System.Int32)">
            <summary>
            Gets the key.
            </summary>
            <param name="index">The index.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Gets the object data.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.OnDeserialization(System.Object)">
            <summary>
            Called when [deserialization].
            </summary>
            <param name="sender">The sender.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.IEncodedNameValueCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns>IEnumerator.</returns>
        </member>
        <member name="P:MyWebGrocer.Collections.IEncodedNameValueCollection.AllKeys">
            <summary>
            Gets all keys.
            </summary>
            <value>All keys.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.IEncodedNameValueCollection.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.IEncodedNameValueCollection.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.IEncodedNameValueCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:MyWebGrocer.Collections.IEncodedNameValueCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.String"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.EncodedNameValueCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Collections.EncodedNameValueCollection"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.EncodedNameValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Specialized.NameValueCollection" /> class that is serializable and uses the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the new <see cref="T:System.Collections.Specialized.NameValueCollection" /> instance.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source and destination of the serialized stream associated with the new <see cref="T:System.Collections.Specialized.NameValueCollection" /> instance.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.EncodedNameValueCollection.UrlDecode(System.String)">
            <summary>
            URLs the decode.
            </summary>
            <param name="s">The s.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.EncodedNameValueCollection.UrlEncode(System.String)">
            <summary>
            URLs the encode.
            </summary>
            <param name="s">The s.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.EncodedNameValueCollection.Encode">
            <summary>
            Returns the built NVP string of all name/value pairs in the Hashtable
            </summary>
            <returns>An encoded set of NVP data points</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.EncodedNameValueCollection.Decode(System.String)">
            <summary>
            Decoding the string
            </summary>
            <param name="encodedNameValues">Encoded name value string to decode</param>
        </member>
        <member name="M:MyWebGrocer.Collections.EncodedNameValueCollection.Serialize">
            <summary>
            Serializes this instance.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ChildList`2">
            <summary>
              A list of items which have a reference to their parent.
              Wraps and is backed by an existing IList passed into the constructor.
            </summary>
            <typeparam name="TChild">The type of child item.</typeparam>
            <remarks>
              This list cannot contain <see langword="null" />
              references
            </remarks>
            <typeparam name="TParent">The type of the parent object.</typeparam>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.#ctor(`0)">
            <summary>
              Constructor without externally supplied list to wrap
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.#ctor(`0,System.Collections.Generic.IList{`1})">
            <summary>
              Constructor, requiring parent and IList to wrap
            </summary>
            <param name="parent"></param>
            <param name="innerList"></param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.Add(`1)">
            <summary>
              Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:System.Collections.Generic.ICollection`1" /> is
              read-only.
            </exception>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.Clear">
            <summary>
              Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">
              The <see cref="T:System.Collections.Generic.ICollection`1" /> is
              read-only.
            </exception>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.Contains(`1)">
            <summary>
              Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
              true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />;
              otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.CopyTo(`1[],System.Int32)">
            <summary>
              Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an
              <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
              The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied
              from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have
              zero-based indexing.
            </param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException">
              <paramref name="array" /> is multidimensional.-or-The number of elements
              in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from
              <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type "T" cannot be cast
              automatically to the type of the destination <paramref name="array" />.
            </exception>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
              A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.IndexOf(`1)">
            <summary>
              Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <returns>
              The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.Insert(System.Int32,`1)">
            <summary>
              Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is not a valid index in the
              <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.Remove(`1)">
            <summary>
              Removes the first occurrence of a specific object from
              the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
              true if <paramref name="item" /> was successfully removed from
              the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
              This method also returns false if <paramref name="item" /> is not found in
              the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">
              The
              <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </exception>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.RemoveAt(System.Int32)">
            <summary>
              Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is not a valid index in the
              <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ChildList`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
              An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.ChildList`2.Count">
            <summary>
              Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
              The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.ChildList`2.IsReadOnly">
            <summary>
              Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
              true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.ChildList`2.Item(System.Int32)">
            <summary>
              Gets or sets the element at the specified index.
            </summary>
            <returns>
              The element at the specified index.
            </returns>
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <paramref name="index" /> is not a valid index in the
              <see cref="T:System.Collections.Generic.IList`1" />.
            </exception>
            <exception cref="T:System.NotSupportedException">
              The property is set and the
              <see cref="T:System.Collections.Generic.IList`1" /> is read-only.
            </exception>
        </member>
        <member name="T:MyWebGrocer.Collections.Category">
            <summary>
            Provides unlimited number of categories and sub-categories.
            <remarks>
            Each category can contain both
            items and other categories at any level.
            </remarks>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Category`1">
            <summary>
            Provides categories that can contain items of a specific type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ICategory`1">
            <summary>
            Interface ICategory
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MyWebGrocer.Collections.ICategory">
            <summary>
            The interface of a Category
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.ICategoryItem">
            <summary>
            Provides an interface for any Type that can be contained in a category.
            <remarks>
            Implement this interface in anything that could be categorized, such as 
            Products, Coupons, Shopping List Items, etc.
            </remarks>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.ICategoryItem.Category">
            <summary>
            Gets or sets the category this item is contained within.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.ICategoryItem.Name">
            <summary>
            Gets the name of the item.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.ICategory.Id">
            <summary>
            Gets or sets the persistence identifier for the category
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.ICategory.Parents">
            <summary>
            Gets or sets the parent category this category is contained within.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.ICategory.IsRoot">
            <summary>
            Indicates if this is a top-level category.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ICategory`1.Add(`0)">
            <summary>
            Adds an item to the category.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ICategory`1.Remove(`0)">
            <summary>
            Removes an item from this category.
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.ICategory`1.Items">
            <summary>
            Gets the items contained in this category
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.ICategory`1.Tree">
            <summary>
            Enumerates over all items in this category including sub-categories.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Category`1.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Collections.Generic.Category`1"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Category`1.op_Implicit(MyWebGrocer.Collections.Generic.Category{`0})~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:MyWebGrocer.Collections.Generic.Category`1"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="category">The category.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Category`1.Add(`0)">
            <summary>
            Adds an item to the category.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Category`1.Remove(`0)">
            <summary>
            Removes an item from this category.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Category`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Category`1.GetRootOf(MyWebGrocer.Collections.Generic.Category{MyWebGrocer.Collections.ICategoryItem})">
            <summary>
            Gets the root of.
            </summary>
            <param name="category">The category.</param>
            <returns>Category&lt;ICategoryItem&gt;.</returns>
        </member>
        <member name="E:MyWebGrocer.Collections.Generic.Category`1.OnItemsRequested">
            <summary>
            Occurs when [on items requested].
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Category`1.MyWebGrocer#Collections#ICategoryItem#Category">
            <summary>
            Gets or sets the category this item is contained within.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Category`1.Name">
            <summary>
            Gets the name of the item.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Category`1.Tree">
            <summary>
            Enumerates over all items in this category including sub-categories.
            </summary>
            <value>The tree.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Category`1.Id">
            <summary>
            Gets or sets the persistence identifier for the category
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Category`1.Parents">
            <summary>
            Gets or sets the parent category this category is contained within.
            </summary>
            <value>The parents.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Category`1.IsRoot">
            <summary>
            Indicates if this is a top-level category.
            </summary>
            <value><c>true</c> if this instance is root; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Category`1.Items">
            <summary>
            Gets the items contained in this category
            </summary>
            <value>The items.</value>
        </member>
        <member name="M:MyWebGrocer.Collections.Category.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Collections.Category"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Category.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.CategoryItemEventArgs`1">
            <summary>
            Class CategoryItemEventArgs.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.CategoryItemEventArgs`1.#ctor(System.Collections.Generic.ICollection{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Collections.Generic.CategoryItemEventArgs`1"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.CategoryItemEventArgs`1.Items">
            <summary>
            Gets or sets the items.
            </summary>
            <value>The items.</value>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ItemsRequested`1">
            <summary>
            Delegate ItemsRequested
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e">The e.</param>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ConfigurableBase">
            <summary>
            Common functionality between the configurable sort and filter classes
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurableBase.GeneratePropertyExpression(System.Linq.Expressions.Expression,System.Type,System.String,System.Linq.Expressions.Expression@,System.Type@)">
            <summary>
            Generates the property expression.
            </summary>
            <param name="input">The input.</param>
            <param name="inputType">Type of the input.</param>
            <param name="propertyPath">The property path.</param>
            <param name="output">The output.</param>
            <param name="outputType">Type of the output.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurableBase.GenerateExtensionExpression(System.Linq.Expressions.Expression,System.Type,System.String,System.Linq.Expressions.Expression@,System.Type@)">
            <summary>
            Generates the extension expression.
            </summary>
            <param name="input">The input.</param>
            <param name="inputType">Type of the input.</param>
            <param name="extensionRule">The extension rule.</param>
            <param name="output">The output.</param>
            <param name="outputType">Type of the output.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurableBase.GenerateComparisonExpression(MyWebGrocer.Collections.Generic.Configuration.ComparisonOperator,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            Generates the comparison expression.
            </summary>
            <param name="comparisonOperator">The comparison operator.</param>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>Expression.</returns>
            <exception cref="T:System.ArgumentException">Invalid ComparisonOperator  + comparisonOperator;comparisonOperator</exception>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ConfigurableFilter`1">
            <summary>
            Read from the configuration the preferred filter rules for items, and create a compiled 
            expression to perform the filter.  A common pattern is for a library to inherit this
            class in a concrete implementation that can be wired up in structuremap.
            
            <example>
            &lt;MyWebGrocer.Circulars.Filter&gt;
             &lt;FilterRules&gt;
               &lt;Add rule="property:CircularType" match="Other" /&gt;
               &lt;Add rule="property:Name" match="Toys" operator="NotEqual" /&gt;
             &lt;/FilterRules&gt;
            &lt;/MyWebGrocer.Circulars.Filter&gt;
            </example>
            
            Will produce the following compiled expression
            
            <example>
            return items
              .Where(item => item.CatalogType == "Other" &amp;&amp; item.Name != "Toys")
            </example>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.IFilter`1">
            <summary>
            Defines an interface for sorting an enumerable collection
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.IFilter`1.Filter(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Filter the elements in the enumeration
            </summary>
            <param name="items">the items to filter</param>
            <returns>the items in the enumeration that matched the criteria</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.IFilter`1.Matches(`0)">
            <summary>
            Determines if an item matches the configured criteria
            </summary>
            <param name="item">the items to test</param>
            <returns>true if the item matches the rules</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurableFilter`1.#ctor(MyWebGrocer.Collections.Generic.Configuration.IFilterConfiguration)">
            <summary>
            Creates a new instance of a filter
            </summary>
            <param name="filterConfiguration">filter rules for include/exclude</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurableFilter`1.Filter(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurableFilter`1.Matches(`0)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ConfigurableSorter`1">
            <summary>
            Read from the configuration the preferred sort rules for items, and create a compiled 
            expression to perform the sort.  A common pattern is for a library to inherit this
            class in a concrete implementation that can be wired up in structuremap.
            
            <example>
            &lt;MyWebGrocer.Circulars.Sort&gt;
             &lt;SortRules&gt;
               &lt;Add rule="weights" desc="true" /&gt;
               &lt;Add rule="property:RunDate.StartDate" /&gt;
               &lt;Add rule="property:Name" /&gt;
               &lt;Add rule="property:SortKey" /&gt;
             &lt;/SortRules&gt;
             &lt;SortWeights&gt;
               &lt;Add match="CircularType:Weekly" value="5" /&gt;
               &lt;Add match="Name:Jewelry Ad" value="-5" /&gt;
             &lt;/SortWeights&gt;
            &lt;/MyWebGrocer.Circulars.Sort&gt;
            </example>
            
            Will produce the following compiled expression
            
            <example>
            return items
              .OrderByDescending(GetWeight)
              .ThenBy(item => item.RunDate.StartDate)
              .ThenBy(item => item.Name)
              .ThenBy(item => item.SortKey);
            </example>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ISorter`1">
            <summary>
            Defines an interface for sorting an enumerable collection
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ISorter`1.Sort(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Order the elements in the enumeration
            </summary>
            <param name="items">the items to sort</param>
            <returns>an ordered enumerations</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurableSorter`1.#ctor(MyWebGrocer.Collections.Generic.Configuration.ISortConfiguration)">
            <summary>
            Creates a new instance of a sorter
            </summary>
            <param name="sortConfiguration">sort rules for ordering</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ConfigurableSorter`1.Sort(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Order the elements in the enumeration according the configured rules
            </summary>
            <param name="items">the items to sort</param>
            <returns>an ordered enumerations</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.FilterConfigurationSectionHandler">
            <summary>
            Returns a set of rules about how to filter items
            </summary>
        </member>
        <member name="T:MyWebGrocer.Utility.ConfigurationSection">
            <summary>
            Class ConfigurationSection.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.ConfigurationSection.ConnectionString(System.String)">
            <summary>
            Connections the string.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.Configuration.ConfigurationErrorsException"></exception>
        </member>
        <member name="M:MyWebGrocer.Utility.ConfigurationSection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.ConfigurationSection.ToSectionDefinitionString">
            <summary>
            To the section definition string.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:MyWebGrocer.Utility.ConfigurationSection.SectionName">
            <summary>
            Gets the name of the section.
            </summary>
            <value>The name of the section.</value>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.IFilterConfiguration">
            <summary>
            Returns a set of rules about how to filter items in the ConfigurableFilter.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.IFilterConfiguration.FilterRules">
            <summary>
            Collection of filter rules to be compiled
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.FilterConfigurationSectionHandler.FilterRuleElements">
            <summary>
            Collection of filter rules to be compiled
            </summary>
            <value>The filter rules.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.FilterConfigurationSectionHandler.FilterRules">
            <summary>
            Collection of filter rules to be compiled
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.FilterRuleConfigurationCollection">
            <summary>
            Class FilterRuleConfigurationCollection.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Configuration.FilterRuleConfigurationCollection.GetElementKey(MyWebGrocer.Collections.Generic.Configuration.FilterRuleConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.FilterRuleConfigurationElement">
            <summary>
            Class FilterRuleConfigurationElement.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.IFilterRule">
            <summary>
            Defines the rule for a single match condition
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.IFilterRule.Rule">
            <summary>
            The rule to apply:
            property:property-path, will get value in the property path
            extension:type-name, type-assembly|method-name, will pass the item to the specified method, return value is used in comparison
            </summary>
            <value>The rule.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.IFilterRule.Match">
            <summary>
            The match expression to compare against the property
            </summary>
            <value>The match.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.IFilterRule.Operator">
            <summary>
            Determines if matches are included or excluded from the result set
            </summary>
            <value>The operator.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.FilterRuleConfigurationElement.Rule">
            <summary>
            The rule to apply:
            property:property-path, will get value in the property path
            extension:type-name, type-assembly|method-name, will pass the item to the specified method, return value is used in comparison
            </summary>
            <value>The rule.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.FilterRuleConfigurationElement.Match">
            <summary>
            The match expression to compare against the property
            </summary>
            <value>The match.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.FilterRuleConfigurationElement.Operator">
            <summary>
            Determines if matches are included or excluded from the result set
            </summary>
            <value>The operator.</value>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.ComparisonOperator">
            <summary>
            Comparison to perform against match
            </summary>
        </member>
        <member name="F:MyWebGrocer.Collections.Generic.Configuration.ComparisonOperator.Equal">
            <summary>
            The equal
            </summary>
        </member>
        <member name="F:MyWebGrocer.Collections.Generic.Configuration.ComparisonOperator.NotEqual">
            <summary>
            The not equal
            </summary>
        </member>
        <member name="F:MyWebGrocer.Collections.Generic.Configuration.ComparisonOperator.GreaterThan">
            <summary>
            The greater than
            </summary>
        </member>
        <member name="F:MyWebGrocer.Collections.Generic.Configuration.ComparisonOperator.GreaterThanOrEqual">
            <summary>
            The greater than or equal
            </summary>
        </member>
        <member name="F:MyWebGrocer.Collections.Generic.Configuration.ComparisonOperator.LessThan">
            <summary>
            The less than
            </summary>
        </member>
        <member name="F:MyWebGrocer.Collections.Generic.Configuration.ComparisonOperator.LessThanOrEqual">
            <summary>
            The less than or equal
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.ISortRule">
            <summary>
            defines a sort rule
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.ISortRule.Rule">
            <summary>
            The rule to apply:
            property:property-path, will sort by the property in the property path
            extension:type-name, type-assembly|method-name, will pass the item to the specified method, return value is used in comparison
            weights, will sort by the any sort weights with no filters
            </summary>
            <value>The rule.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.ISortRule.Descending">
            <summary>
            determines if the sort should be in ascending or descending order
            </summary>
            <value><c>true</c> if descending; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.ISortWeight">
            <summary>
            Defines a sort weight
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.ISortWeight.Match">
            <summary>
            Match expression, usually property:value format.
            <example>Id:5</example>
            </summary>
            <value>The match.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.ISortWeight.Value">
            <summary>
            The weight to assign to a match
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.SortConfigurationSectionHandler">
            <summary>
            Returns a set of rules about how to sort items
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.ISortConfiguration">
            <summary>
            Returns a set of rules about how to sort items in the ConfigurableSorter.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.ISortConfiguration.SortRules">
            <summary>
            Collection of sort rules
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.ISortConfiguration.SortWeights">
            <summary>
            Collection of sort weights
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.SortConfigurationSectionHandler.SortRuleElements">
            <summary>
            Collection of circular sort weights
            </summary>
            <value>The sort rules.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.SortConfigurationSectionHandler.SortRules">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.SortConfigurationSectionHandler.SortWeightElements">
            <summary>
            Collection of circular sort weights
            </summary>
            <value>The sort weights.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.SortConfigurationSectionHandler.SortWeights">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.SortRuleConfigurationCollection">
            <summary>
            Class SortRuleConfigurationCollection.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Configuration.SortRuleConfigurationCollection.GetElementKey(MyWebGrocer.Collections.Generic.Configuration.SortRuleConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.SortRuleConfigurationElement">
            <summary>
            Class SortRuleConfigurationElement.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.SortRuleConfigurationElement.Rule">
            <summary>
            The rule to apply:
            property:property-path, will sort by the property in the property path
            extension:type-name, type-assembly|method-name, will pass the item to the specified method, return value is used in comparison
            weights, will sort by the any sort weights with no filters
            </summary>
            <value>The rule.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.SortRuleConfigurationElement.Descending">
            <summary>
            determines if the sort should be in ascending or descending order
            </summary>
            <value><c>true</c> if descending; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.SortWeightConfigurationCollection">
            <summary>
            Class SortWeightConfigurationCollection.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Configuration.SortWeightConfigurationCollection.GetElementKey(MyWebGrocer.Collections.Generic.Configuration.SortWeightConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Configuration.SortWeightConfigurationElement">
            <summary>
            Class SortWeightConfigurationElement.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.SortWeightConfigurationElement.Match">
            <summary>
            Match expression, usually property:value format.
            <example>Id:5</example>
            </summary>
            <value>The match.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Configuration.SortWeightConfigurationElement.Value">
            <summary>
            The weight to assign to a match
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.EnumerableExtensions">
            <summary>
            Extensions for IEnumerable
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.EnumerableExtensions.MoveToHead``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            Add the ability to move an item matching <paramref name="matchPredicate" /> to the head of a list
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="matchPredicate">The match predicate.</param>
            <returns>New list with item matching <paramref name="matchPredicate" /> at the head of the list</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.IOrdered">
            <summary>
            Interface implemented by automatically ordered sets.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.IOrdered.Ordinal">
            <summary>
            The item's position within a list.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.IResourcePool`1">
            <summary>
            Use to wire up an instance of ResourcePool in structuremap
            </summary>
            <typeparam name="T">item type to pool</typeparam>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.IResourcePool`1.Take">
            <summary>
            Retrieves an item from the pool, or creates a new instance of item.  These
            items are not thread safe and should be returned to the pool as soon as possible
            by disposing the IResourcePoolItem wrapper returned.
            </summary>
            <returns>A wrapper around item that manages the resource allocation</returns>
            <example>
            using(var item = pool.Take())
            {
              pool.Item.DoWork();
            }
            </example>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.IResourcePool`1.Count">
            <summary>
            Number of items currently available in the pool
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.KeyEqualityComparer`2">
            <summary>
            Class KeyEqualityComparer.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey">The type of the t key.</typeparam>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.KeyEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Collections.Generic.KeyEqualityComparer`2"/> class.
            </summary>
            <param name="keySelector">The key selector.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.KeyEqualityComparer`2.Equals(`0,`0)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.KeyEqualityComparer`2.GetHashCode(`0)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.OrderedChildList`2">
            <summary>
            A list which ensures elements have a reference back to their
            parent and maintain an ordinal based on the elements position in the list.
            Wraps and is backed by an existing IList passed into the constructor.
            </summary>
            <typeparam name="TParent">The type of the t parent.</typeparam>
            <typeparam name="TChild">The type of the t child.</typeparam>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.OrderedChildList`2.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Collections.Generic.OrderedChildList`2"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.OrderedChildList`2.#ctor(`0,System.Collections.Generic.IList{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Collections.Generic.OrderedChildList`2"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.OrderedChildList`2.Insert(System.Int32,`1)">
            <summary>
            Inserts the specified index.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.OrderedChildList`2.Remove(`1)">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.OrderedChildList`2.ResetOrdinals">
            <summary>
            Resets the ordinals for all contained elements.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.OrderedChildList`2.Item(System.Int32)">
            <summary>
            Gets or sets the TChild at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>TChild.</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ResourcePool`1">
            <summary>
            This class is used to manage a collection of resources that are expensive to create
            or initialize, and manages their lifetime
            </summary>
            <typeparam name="T">Resource type to pool</typeparam>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ResourcePool`1.#ctor(System.Func{`0})">
            <summary>
            Creates a new instance of the pool
            </summary>
            <param name="create">The function used to create a new instance of the resource</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ResourcePool`1.#ctor(System.Func{`0},System.Action{`0})">
            <summary>
            Creates a new instance of the pool
            </summary>
            <param name="create">The function used to create a new instance of the resource</param>
            <param name="destroy">The function used to cleanup an instance of a resource</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ResourcePool`1.#ctor(System.Func{`0},System.Action{`0},System.UInt32,System.Boolean)">
            <summary>
            Creates a new instance of the pool
            </summary>
            <param name="create">The function used to create a new instance of the resource</param>
            <param name="destroy">The function used to cleanup an instance of a resource</param>
            <param name="capacity">The maximum number of items to be pooled.  Any item returned when the pool is at capacity will be disposed</param>
            <param name="autoDispose">Set to true to dispose items that are dropped or when this pool is disposed</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ResourcePool`1.Take">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ResourcePool`1.ReturnItem(`0)">
            <summary>
            Returns or drops an item from the pool performing any necessary cleanup
            </summary>
            <param name="item">pooled resource</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ResourcePool`1.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ResourcePool`1.Dispose(System.Boolean)">
            <summary>
            Disposes all items in the pool
            </summary>
            <param name="disposing">not used</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.ResourcePool`1.DisposeItem(`0)">
            <summary>
            Disposes the item if AutoDispose is enabled
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.ResourcePool`1.Count">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.ResourcePool`1.ResourcePoolItem">
            <summary>
            This private class is used to scope access to a pooled resource and return it when its done
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.IResourcePoolItem`1">
            <summary>
            Wraps an instance of item in an <see cref="T:System.IDisposable"/> so it
            can be returned to the pool automatically, or cleaned up at the 
            end of its use.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.IResourcePoolItem`1.Discard">
            <summary>
            If the pooled resource becomes invalid, call this method
            so it is not returned to the pool.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.IResourcePoolItem`1.Item">
            <summary>
            Pooled Resource
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.PageExtensions">
            <summary>
            Class PageExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.PageExtensions.GetNeighboringPages(System.Collections.Generic.IEnumerable{MyWebGrocer.Collections.Page},System.Int32,MyWebGrocer.Collections.Page[])">
            <summary>
            Get pages around the given pages within a fixed size neighborhood
            </summary>
            <param name="source">source pages</param>
            <param name="neighborhoodSize">size of the neighborhood</param>
            <param name="pages">referencing pages</param>
            <returns>pages around the referencing pages within the neighborhood</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.PageExtensions.GetNavigationNeighboringPages(System.Collections.Generic.IEnumerable{MyWebGrocer.Collections.Page},MyWebGrocer.Collections.Page,System.Int32)">
            <summary>
            Get pages around the navigation pages (first, last, and current) within a fixed size neighborhood
            </summary>
            <param name="source">source pages</param>
            <param name="current">current page</param>
            <param name="neighborhoodSize">size of the neighborhood</param>
            <returns>pages around the navigation pages within the neighborhood</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Range`1">
            <summary>
            Provides a range of values.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Range`1.#ctor(`0)">
            <summary>
            Creates a new range of one value of type T
            </summary>
            <param name="singleValue">The value to be used as both the start and end of the range.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Range`1.#ctor(`0,`0)">
            <summary>
            Creates a new range of values of type T
            </summary>
            <param name="start">The first value in the range.</param>
            <param name="end">The last value in the range.</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Range`1.Contains(`0)">
            <summary>
            Indicates whether the value provided is contained within the range of values
            </summary>
            <param name="valueToFind">The value to find</param>
            <returns>An indicator of whether the value is contained within the range.</returns>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Range`1.Start">
            <summary>
            Gets first value in the range
            </summary>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Range`1.End">
            <summary>
            Gets the last value in the range
            </summary>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.RangeExtensions">
            <summary>
            Class RangeExtensions.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Collections.Generic.RangeExtensions.Random">
            <summary>
            The random generator 
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.Values(MyWebGrocer.Collections.Generic.Range{System.Int32})">
            <summary>
            Returns all the integers within the range in ascending order
            </summary>
            <param name="range">The range.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.Values(MyWebGrocer.Collections.Generic.Range{MyWebGrocer.Quantity})">
            <summary>
            Returns all the quantities within the range in ascending order
            </summary>
            <param name="range">The range.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:MyWebGrocer.Quantity"/></returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.Days(MyWebGrocer.Collections.Generic.Range{System.DateTime})">
            <summary>
            Returns all the days within the range in ascending order
            </summary>
            <param name="range">The range.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.WeekDays(MyWebGrocer.Collections.Generic.Range{System.DateTime})">
            <summary>
            Returns all the weekdays within the range in ascending order
            </summary>
            <param name="range">The range.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.DateTime"/></returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.IsWeekDay(System.DateTime)">
            <summary>
            Indicates if a DateTime is a weekday
            </summary>
            <param name="current">The current.</param>
            <returns>true if the day of the week is not Saturday or Sunday</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.Overlaps(MyWebGrocer.Collections.Generic.Range{System.DateTime},MyWebGrocer.Collections.Generic.Range{System.DateTime})">
            <summary>
            Does DateTime range A exist within DateTime range B
            </summary>
            <param name="rangeA">DateTime Range A</param>
            <param name="rangeB">DateTime Range B</param>
            <returns>True if time range B start or end point is within time range A, otherwise false.</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.GetRandomValue(MyWebGrocer.Collections.Generic.Range{System.Int32})">
            <summary>
            Gets a random integer from a range of integers
            </summary>
            <param name="range">The range.</param>
            <returns>an integer within the range</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.GetRandomValue(MyWebGrocer.Collections.Generic.Range{System.DateTime})">
            <summary>
            Gets a random DateTime from a range of DateTimes
            </summary>
            <param name="range">The range.</param>
            <returns>a DateTime within the range</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.GetRandomValue(MyWebGrocer.Collections.Generic.Range{System.TimeSpan})">
            <summary>
            Gets a random TimeSpan from a range of TimeSpans
            </summary>
            <param name="range">The range.</param>
            <returns>a TimeSpan within the range</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.GetRandomValue(MyWebGrocer.Collections.Generic.Range{System.Decimal})">
            <summary>
            Gets a random decimal from a range of decimals
            </summary>
            <param name="range">The range.</param>
            <returns>a decimal within the range</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.RangeExtensions.GetRandomValue(MyWebGrocer.Collections.Generic.Range{System.Double})">
            <summary>
            Gets a random double from a range of doubles
            </summary>
            <param name="range">The range.</param>
            <returns>a double within the range</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Specifications.NeighboringPagesOf">
            <summary>
            Specification that a page is around the given pages within a fixed size neighborhood
            </summary>
        </member>
        <member name="T:MyWebGrocer.Specifications.Specification`1">
            <summary>
            Defines criteria to satisfy a specification. Specifications are used
            to encapsulate criteria logic that is applied to one or more domain
            objects of a given type. Sometimes this criteria is best defined via 
            properties and methods on the class. But in many cases, it is best to 
            separate this concern and acheive greater reuse.
            <remarks>
            A concrete implementation of this class can be used in one of three ways:
            1. To determine if an existing object satisfies the specification
            2. To return one or more objects that satisfy the criteris through a Linq Expression tree
            3. To build an object that satisifes the specification.
            </remarks>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Specifications.Specification`1.IsSatisfiedBy(`0)">
            <summary>
            Determines if an existing object satisfies the specification criteria
            </summary>
            <param name="candidate">The object to compare to the specification criteria.</param>
            <returns>true if the specification is satisfied, otherwise false</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.Specification`1.IsSatisfied">
            <summary>
            Returns a Linq Expression Tree for use in querying objects that satisfy the specification criteria.
            </summary>
            <returns>a Linq Expression Tree</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.Specification`1.BuildSatisfying(`0)">
            <summary>
            Builds an object that satisfies the specification criteria. This is typically accomplished
            by passing the specification into a Factory. The factory will create an object instance and allow each
            specification to alter the object to meet its specification.
            <remarks>
            Overriding types should alter the candidate such that it will satisfy the criteria of the specification.
            </remarks>
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Specifications.NeighboringPagesOf.#ctor(System.Int32,MyWebGrocer.Collections.Page[])">
            <summary>
            Specification that a page is around the given pages within a fixed size neighborhood
            </summary>
            <param name="neighborhoodSize">size of the neighborhood</param>
            <param name="pages">referencing pages</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Specifications.NeighboringPagesOf.IsSatisfied">
            <summary>
            Returns a Linq Expression Tree for use in querying objects that satisfy the specification criteria.
            </summary>
            <returns>a Linq Expression Tree</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.IChild`1">
            <summary>
            Interface implemented by objects which must know about their parent.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.IChild`1.SetParent(`0)">
            <summary>
            Sets the child's reference to it's parent.
            </summary>
            <param name="parent">The child's parent.</param>
        </member>
        <member name="T:MyWebGrocer.AddressInfoExtensions">
            <summary>Extension methods for <see cref="T:MyWebGrocer.AddressInfo"/></summary>
        </member>
        <member name="M:MyWebGrocer.AddressInfoExtensions.ToAddress(MyWebGrocer.AddressInfo)">
            <summary>Converts an <see cref="T:MyWebGrocer.AddressInfo"/> to an <see cref="T:MyWebGrocer.Address"/>.</summary>
            <param name="address">The address to convert.</param>
            <returns>An <see cref="T:MyWebGrocer.Address"/>.</returns>
        </member>
        <member name="T:MyWebGrocer.Collections.Generic.Page`1">
            <summary>
            Page of items
            </summary>
            <typeparam name="T">type of item source for the page</typeparam>
        </member>
        <member name="T:MyWebGrocer.Collections.Page">
            <summary>
            Page index represented by offset and size of the page
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Page.#ctor">
            <summary>
            Page 1 at 10 items per page
            </summary>
        </member>
        <member name="M:MyWebGrocer.Collections.Page.#ctor(System.Int32,System.Int32)">
            <summary>
            Page of given size from a specific offset
            </summary>
            <param name="offset">Page offset, 0-based, i.e. how many items to skip before this page</param>
            <param name="size">Page size (items per page)</param>
            <exception cref="T:System.ArgumentException">@Page size must be greater than 0.;size</exception>
        </member>
        <member name="M:MyWebGrocer.Collections.Page.Pages(System.Int32,System.Int32)">
            <summary>
            Divide items into a collection of <see cref="T:MyWebGrocer.Collections.Page"/>
            </summary>
            <param name="count">total item couont</param>
            <param name="itemsPerPage">page size, i.e. items per page</param>
            <returns>resulting pages</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Page.Pages``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Divide items into a collection of <see cref="T:MyWebGrocer.Collections.Generic.Page`1"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">item source</param>
            <param name="itemsPerPage">page size, i.e. items per page</param>
            <returns>resulting pages</returns>
        </member>
        <member name="M:MyWebGrocer.Collections.Page.PageOf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Pages the of.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns>IEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="P:MyWebGrocer.Collections.Page.Offset">
            <summary>
            Page offset, 0-based, i.e. how many items to skip before this page
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Page.Size">
            <summary>
            Page size (items per page)
            </summary>
            <value>The size.</value>
        </member>
        <member name="P:MyWebGrocer.Collections.Page.Number">
            <summary>
            Page number, 1-based, e.g.: 1, 2, 3, ...
            </summary>
            <value>The number.</value>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Page`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Page 1 at 10 items per page
            </summary>
            <param name="source">item source</param>
        </member>
        <member name="M:MyWebGrocer.Collections.Generic.Page`1.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Page of given size from a specific offset
            </summary>
            <param name="offset">Page offset, 0-based, i.e. how many items to skip before this page</param>
            <param name="size">Page size (items per page)</param>
            <param name="source">item source</param>
        </member>
        <member name="P:MyWebGrocer.Collections.Generic.Page`1.Items">
            <summary>
            Items in this page
            </summary>
        </member>
        <member name="T:MyWebGrocer.Container.ContainerScope">
            <summary>
            The container scope is used to provide an <see cref="T:StructureMap.IContainer"/> to classes and methods that cannot
            participate in dependency injection.  The container scope will create one container for logical call
            context.  This allows it to enroll reuse the same container that a web request may have started, or
            to start a new container for spawned threads.  You must assume the container and any classes it instantiates
            will be disposed when the scope is disposed.
            </summary>
            <code>
            using(var scope = new ContainerScope())
            {
              var myClass = scope.Container.GetInstance&lt;Foo&gt;();
              return myClass.GetSerializableValue();
            }
            </code>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScope.#ctor">
            <summary>
            Creates a new Container Scope with the default Container Key
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScope.#ctor(System.String)">
            <summary>
            Creates a new Container Scope with the specified Container Key
            </summary>
            <param name="key">key is used to access a logical call context data slot for an IContainer</param>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScope.#ctor(StructureMap.IContainer)">
            <summary>
            Creates a new Container Scope with the specified <see cref="T:StructureMap.IContainer"/>.  This disconnects the scope from
            any usage of the <see cref="T:MyWebGrocer.Container.Ioc"/> class.  This is primarily here to support multithreaded unit
            tests and should not be used in other scenarios.
            </summary>
            <param name="container">The container to use</param>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScope.BeginScope(StructureMap.IContainer)">
            <summary>
            Used in application framework dependency resolvers to set an <see cref="T:StructureMap.IContainer"/> on the logical
            call context without creating an instance of <see cref="T:MyWebGrocer.Container.ContainerScope"/>
            </summary>
            <param name="container">container to push on the logical call context</param>
            <exception cref="T:System.InvalidOperationException">Thrown if a container is already set on the logical call context</exception>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScope.EndScope(System.Boolean)">
            <summary>
            Used in application framework dependency resolvers to remove an <see cref="T:StructureMap.IContainer"/> on the logical
            call context without an instance of <see cref="T:MyWebGrocer.Container.ContainerScope"/>
            </summary>
            <param name="dispose">True if the container on the logical call context should be disposed</param>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScope.AssertEnrolled">
            <summary>
            Throws an exception if this instance of the <see cref="T:MyWebGrocer.Container.ContainerScope"/> created the <see cref="T:StructureMap.IContainer"/>.
            This is used when you know your implementation is dependent on some other contextual information
            </summary>
            <code>
            using(var scope = new ContainerScope())
            {
              scope.AssertEnrolled();
              var myClass = scope.Container.GetInstance&lt;IUserHostAddressExtractor&gt;();
              return myClass.GetAddress();
            }
            </code>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScope.Dispose">
            <summary>
            Disposes the <see cref="T:MyWebGrocer.Container.ContainerScope"/>. If the scope is the owner of
            the of the <see cref="T:StructureMap.IContainer"/> it will dispose the container and free
            the logical call context data slot.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Container.ContainerScope.CurrentContainer">
            <summary>
            Used in application framework dependency resolvers to locate an <see cref="T:StructureMap.IContainer"/> on the logical
            call context.  If no scope has been defined, it returns null
            </summary>
        </member>
        <member name="P:MyWebGrocer.Container.ContainerScope.Container">
            <summary>
            Instance of <see cref="T:StructureMap.IContainer"/>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Container.ContainerScope.Enrolled">
            <summary>
            True if <see cref="T:StructureMap.IContainer"/> already existed on the logical call context when the 
            <see cref="T:MyWebGrocer.Container.ContainerScope"/> was constructed
            </summary>
        </member>
        <member name="T:MyWebGrocer.Container.ContainerScope.ContainerWrapper">
            <summary>
            Wrapper around IContainer, usable by Remoting
            </summary>
        </member>
        <member name="T:MyWebGrocer.Container.ContainerScopeAssertException">
            <summary>
            This exception can be thrown from a <see cref="T:MyWebGrocer.Container.ContainerScope"/> assert command.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScopeAssertException.#ctor">
            <summary>
            Creates an exception
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScopeAssertException.#ctor(System.String)">
            <summary>
            Creates an exception with a specified message
            </summary>
            <param name="message">Message to be logged</param>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScopeAssertException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an exception with the specified inner exception
            </summary>
            <param name="message">Message to be logged</param>
            <param name="innerException">The underlying exception</param>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScopeAssertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:MyWebGrocer.Container.ContainerScopeAssertException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:MyWebGrocer.Container.DefaultRegistry">
            <summary>
            The default StructureMap registry which will scan all MyWebGrocer assemblies and load all <see cref="T:StructureMap.Configuration.DSL.Registry"/>s found within those assemblies.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.DefaultRegistry.#ctor">
            <summary>
            Perform the scan, looking for <see cref="T:StructureMap.Configuration.DSL.Registry"/>s
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.DefaultRegistry.OnScan(StructureMap.Graph.IAssemblyScanner)">
            <summary>
            Called when StructureMap scans assemblies.
            </summary>
            <param name="scanner">The <see cref="T:StructureMap.Graph.IAssemblyScanner"/>.</param>
        </member>
        <member name="T:MyWebGrocer.Container.Ioc">
            <summary>Used to bootstrap structure map</summary>
        </member>
        <member name="M:MyWebGrocer.Container.Ioc.Configure(System.Action{StructureMap.ConfigurationExpression})">
            <summary>
            Configure StructureMap
            </summary>
            <param name="expression">The StructureMap Configuration Expression to initialize the application <see cref="T:StructureMap.IContainer"/></param>
        </member>
        <member name="M:MyWebGrocer.Container.Ioc.Configure(StructureMap.IContainer)">
            <summary>
            Configure StructureMap using an existing Root <see cref="T:StructureMap.IContainer"/>.  This is available for Unit Tests.
            </summary>
            <param name="container">An existing root <see cref="T:StructureMap.IContainer"/></param>
        </member>
        <member name="M:MyWebGrocer.Container.Ioc.AssertConfigurationIsValid">
            <summary>
            Check the validity of the structuremap container
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.Ioc.Reset">
            <summary>
            Dispose the <see cref="T:StructureMap.IContainer"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.Ioc.GetDisposableContainer">
            <summary>
            Create a new <see cref="T:StructureMap.IContainer"/>.  This container will be a nested container of the root container.  All instances created in 
            this container will be disposed when the container is disposed.  This method is only used when you need to ensure you never enroll 
            into an existing container.  In all other cases use <see cref="T:MyWebGrocer.Container.ContainerScope"/>
            </summary>
            <returns>A new <see cref="N:MyWebGrocer.Container"/></returns>
        </member>
        <member name="P:MyWebGrocer.Container.Ioc.ApplicationContainer">
            <summary>
            Provides access to the root <see cref="T:StructureMap.IContainer"/> for the application.  Any instance
            created by this container will be a singleton and live for the life of the application.
            Any instance created by this container cannot participate in a request based context.
            This property primary exists for the use of our Application frameworks and should not be
            used outside of bootstrapping.  See GetDisposableContainer and <see cref="T:MyWebGrocer.Container.ContainerScope"/>
            for typical use cases.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Container.Ioc.Configured">
            <summary>
            Indicates if the Ioc container has been setup with an Application Container.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Container.LegacyDatabaseRegistry">
            <summary>
            StructureMap registry to use as base class for solutions
            that need need to support legacy database
            </summary>
        </member>
        <member name="F:MyWebGrocer.Container.LegacyDatabaseRegistry.ConfigurationSectionName">
            <summary>
            Legacy Database configuration section name
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.LegacyDatabaseRegistry.#ctor">
            <summary>
            Creates a new LegacyDatabaseRegistry
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.LegacyDatabaseRegistry.CheckIsLegacyDatabase">
            <summary>
            Used to initialize the protected variable.  We need to initialize the variable before
            the constructor is invoked so if can use the value
            </summary>
            <returns>Returns true when configuration points to Legacy Database</returns>
        </member>
        <member name="P:MyWebGrocer.Container.LegacyDatabaseRegistry.IsLegacyDatabase">
            <summary>
            Returns true when configuration points to Legacy Database
            </summary>
        </member>
        <member name="T:MyWebGrocer.Container.PluginConvention`1">
            <summary>
            Finds all inheritors of a type or implementers of an interface
            </summary>
            <typeparam name="TFor"></typeparam>
            <remarks>
            This is similar to structure maps FindAllTypesFilter with a few lifecycle 
            management methods
            </remarks>
        </member>
        <member name="M:MyWebGrocer.Container.PluginConvention`1.#ctor">
            <summary>
            Create a PluginConvention instance
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.PluginConvention`1.Process(System.Type,StructureMap.Configuration.DSL.Registry)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Container.PluginConvention`1.Matches(System.Type)">
            <summary>
            Determine if the type should be registered as a plug-in of TFor
            </summary>
            <param name="type"></param>
            <returns>true if its an implementer</returns>
        </member>
        <member name="M:MyWebGrocer.Container.PluginConvention`1.Register(StructureMap.Configuration.DSL.Registry,System.Type,System.Type,System.String)">
            <summary>
            Register the types.
            </summary>
            <param name="registry"></param>
            <param name="registerType"></param>
            <param name="type"></param>
            <param name="named"></param>
        </member>
        <member name="P:MyWebGrocer.Container.PluginConvention`1.PluginType">
            <summary>
            Indicates if the types should be registered as singletons
            </summary>
        </member>
        <member name="P:MyWebGrocer.Container.PluginConvention`1.AsSingleton">
            <summary>
            Indicates if the types should be registered as singletons
            </summary>
        </member>
        <member name="P:MyWebGrocer.Container.PluginConvention`1.Name">
            <summary>
            Specifies how instances should be named
            </summary>
        </member>
        <member name="T:MyWebGrocer.Container.StructureMapExtensions">
            <summary>
            Helpers for common structure map operations
            </summary>
        </member>
        <member name="M:MyWebGrocer.Container.StructureMapExtensions.MyWebGrocerAssemblies(StructureMap.Graph.IAssemblyScanner)">
            <summary>
            Includes all MyWebGrocer assemblies into the scanning operation that are in the base directory.  WARNING: Do
            not combine this type of scanning operation with a call to "WithDefaultConventions"
            </summary>
            <param name="scanner"></param>
        </member>
        <member name="M:MyWebGrocer.Container.StructureMapExtensions.WithPluginConvention``1(StructureMap.Graph.IAssemblyScanner)">
            <summary>
            Scans for implementers or inheritors of TFor and registers them
            </summary>
            <typeparam name="TFor"></typeparam>
            <param name="scanner"></param>
        </member>
        <member name="M:MyWebGrocer.Container.StructureMapExtensions.WithPluginConvention``1(StructureMap.Graph.IAssemblyScanner,System.Boolean)">
            <summary>
            Scans for implementers or inheritors of TFor and registers them
            </summary>
            <typeparam name="TFor"></typeparam>
            <param name="scanner"></param>
            <param name="asSingleton"></param>
        </member>
        <member name="M:MyWebGrocer.Container.StructureMapExtensions.WithPluginConvention``1(StructureMap.Graph.IAssemblyScanner,System.Boolean,System.Func{System.Type,System.String})">
            <summary>
            Scans for implementers or inheritors of TFor and registers them
            </summary>
            <typeparam name="TFor"></typeparam>
            <param name="scanner"></param>
            <param name="asSingleton"></param>
            <param name="nameFunc"></param>
        </member>
        <member name="T:MyWebGrocer.Countries">
            <summary>
            Enum Countries
            </summary>
        </member>
        <member name="F:MyWebGrocer.Countries.USA">
            <summary>
            The usa
            </summary>
        </member>
        <member name="F:MyWebGrocer.Countries.CAN">
            <summary>
            The can
            </summary>
        </member>
        <member name="F:MyWebGrocer.Countries.GBR">
            <summary>
            The GBR
            </summary>
        </member>
        <member name="F:MyWebGrocer.Countries.NZL">
            <summary>
            The NZL
            </summary>
        </member>
        <member name="F:MyWebGrocer.Countries.AUS">
            <summary>
            The aus
            </summary>
        </member>
        <member name="F:MyWebGrocer.Countries.DEU">
            <summary>
            The deu
            </summary>
        </member>
        <member name="F:MyWebGrocer.Countries.FRA">
            <summary>
            The fra
            </summary>
        </member>
        <member name="T:MyWebGrocer.CustomerIdentification">
            <summary>
            Class containing customer identification data
            </summary>
        </member>
        <member name="T:MyWebGrocer.ICustomerIdentification">
            <summary>
            Provides all the necessary attributes to identify a Customer
            </summary>
        </member>
        <member name="P:MyWebGrocer.ICustomerIdentification.Id">
            <summary>
            Customer Id
            </summary>
        </member>
        <member name="P:MyWebGrocer.ICustomerIdentification.Email">
            <summary>
            Email address
            </summary>
        </member>
        <member name="P:MyWebGrocer.ICustomerIdentification.Fsn">
            <summary>
            Frequent Shopper Number
            </summary>
        </member>
        <member name="P:MyWebGrocer.ICustomerIdentification.LoyaltyIdentifier">
            <summary>
            Loyalty identifier could be Frequent Shopper Number or some other type that identifies a member in a loyalty system.
            </summary>
        </member>
        <member name="P:MyWebGrocer.ICustomerIdentification.StoreGroupId">
            <summary>
            Id of the store group the customer is scoped under
            </summary>
        </member>
        <member name="M:MyWebGrocer.CustomerIdentification.#ctor(System.Guid,System.String,MyWebGrocer.FrequentShopperNumber,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="id">The identifier.</param>
            <param name="email">The email.</param>
            <param name="fsn">The FSN.</param>
            <param name="storeGroupId">The store group identifier.</param>
        </member>
        <member name="M:MyWebGrocer.CustomerIdentification.#ctor(System.Guid,System.String,MyWebGrocer.FrequentShopperNumber,MyWebGrocer.ILoyaltyIdentifier,System.Int32)">
            <summary>
            constructor
            </summary>
            <param name="id">The identifier.</param>
            <param name="email">The email.</param>
            <param name="fsn">The FSN.</param>
            <param name="loyaltyIdentifier">The loyalty identifier.</param>
            <param name="storeGroupId">The store group identifier.</param>
        </member>
        <member name="P:MyWebGrocer.CustomerIdentification.Id">
            <summary>
            Customer Id
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:MyWebGrocer.CustomerIdentification.Email">
            <summary>
            Email address
            </summary>
            <value>The email.</value>
        </member>
        <member name="P:MyWebGrocer.CustomerIdentification.Fsn">
            <summary>
            Frequent Shopper Number
            </summary>
            <value>The FSN.</value>
        </member>
        <member name="P:MyWebGrocer.CustomerIdentification.LoyaltyIdentifier">
            <summary>
            Loyalty identifier could be Frequent Shopper Number or some other type that identifies a member in a loyalty system.
            </summary>
            <value>The loyalty identifier.</value>
        </member>
        <member name="P:MyWebGrocer.CustomerIdentification.StoreGroupId">
            <summary>
            Id of the store group the customer is scoped under
            </summary>
            <value>The store group identifier.</value>
        </member>
        <member name="T:MyWebGrocer.Customization.EmptyCustomizationResolver">
            <summary>
            This implementation of ICustomizationResolver returns an empty enumeration
            of keys
            </summary>
        </member>
        <member name="T:MyWebGrocer.Customization.ICustomizationResolver">
            <summary>
            This interface enables applications to provide variations of resources
            at runtime.  Typically this will be for store or chain specific resources
            per http request.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Customization.ICustomizationResolver.GetCustomizationKeys">
            <summary>
            This method is called to get a set of keys that
            will be used to help find alternative resource
            paths
            </summary>
            <returns>a enumeration of strings in preferred order</returns>
        </member>
        <member name="F:MyWebGrocer.Customization.EmptyCustomizationResolver.Keys">
            <summary>
            The keys
            </summary>
        </member>
        <member name="M:MyWebGrocer.Customization.EmptyCustomizationResolver.GetCustomizationKeys">
            <summary>
            This method is called to get a set of keys that
            will be used to help find alternative resource
            paths
            </summary>
            <returns>a enumeration of strings in preferred order</returns>
        </member>
        <member name="T:MyWebGrocer.Customization.EmptyDeviceResolver">
            <summary>
            This implementation of ICustomizationResolver returns an empty enumeration
            of keys
            </summary>
        </member>
        <member name="T:MyWebGrocer.Customization.IDeviceResolver">
            <summary>
            This interface enables applications to provide variations of resources
            at runtime.  Typically this will be for mobile device specific resources
            per http request.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Customization.IDeviceResolver.GetDeviceKeys">
            <summary>
            This method is called to get a set of keys that
            will be used to help find alternative resource
            paths
            </summary>
            <returns>a enumeration of device strings in preferred order</returns>
        </member>
        <member name="M:MyWebGrocer.Customization.IDeviceResolver.IsMobile">
            <summary>
            Indicates if the current request if from a mobile device
            </summary>
            <returns>true if for a mobile device</returns>
        </member>
        <member name="F:MyWebGrocer.Customization.EmptyDeviceResolver.Keys">
            <summary>
            The keys
            </summary>
        </member>
        <member name="M:MyWebGrocer.Customization.EmptyDeviceResolver.GetDeviceKeys">
            <summary>
            This method is called to get a set of keys that
            will be used to help find alternative resource
            paths
            </summary>
            <returns>a enumeration of device strings in preferred order</returns>
        </member>
        <member name="M:MyWebGrocer.Customization.EmptyDeviceResolver.IsMobile">
            <summary>
            Indicates if the current request if from a mobile device
            </summary>
            <returns>true if for a mobile device</returns>
        </member>
        <member name="T:MyWebGrocer.Extractors.ConfigExtractor">
            <summary>
            Class ConfigExtractor. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Extractors.IConfigExtractor">
            <summary>
            Interface used to retrieve settings from the web.config.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Extractors.IConfigExtractor.GetAppSetting(System.String)">
            <summary>
            Gets the value from the config file with the specified key.
            </summary>
            <param name="key">The key identifying the item to get.</param>
            <returns>A <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:MyWebGrocer.Extractors.ConfigExtractor.GetAppSetting(System.String)">
            <summary>
            Gets the value from the config file with the specified key.
            </summary>
            <param name="key">The key identifying the item to get.</param>
            <returns>A <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:MyWebGrocer.FrequentShopperNumber">
            <summary>
            Class FrequentShopperNumber.
            </summary>
        </member>
        <member name="T:MyWebGrocer.ILoyaltyIdentifier">
            <summary>
            Implementors provide a LoyaltyNumber to libraries that utilize it when interacting with external loyalty systems.
            </summary>
        </member>
        <member name="P:MyWebGrocer.ILoyaltyIdentifier.LoyaltyNumber">
            <summary>
            Gets a string representation of a loyalty system identifier
            </summary>
        </member>
        <member name="M:MyWebGrocer.FrequentShopperNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.FrequentShopperNumber"/> class.
            </summary>
            <param name="number">The number.</param>
        </member>
        <member name="M:MyWebGrocer.FrequentShopperNumber.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.FrequentShopperNumber"/> class.
            </summary>
            <param name="number">The number.</param>
            <param name="mustIncludeOnlyDigits">if set to <c>true</c> [must include only digits].</param>
            <exception cref="T:System.ArgumentException">Frequent Shopper Number must be numeric or empty.</exception>
        </member>
        <member name="M:MyWebGrocer.FrequentShopperNumber.IsValid(System.String)">
            <summary>
            Determines whether the specified number is valid.
            </summary>
            <param name="number">The number.</param>
            <returns>Valid if numeric or empty (YouTech requirement)</returns>
        </member>
        <member name="M:MyWebGrocer.FrequentShopperNumber.Equals(MyWebGrocer.FrequentShopperNumber)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.FrequentShopperNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.FrequentShopperNumber.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
        </member>
        <member name="M:MyWebGrocer.FrequentShopperNumber.op_Implicit(System.String)~MyWebGrocer.FrequentShopperNumber">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:MyWebGrocer.FrequentShopperNumber"/>.
            </summary>
            <param name="number">The number.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.FrequentShopperNumber.op_Equality(MyWebGrocer.FrequentShopperNumber,MyWebGrocer.FrequentShopperNumber)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.FrequentShopperNumber.op_Inequality(MyWebGrocer.FrequentShopperNumber,MyWebGrocer.FrequentShopperNumber)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:MyWebGrocer.FrequentShopperNumber.Number">
            <summary>
            Gets the number.
            </summary>
            <value>The number.</value>
        </member>
        <member name="P:MyWebGrocer.FrequentShopperNumber.LoyaltyNumber">
            <summary>
            Gets a string representation of a loyalty system identifier
            </summary>
            <value>The loyalty number.</value>
        </member>
        <member name="T:MyWebGrocer.InvalidSizeException">
            <summary>
            Class InvalidSizeException.
            </summary>
        </member>
        <member name="M:MyWebGrocer.InvalidSizeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.InvalidSizeException"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.InvalidSizeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.InvalidSizeException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyWebGrocer.InvalidSizeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.InvalidSizeException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:MyWebGrocer.InvalidSizeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.InvalidSizeException"/> class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:MyWebGrocer.Linq.Expressions.ExpressionExtensions">
            <summary>
            Class ExpressionExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Linq.Expressions.ExpressionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Extension method to get the property name from an expression. This will work with any
            member but will usually be used to get a property name. Will throw an <see cref="T:System.ArgumentException"/>
            if the <paramref name="propertyLambda"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.
            </summary>
            <typeparam name="T">the type of the object which has the property whose name is desired</typeparam>
            <typeparam name="TProperty">the type of the property whose name is desired</typeparam>
            <param name="propertyLambda">the lambda expression for the property</param>
            <returns>the name of the property referenced by <paramref name="propertyLambda"/></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:MyWebGrocer.LoyaltyIdentifier">
            <summary>
            This is the most basic implementation of ILoyaltyIdentifier, and it provides no internal
            validation of the Loyalty number.  This is used when the number is being handed to you from
            an external source, such as SSO, and you do not know the concrete implementation.
            </summary>
        </member>
        <member name="M:MyWebGrocer.LoyaltyIdentifier.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.LoyaltyIdentifier"/> class.
            </summary>
            <param name="loyaltyNumber">The loyalty number.</param>
        </member>
        <member name="M:MyWebGrocer.LoyaltyIdentifier.op_Implicit(System.String)~MyWebGrocer.LoyaltyIdentifier">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:MyWebGrocer.LoyaltyIdentifier"/>.
            </summary>
            <param name="number">The number.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.LoyaltyIdentifier.op_Equality(MyWebGrocer.LoyaltyIdentifier,MyWebGrocer.LoyaltyIdentifier)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.LoyaltyIdentifier.op_Inequality(MyWebGrocer.LoyaltyIdentifier,MyWebGrocer.LoyaltyIdentifier)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.LoyaltyIdentifier.Equals(MyWebGrocer.ILoyaltyIdentifier)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.LoyaltyIdentifier.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.LoyaltyIdentifier.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:MyWebGrocer.LoyaltyIdentifier.LoyaltyNumber">
            <summary>
            Gets a string representation of a loyalty system identifier
            </summary>
            <value>The loyalty number.</value>
        </member>
        <member name="T:MyWebGrocer.MyWebGrocerRegistry">
            <summary>
            Class MyWebGrocerRegistry. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MyWebGrocer.MyWebGrocerRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.MyWebGrocerRegistry"/> class.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Addresses.NewZealandAddress">
            <summary>
            Class NewZealandAddress.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Addresses.NewZealandAddress.#ctor(MyWebGrocer.NamedAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Addresses.NewZealandAddress"/> class.
            </summary>
            <param name="namedAddress">The named address.</param>
        </member>
        <member name="M:MyWebGrocer.Addresses.NewZealandAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Addresses.NewZealandAddress"/> class.
            NOTE: No region in NZ, use town
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="suburb">The suburb.</param>
            <param name="town">The town.</param>
            <param name="postalCode">The postal code.</param>
            <param name="countryCode">The country code.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:MyWebGrocer.Addresses.NewZealandAddress.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Addresses.NewZealandAddress"/> class.
            </summary>
            <param name="street1">The street1.</param>
            <param name="street2">The street2.</param>
            <param name="suburb">The suburb.</param>
            <param name="town">The town.</param>
            <param name="postalCode">The postal code.</param>
            <param name="countryCode">The country code.</param>
        </member>
        <member name="P:MyWebGrocer.Addresses.NewZealandAddress.PostalCode">
            <summary>
            Gets or sets the postal code.
            </summary>
            <value>The postal code.</value>
        </member>
        <member name="T:MyWebGrocer.NamedText">
            <summary>
            Named text representing text info, such as price text and sale text, on an item
            </summary>
        </member>
        <member name="M:MyWebGrocer.NamedText.#ctor(System.String,System.String,System.String)">
            <summary>
            New <see cref="T:MyWebGrocer.NamedText"/>
            </summary>
            <param name="name">name that follows variable naming</param>
            <param name="label">label for the tex when presented to the user</param>
            <param name="text">text content to be presented to the user</param>
        </member>
        <member name="P:MyWebGrocer.NamedText.Name">
            <summary>
            Name, which follows variable naming so that it can be used as a property in dynamic languages
            </summary>
        </member>
        <member name="P:MyWebGrocer.NamedText.Label">
            <summary>
            Label for the tex when presented to the user
            </summary>
        </member>
        <member name="P:MyWebGrocer.NamedText.Text">
            <summary>
            Text content to be presented to the user
            </summary>
        </member>
        <member name="T:MyWebGrocer.NamedUri">
            <summary>
            Class NamedUri.
            </summary>
        </member>
        <member name="M:MyWebGrocer.NamedUri.#ctor(System.String,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.NamedUri"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="uri">The URI.</param>
        </member>
        <member name="P:MyWebGrocer.NamedUri.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.NamedUri.Uri">
            <summary>
            Gets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="T:MyWebGrocer.Net.IpAddressExtensions">
            <summary>
            Extension points for working with IP addresses
            </summary>
        </member>
        <member name="M:MyWebGrocer.Net.IpAddressExtensions.Matches(System.Net.IPAddress,System.String,System.String)">
            <summary>
            Does IP Match
            </summary>
            <param name="ip">An instance of a <see cref="T:System.Net.IPAddress"/> to match against</param>
            <param name="address">The string representation to match</param>
            <param name="mask">The mask to match with</param>
            <returns>True if matches</returns>
        </member>
        <member name="M:MyWebGrocer.Net.IpAddressExtensions.Matches(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Does IP Match
            </summary>
            <param name="ip">An instance of a <see cref="T:System.Net.IPAddress"/> to match against</param>
            <param name="address">An instance of a <see cref="T:System.Net.IPAddress"/> to match</param>
            <param name="mask">An instance of a <see cref="T:System.Net.IPAddress"/> to use as the mask</param>
            <returns>True if matches</returns>
        </member>
        <member name="M:MyWebGrocer.Net.IpAddressExtensions.IsPrivate(System.Net.IPAddress)">
            <summary>
            Is the <see cref="T:System.Net.IPAddress"/> private
            </summary>
            <param name="ip">An instance of a <see cref="T:System.Net.IPAddress"/> to check</param>
            <returns>True if considered a private IP</returns>
        </member>
        <member name="T:MyWebGrocer.Pricing.BankersRound">
            <summary>
            Apply bankers rounding to a decimal amount
            </summary>
        </member>
        <member name="T:MyWebGrocer.Pricing.IBankersRound">
            <summary>
            Apply bankers rounding to a decimal amount
            </summary>
        </member>
        <member name="M:MyWebGrocer.Pricing.IBankersRound.Round(System.Decimal)">
            <summary>
            Round amount using <see cref="F:System.MidpointRounding.AwayFromZero"/> (bankers rounding), to 2 decimal places
            </summary>
            <param name="amount"/>
            <returns>Rounded amount</returns>
        </member>
        <member name="M:MyWebGrocer.Pricing.IBankersRound.Round(System.Decimal,System.Int32)">
            <summary>
            Round amount using <see cref="F:System.MidpointRounding.AwayFromZero"/> (bankers rounding), to decimalPlaces
            </summary>
            <param name="amount">Amount to round</param>
            <param name="decimalPlaces">Decimal places to round to</param>
            <returns>Rounded amount</returns>
        </member>
        <member name="M:MyWebGrocer.Pricing.BankersRound.Round(System.Decimal)">
            <summary>
            Round <paramref name="amount"/> using <see cref="F:System.MidpointRounding.AwayFromZero"/> (bankers rounding), to 2 decimal places
            </summary>
            <param name="amount">Amount to round</param>
            <returns>Rounded amount</returns>
        </member>
        <member name="M:MyWebGrocer.Pricing.BankersRound.Round(System.Decimal,System.Int32)">
            <summary>
            Round <paramref name="amount"/> using <see cref="F:System.MidpointRounding.AwayFromZero"/> (bankers rounding), to <paramref name="decimalPlaces"/>
            </summary>
            <param name="amount">Amount to round</param>
            <param name="decimalPlaces">Decimal places to round to</param>
            <returns>Rounded amount</returns>
        </member>
        <member name="T:MyWebGrocer.Queuing.DeliveryMode">
            <summary>
            Determines if a message should be preserved by the broker between restarts.  Use of Persistent
            requires the queue to be durable.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Queuing.DeliveryMode.NonPersistent">
            <summary>
            The non persistent
            </summary>
        </member>
        <member name="F:MyWebGrocer.Queuing.DeliveryMode.Persistent">
            <summary>
            The persistent
            </summary>
        </member>
        <member name="T:MyWebGrocer.Queuing.ExchangeType">
            <summary>
            Identifies how messages are routed to queues.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Queuing.ExchangeType.Direct">
            <summary>
            The direct
            </summary>
        </member>
        <member name="F:MyWebGrocer.Queuing.ExchangeType.FanOut">
            <summary>
            The fan out
            </summary>
        </member>
        <member name="F:MyWebGrocer.Queuing.ExchangeType.Topic">
            <summary>
            The topic
            </summary>
        </member>
        <member name="T:MyWebGrocer.Queuing.IBasicPublisher">
            <summary>
            This interface is used for basic message publication without needing to reference the queuing implementation
            </summary>
        </member>
        <member name="M:MyWebGrocer.Queuing.IBasicPublisher.Publish``1(``0)">
            <summary>
            Sends a message to the exchange
            </summary>
            <typeparam name="T">message type</typeparam>
            <param name="message">message instance</param>
        </member>
        <member name="T:MyWebGrocer.Queuing.QueueableAttribute">
            <summary>
            This attribute is used to identify a class as a message.  This is used to help auto configure
            the bus at startup.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Queuing.QueueableAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Queuing.QueueableAttribute"/> class.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Queuing.QueueableAttribute.DefaultDeliveryMode">
            <summary>
            Gets or sets the default delivery mode.
            </summary>
            <value>The default delivery mode.</value>
        </member>
        <member name="P:MyWebGrocer.Queuing.QueueableAttribute.DefaultExchangeType">
            <summary>
            Gets or sets the default type of the exchange.
            </summary>
            <value>The default type of the exchange.</value>
        </member>
        <member name="P:MyWebGrocer.Queuing.QueueableAttribute.IsNotification">
            <summary>
            Gets or sets a value indicating whether this instance is notification.
            </summary>
            <value><c>true</c> if this instance is notification; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MyWebGrocer.Repository.DatabaseVersionConfiguration">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Repository.IDatabaseVersionConfiguration">
            <summary>
            Contains the current and legacy database version information
            </summary>
        </member>
        <member name="P:MyWebGrocer.Repository.IDatabaseVersionConfiguration.CurrentDatabaseVersion">
            <summary>
            The current database version
            </summary>
        </member>
        <member name="P:MyWebGrocer.Repository.IDatabaseVersionConfiguration.LegacyDatabaseVersion">
            <summary>
            The legacy database version
            </summary>
        </member>
        <member name="P:MyWebGrocer.Repository.IDatabaseVersionConfiguration.DatabaseVersion">
            <summary>
            The database version number
            </summary>
        </member>
        <member name="P:MyWebGrocer.Repository.DatabaseVersionConfiguration.CurrentDatabaseVersion">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Repository.DatabaseVersionConfiguration.LegacyDatabaseVersion">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Repository.DatabaseVersionConfiguration.DatabaseVersion">
            <inheritdoc/>
        </member>
        <member name="T:MyWebGrocer.Repository.Sql.SqlDatabaseContext">
            <summary>
            Class SqlDatabaseContext. This class cannot be inherited.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Sql.ISqlDatabaseContext">
            <summary>
            Interface ISqlDatabaseContext
            </summary>
        </member>
        <member name="M:MyWebGrocer.Sql.ISqlDatabaseContext.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Sql.ISqlDatabaseContext.Commit">
            <summary>
            Commits this instance.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Sql.ISqlDatabaseContext.Rollback">
            <summary>
            Rollbacks this instance.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Sql.ISqlDatabaseContext.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:MyWebGrocer.Sql.ISqlDatabaseContext.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="M:MyWebGrocer.Repository.Sql.SqlDatabaseContext.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Repository.Sql.SqlDatabaseContext"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <exception cref="T:System.ArgumentException">connectionString</exception>
        </member>
        <member name="M:MyWebGrocer.Repository.Sql.SqlDatabaseContext.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Repository.Sql.SqlDatabaseContext.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Repository.Sql.SqlDatabaseContext.Commit">
            <summary>
            Commits this instance.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Repository.Sql.SqlDatabaseContext.Rollback">
            <summary>
            Rollbacks this instance.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Repository.Sql.SqlDatabaseContext.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:MyWebGrocer.Repository.Sql.SqlDatabaseContext.Transaction">
            <summary>
            Gets the transaction.
            </summary>
            <value>The transaction.</value>
        </member>
        <member name="T:MyWebGrocer.Security.Cryptography.Aes">
            <summary>Provides simpler access to AES encryption and decryption.</summary>
            <remarks><para>The <see cref="M:MyWebGrocer.Security.Cryptography.Aes.GenerateIV"/> and <see cref="M:MyWebGrocer.Security.Cryptography.Aes.GenerateKey"/> methods are meant to make it easier for
            developers to generate these values, but the results must be stored somewhere to
            be able to later decrypt the encrypted data.</para><para>This class is thread safe because it does not use any instance
            state.</para></remarks>
        </member>
        <member name="T:MyWebGrocer.Security.Cryptography.IAes">
            <summary>
            Interface IAes
            </summary>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.IAes.GenerateIV">
            <summary>
            Generates a new, random IV.
            </summary>
            <returns>The returned string is the byte data converted to a Base64 string.</returns>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.IAes.GenerateKey">
            <summary>
            Generates a new, random key.
            </summary>
            <returns>The returned string is the byte data converted to a Base64 string.</returns>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.IAes.Encrypt(System.String,System.String,System.String)">
            <summary>
            Encrypts the given data using the specified IV and key.
            </summary>
            <param name="data">The data to encrypt.</param>
            <param name="iv">The initialization vector to use as a Base64 string.</param>
            <param name="key">The key to use as a Base64 string.</param>
            <returns>The encrypted data as a Base64 string.</returns>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.IAes.Decrypt(System.String,System.String,System.String)">
            <summary>
            Decrypts the given data using the specified IV and key.
            </summary>
            <param name="encryptedData">The data to encrypt as a Base64 string.</param>
            <param name="iv">The initialization vector to use as a Base64 string.</param>
            <param name="key">The key to use as a Base64 string.</param>
            <returns>The decrypted data as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="F:MyWebGrocer.Security.Cryptography.Aes.KeySize">
            <summary>Always use a key size of 256 bytes, the maximum allowed.</summary>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.Aes.GenerateIV">
            <summary>Generates a new, random IV.</summary>
            <returns>The returned string is the byte data converted to a Base64 string.</returns>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.Aes.GenerateKey">
            <summary>Generates a new, random key.</summary>
            <returns>The returned string is the byte data converted to a Base64 string.</returns>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.Aes.Encrypt(System.String,System.String,System.String)">
            <summary>Encrypts the given data using the specified IV and key.</summary>
            <param name="data">The data to encrypt.</param>
            <param name="iv">The initialization vector to use as a Base64 string.</param>
            <param name="key">The key to use as a Base64 string.</param>
            <returns>The encrypted data as a Base64 string.</returns>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.Aes.Decrypt(System.String,System.String,System.String)">
            <summary>Decrypts the given data using the specified IV and key.</summary>
            <param name="encryptedData">The data to encrypt as a Base64 string.</param>
            <param name="iv">The initialization vector to use as a Base64 string.</param>
            <param name="key">The key to use as a Base64 string.</param>
            <returns>The decrypted data as a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:MyWebGrocer.Security.Cryptography.IX509Certificate2Loader">
            <summary>
            Interface for loading a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.IX509Certificate2Loader.LoadCertificate(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary> Loads a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> from a certificate store using a thumbprint </summary>
            <param name="certificateStoreName">The name of the certificate store</param>
            <param name="certificateStoreLocation">The location of the certificate store</param>
            <param name="thumbprint">Thumbprint of the client certificate</param>
            <returns> The loaded certificate. </returns>
        </member>
        <member name="T:MyWebGrocer.Security.Cryptography.X5092CertificateNotFoundException">
            <summary>Exception thrown when the specified certificate could not be found.</summary>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.X5092CertificateNotFoundException.#ctor">
            <summary>Initializes a new <see cref="T:MyWebGrocer.Security.Cryptography.X5092CertificateNotFoundException"/> with a default message.</summary>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.X5092CertificateNotFoundException.#ctor(System.String)">
            <summary>Initializes a new <see cref="T:MyWebGrocer.Security.Cryptography.X5092CertificateNotFoundException"/> with the specified message.</summary>
            <param name="message">The message to use in the exception.</param>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.X5092CertificateNotFoundException.#ctor(System.String,System.Exception)">
            <summary>Initializes a new <see cref="T:MyWebGrocer.Security.Cryptography.X5092CertificateNotFoundException"/> with the specified message and inner exception.</summary>
            <param name="message">The message to use in the exception.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> which was immediate the cause of this exception.</param>
        </member>
        <member name="T:MyWebGrocer.Security.Cryptography.X509Certificate2Loader">
            <summary>Implementation of loading a certificate from a certificate store.</summary>
        </member>
        <member name="M:MyWebGrocer.Security.Cryptography.X509Certificate2Loader.LoadCertificate(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation,System.String)">
            <summary> Loads a <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> from a certificate store using a thumbprint </summary>
            <param name="certificateStoreName">The name of the certificate store</param>
            <param name="certificateStoreLocation">The location of the certificate store</param>
            <param name="thumbprint">Thumbprint of the client certificate</param>
            <returns> The loaded certificate. </returns>
        </member>
        <member name="T:MyWebGrocer.SequentialGuid">
            <summary>
            Extensions to the GUID class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.SequentialGuid.Next">
            <summary>
            This extension method provides a way to create new GUIDs, where each one is 
            sequentially greater than all previously generated, as sorted in SQL Server. 
            Such a GUID can safely be used as an identity in a clustered index, since
            it will always be inserted at the end of the database table, avoiding the
            table fragmentation associated with random GUIDs.
            
            The approach taken here is known as the GUID COMB strategy. We start with 
            a random GUID, then use the current time to replace the most significant 
            six bytes (which are the right-hand six bytes as sorted by SQL Server). 
            Six bytes gives us a decimal range of 2.8e14, which is approximately the 
            number of 1/10ths of a millisecond in 890 years. Since we don't need to 
            consider times in the past, we can take the number of ticks elapsed since 
            1/1/2000 divided by 100, and comfortably store this in our six bytes until 
            the year 2890. And the remaining ten bytes of the GUID remain random, 
            assuring uniqueness, and preserving a good degree of security through 
            obscurity, if that is desirable.
            </summary>
            <returns>A new sequential GUID.</returns>
        </member>
        <member name="T:MyWebGrocer.FulfillmentType">
            <summary>
            Fulfillment Type for Order, also known as "Delivery Method".
            These integer values MUST correspond to IDs in tblDeliveryMethod in Raiko.
            </summary>
        </member>
        <member name="F:MyWebGrocer.FulfillmentType.Unknown">
            <summary>
            Fulfillment type is either unassigned or unknown
            </summary>
        </member>
        <member name="F:MyWebGrocer.FulfillmentType.SpecialArrangements">
            <summary>
            Contact the customer for special arrangements. Previously known as Call Me
            </summary>
        </member>
        <member name="F:MyWebGrocer.FulfillmentType.Pickup">
            <summary>
            Pickup
            </summary>
        </member>
        <member name="F:MyWebGrocer.FulfillmentType.Delivery">
            <summary>
            Delivery
            </summary>
        </member>
        <member name="F:MyWebGrocer.FulfillmentType.Shipping">
            <summary>
            Shipping
            </summary>
        </member>
        <member name="F:MyWebGrocer.FulfillmentType.Download">
            <summary>
            Online Download
            </summary>
        </member>
        <member name="T:MyWebGrocer.FulfillmentTypeExtensions">
            <summary>
            Class FulfillmentTypeExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.FulfillmentTypeExtensions.DeliveryMethodId(MyWebGrocer.FulfillmentType)">
            <summary>
            Helper method to explicitly affirm that the IDs above are synchronized with tblDeliveryMethod in Raiko.
            </summary>
            <param name="fulfillmentType">Type of the fulfillment.</param>
            <returns>The database ID</returns>
        </member>
        <member name="T:MyWebGrocer.IOrderPreviewCalculationService">
            <summary>
            Interface for service that calculate the final total (including tax, SandH, and other fees)  from the current cart of the customer
            </summary>
        </member>
        <member name="M:MyWebGrocer.IOrderPreviewCalculationService.CalculateOrderTotalForCurrentCart(System.Int32)">
            <summary>
            Calculate the final order total for current cart
            </summary>
            <param name="sessionId">session id which current cart is associated with</param>
            <returns>preview amount of the final order total</returns>
        </member>
        <member name="T:MyWebGrocer.Specifications.Factory`1">
            <summary>
            Generic Factory that can create most domain objects based upon specifications passed in
            </summary>
            <typeparam name="T">any type that has a public default constructor</typeparam>
        </member>
        <member name="M:MyWebGrocer.Specifications.Factory`1.Create(MyWebGrocer.Specifications.Specification{`0})">
            <summary>
            Creates an object according to the specification(s) passed
            </summary>
            <param name="accordingTo">a Specification or ChainedSpecification which allows for composite specs"&gt;</param>
            <returns>a fully constructed object that conforms to the specification(s) passed in</returns>
            <remarks>When a ChainedSpecification composed of two or more Specifications is passed into this method,
            it is possible that the combination of changes made by each builder is in conflict with one another. 
            Therefore, after the object has been passed through each builder, it is passed through each validator
            to ensure that all specifications have been satisfied and the object is not in a conflicted state.</remarks>
            <exception cref="T:System.InvalidOperationException">thrown when the combined specifications are incompatible.</exception>
        </member>
        <member name="T:MyWebGrocer.Sql.Command`1">
            <summary>
            Base class for executing a command against a database.
            <remarks>
            Provides virtual methods for extensibility
            </remarks>
            </summary>
            <typeparam name="T">Object to populate from db</typeparam>
        </member>
        <member name="F:MyWebGrocer.Sql.Command`1.SqlConnectFailure">
            <summary>
            SQL connection failure error code
            </summary>
        </member>
        <member name="M:MyWebGrocer.Sql.Command`1.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.Command`1"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.Command`1.Execute(System.String)">
            <summary>
            Executes the command and returns the result if any.
            </summary>
            <param name="sql">The SQL statement to execute.</param>
            <returns>A populated object of type T.</returns>
        </member>
        <member name="M:MyWebGrocer.Sql.Command`1.Execute(System.String,System.Data.CommandType)">
            <summary>
            Executes the command and returns the result if any.
            </summary>
            <returns>A populated object of type T.</returns>
            <param name="sql">The SQL statement to execute.</param>
            <param name="commandType">Type of command to issue</param>
        </member>
        <member name="M:MyWebGrocer.Sql.Command`1.CreateResult">
            <summary>
            Override this member to provide a result to be returned.
            </summary>
            <returns>When overridden, allows subclass to create instance of <typeref name="T">T</typeref>.  When
            not overridden, returns <see langword="null"/>.</returns>
        </member>
        <member name="M:MyWebGrocer.Sql.Command`1.OnSqlCommandCreated(System.Data.SqlClient.SqlCommand)">
            <summary>Called after the <see cref="T:System.Data.SqlClient.SqlCommand"/> is created
            to allow subclasses a chance to modify it's properties.</summary>
            <param name="command">The command object to be executed.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.Command`1.OnExecute(MyWebGrocer.Sql.CommandEventArgs{`0})">
            <summary>
            Override this member to send the command to the database
            and optionally populate/alter/replace the result to be returned.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="P:MyWebGrocer.Sql.Command`1.DbContext">
            <summary>
            Gets the database context.
            </summary>
            <value>The database context.</value>
        </member>
        <member name="P:MyWebGrocer.Sql.Command`1.CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <returns>The time in seconds to wait for the command to execute. The default is 30 seconds.</returns>
        </member>
        <member name="P:MyWebGrocer.Sql.Command`1.MaxRetryAttempts">
            <summary>
            Max subsequent retry attempts, excluding the initial first attempt
            i.e. 0 = no retry, default is 1
            </summary>
        </member>
        <member name="T:MyWebGrocer.Sql.CommandEventArgs`1">
            <summary>
            Class CommandEventArgs.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Sql.CommandEventArgs`1.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.CommandEventArgs`1"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="command">The command.</param>
            <param name="result">The result.</param>
        </member>
        <member name="P:MyWebGrocer.Sql.CommandEventArgs`1.Connection">
            <summary>
            Gets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:MyWebGrocer.Sql.CommandEventArgs`1.Command">
            <summary>
            Gets the command.
            </summary>
            <value>The command.</value>
        </member>
        <member name="P:MyWebGrocer.Sql.CommandEventArgs`1.Result">
            <summary>
            Gets the result.
            </summary>
            <value>The result.</value>
        </member>
        <member name="T:MyWebGrocer.Sql.DataRowExtensions">
            <summary>
            Class for DataRow extensions
            </summary>
        </member>
        <member name="M:MyWebGrocer.Sql.DataRowExtensions.DefaultOr``1(System.Data.DataRow,System.String,System.Func{System.Object,``0})">
            <summary>
            Return data value of an SQL column, or default value of target type.
            </summary>
            <param name="row">Data Row</param>
            <param name="columnName">Column Name to get Data for</param>
            <param name="convert">Conversion function</param>
            <typeparam name="T">Column type</typeparam>
            <returns>Instance of T</returns>
        </member>
        <member name="M:MyWebGrocer.Sql.DataRowExtensions.NullableDefaultOr``1(System.Data.DataRow,System.String,System.Func{System.Object,``0})">
            <summary>
            Return data value of an SQL column, or default value of target type.
            </summary>
            <param name="row">Data Row</param>
            <param name="columnName">Column Name to get Data for</param>
            <param name="convert">Conversion function</param>
            <typeparam name="T">Column type</typeparam>
            <returns>Instance of T</returns>
        </member>
        <member name="T:MyWebGrocer.Sql.ProcedureQuery`1">
            <summary>
            Class for executing stored procedure call that has only one result set
            </summary>
            <typeparam name="T">Type of objects to be returned in the results</typeparam>
        </member>
        <member name="T:MyWebGrocer.Sql.SimpleQuery`1">
            <summary>
            Class for executing simple parameterized SQL query that has only one result set
            </summary>
            <typeparam name="T">Type/Class of objects in the results</typeparam>
        </member>
        <member name="T:MyWebGrocer.Sql.Query`1">
            <summary>
            Class Query.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Sql.Query`1.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.Query`1"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.Query`1.OnExecute(MyWebGrocer.Sql.CommandEventArgs{`0})">
            <summary>
            Override this member to send the command to the database and optionally populate/alter/replace the result to be returned.
            </summary>
            <param name="e">EventArgs</param>
        </member>
        <member name="M:MyWebGrocer.Sql.Query`1.OnQueryExecuted(MyWebGrocer.Sql.QueryEventArgs{`0})">
            <summary>
            Override this member to populate/alter/replace the result
            that will be returned upon completion
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.SimpleQuery`1.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.SimpleQuery`1"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.SimpleQuery`1.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext,System.Func{System.Data.DataRow,`0})">
            <summary>
            Create a SimpleQuery object for executing simple query that has only one result set
            </summary>
            <param name="dbContext">Db Context</param>
            <param name="rowConverter">Specify how each row in the underlying DataTable
            is converted to a strongly-typed object of T. Use "x =&gt; (null)" for queries
            that doesn't return results or results are not needed</param>
        </member>
        <member name="M:MyWebGrocer.Sql.SimpleQuery`1.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext,System.Data.SqlClient.SqlParameter[],System.Func{System.Data.DataRow,`0})">
            <summary>
            Create a SimpleQuery object for executing parameterized simple query that has only one result set
            </summary>
            <param name="dbContext">Db Context</param>
            <param name="parameters">query parameters</param>
            <param name="rowConverter">Specify how each row in the underlying DataTable
            is converted to a strongly-typed object of T. Use "x =&gt; (null)" for queries
            that doesn't return results or results are not needed</param>
        </member>
        <member name="M:MyWebGrocer.Sql.SimpleQuery`1.CreateResult">
            <summary>
            Override this member to provide a result to be returned.
            </summary>
            <returns>When overridden, allows subclass to create instance of T.  When not overridden, returns <see langword="null" />.</returns>
        </member>
        <member name="M:MyWebGrocer.Sql.SimpleQuery`1.OnSqlCommandCreated(System.Data.SqlClient.SqlCommand)">
            <summary>
            Called after the <see cref="T:System.Data.SqlClient.SqlCommand"/> is created to allow subclasses a chance to modify it's properties.
            </summary>
            <param name="command">The command object to be executed.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.SimpleQuery`1.OnQueryExecuted(MyWebGrocer.Sql.QueryEventArgs{System.Collections.Generic.List{`0}})">
            <summary>
            Override this member to populate/alter/replace the result that will be returned upon completion
            </summary>
            <param name="e">The e.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.ProcedureQuery`1.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.ProcedureQuery`1"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.ProcedureQuery`1.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext,System.Func{System.Data.DataRow,`0})">
            <summary>
            Create a SimpleQuery object for executing simple query that has only one result set
            </summary>
            <param name="dbContext">Db Context</param>
            <param name="rowConverter">Specify how each row in the underlying DataTable 
            is converted to a strongly-typed object of T. Use "x => (null)" for queries 
            that doesn't return results or results are not needed </param>
        </member>
        <member name="M:MyWebGrocer.Sql.ProcedureQuery`1.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext,System.Data.SqlClient.SqlParameter[],System.Func{System.Data.DataRow,`0})">
            <summary>
            Create a SimpleQuery object for executing parameterized simple query that has only one result set
            </summary>
            <param name="dbContext">Db Context</param>
            <param name="parameters">query parameters</param>
            <param name="rowConverter">Specify how each row in the underlying DataTable 
            is converted to a strongly-typed object of T. Use "x => (null)" for queries 
            that doesn't return results or results are not needed</param>
        </member>
        <member name="M:MyWebGrocer.Sql.ProcedureQuery`1.OnSqlCommandCreated(System.Data.SqlClient.SqlCommand)">
            <summary>
            Called when [SQL command created].
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="T:MyWebGrocer.Sql.ProcedureQuery">
            <summary>
            Class for executing stored procedure call that has no returned result
            </summary>
        </member>
        <member name="M:MyWebGrocer.Sql.ProcedureQuery.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.ProcedureQuery"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.ProcedureQuery.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.ProcedureQuery"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:MyWebGrocer.Sql.QueryEventArgs`1">
            <summary>
            Class QueryEventArgs.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Sql.QueryEventArgs`1.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlCommand,`0,System.Data.SqlClient.SqlDataReader)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.QueryEventArgs`1"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="command">The command.</param>
            <param name="result">The result.</param>
            <param name="dataReader">The data reader.</param>
        </member>
        <member name="P:MyWebGrocer.Sql.QueryEventArgs`1.DataReader">
            <summary>
            Gets the data reader.
            </summary>
            <value>The data reader.</value>
        </member>
        <member name="T:MyWebGrocer.Sql.SimpleQuery">
            <summary>
            Class for executing simple parameterized SQL query that has no returned result
            </summary>
        </member>
        <member name="M:MyWebGrocer.Sql.SimpleQuery.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.SimpleQuery"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
        </member>
        <member name="M:MyWebGrocer.Sql.SimpleQuery.#ctor(MyWebGrocer.Sql.ISqlDatabaseContext,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Sql.SimpleQuery"/> class.
            </summary>
            <param name="dbContext">The database context.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:MyWebGrocer.StringExtensions">
            <summary>Extension methods for <see cref="T:System.String"/>s.</summary>
        </member>
        <member name="M:MyWebGrocer.StringExtensions.Left(System.String,System.Int32)">
            <summary>Returns a string containing all characters starting from the left up to the specified count.</summary>
            <param name="count">The number of characters to take.</param>
            <param name="value">The string who's left part to get.</param>
            <returns>A <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:MyWebGrocer.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            Returns a string containging all characters starting from the right up to the specified count
            </summary>
            <param name="value">Ths string who's left part to get</param>
            <param name="length">The number of character to take</param>
            <returns>A <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:MyWebGrocer.TestClock">
            <summary>
            Class TestClock.
            </summary>
        </member>
        <member name="M:MyWebGrocer.TestClock.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.TestClock"/> class.
            </summary>
            <param name="time">The time.</param>
        </member>
        <member name="M:MyWebGrocer.TestClock.AddHours(System.Int32)">
            <summary>
            Adds the hours.
            </summary>
            <param name="hours">The hours.</param>
        </member>
        <member name="P:MyWebGrocer.TestClock.Now">
            <summary>
            Returns the current date and time. The production implementation
            can simply return DateTime.Now. (Unit testing or debugging of the
            will require a different implementation that is not
            dependent on the passing of actual time.)
            </summary>
            <value>The now.</value>
        </member>
        <member name="P:MyWebGrocer.TestClock.UtcNow">
            <summary>
            Returns the current Utc date and time. The production implementation
            can simply return DateTime.UtcNow. (Unit testing or debugging of the
            will require a different implementation that is not
            dependent on the passing of actual time.)
            </summary>
            <value>The UTC now.</value>
        </member>
        <member name="T:MyWebGrocer.Utility.DataExtensionMethodHolder">
            <summary>
            Extension methods for parsing data from <see cref="T:System.Data.DataRow"/>s
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseBoolColumn(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            Attempts to return a boolean from a data cell.
            </summary>
            <param name="theRow">The row containing the cell</param>
            <param name="columnName">The column name</param>
            <param name="defaultValue">The value to return if theRow doesn't contain the column or parsing fails</param>
            <returns>
            The value if it exists, false if the column does not exist or is invalid
            </returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseDateTimeColumn(System.Data.DataRow,System.String)">
            <summary>
            Attempts to return a date time value from a data cell.
            </summary>
            <param name="theRow">The row containing the column to be parsed</param>
            <param name="columnName">The column name</param>
            <returns>
            The DateTime value if it exists.  Otherwise returns DateTime.MinValue
            </returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseDateTimeColumn(System.Data.DataRow,System.String,System.DateTime)">
            <summary>
            Attempts to return a date time value from a data cell.
            </summary>
            <param name="theRow">The row containing the column to be parsed</param>
            <param name="columnName">The column name</param>
            <param name="defaultValue">The value to return if theRow doesn't contain the column or parsing fails</param>
            <returns>
            The DateTime value if it exists.  If the column does not exist or is invalid returns defaultValue.
            </returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseDecimalColumn(System.Data.DataRow,System.String,System.Decimal)">
            <summary>
            Attempts to return a decimal value from a data cell.
            </summary>
            <param name="theRow">The row containing the column to be parsed</param>
            <param name="columnName">The column name</param>
            <param name="defaultValue">The value to return if theRow doesn't contain the column or parsing fails</param>
            <returns>
            The decimal value if it exists.  If the column does not exist or is invalid and defaultValue is specified
            returns defaultValue.  Otherwise returns 0.
            </returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseCurrencyColumn(System.Data.DataRow,System.String,System.Decimal)">
            <summary>
            Attempts to return a currency value from a data cell.
            </summary>
            <param name="theRow">The row containing the column to be parsed</param>
            <param name="columnName">The column name</param>
            <param name="defaultValue">The value to return if theRow doesn't contain the column or parsing fails</param>
            <returns>
            A decimal value, if it exists, rounded to two figures via MidpointRounding.AwayFromZero.  If the column does 
            not exist or is invalid and defaultValue is specified returns defaultValue rounded to two figures via 
            MidpointRounding.AwayFromZero.  Otherwise returns 0.
            </returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseIntColumn(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            Attempts to return an integer from a data cell.
            </summary>
            <param name="theRow">The row containing the cell</param>
            <param name="columnName">The column name</param>
            <param name="defaultValue">The value to return if theRow doesn't contain the column or parsing fails</param>
            <returns>
            The integer value if it exists.  If the column does not exist or is invalid and defaultValue is specified
            returns defaultValue.  Otherwise returns 0.
            </returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseShortColumn(System.Data.DataRow,System.String,System.Int16)">
            <summary>
            Attempts to return an short from a data cell.
            </summary>
            <param name="theRow">The row containing the cell</param>
            <param name="columnName">The column name</param>
            <param name="defaultValue">The value to return if theRow doesn't contain the column or parsing fails</param>
            <returns>
            The short value if it exists.  If the column does not exist or is invalid and defaultValue is specified
            returns defaultValue.  Otherwise returns 0.
            </returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseGuidColumn(System.Data.DataRow,System.String)">
            <summary>
            Attempts to return a Guid from a data cell.
            </summary>
            <param name="theRow">The row containing the cell</param>
            <param name="columnName">The column name</param>
            <returns>
            The Guid value if it exists.  If the column does not exist or is invalid returns Guid.Empty
            </returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseGuidColumn(System.Data.DataRow,System.String,System.Guid)">
            <summary>
            Attempts to return a Guid from a data cell.
            </summary>
            <param name="theRow">The row containing the cell</param>
            <param name="columnName">The column name</param>
            <param name="defaultValue">The value to return if theRow doesn't contain the column or parsing fails</param>
            <returns>
            The Guid value if it exists.  If the column does not exist or is invalid returns defaultValue
            </returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseStringColumn(System.Data.DataRow,System.String)">
            <summary>
            Attempts to return a string value from a data cell.
            </summary>
            <param name="theRow">The row containing the cell</param>
            <param name="columnName">The column name</param>
            <returns>The value if it exists. If the column does not exist or is invalid returns string.Empty</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.ParseStringColumn(System.Data.DataRow,System.String,System.String)">
            <summary>
            Attempts to return a string value from a data cell.
            </summary>
            <param name="theRow">The row containing the cell</param>
            <param name="columnName">The column name</param>
            /// <param name="defaultValue">The value to return if theRow doesn't contain the column or parsing fails</param>
            <returns>The value if it exists.  If the column does not exist or is invalid returns defaultValue</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.DataExtensionMethodHolder.GetDataFromRow(System.Data.DataRow,System.String)">
            <summary>
            Returns a string representation of the data contained in a cell of a data row
            </summary>
            <param name="row">The row containing the cell</param>
            <param name="columnName">The name of the column</param>
            <returns>The data as a string if it exists, otherwise string.Empty</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.MyWebGrocerRegistryBase">
            <summary>
            This class provides a base class for MyWebGrocer StructureMapRegistries and adds a method to register configurations handling common exceptions scenarios with more meaningful exceptions
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.MyWebGrocerRegistryBase._configSectionAccessor">
            <summary>
            The _config section accessor
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.MyWebGrocerRegistryBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Utility.MyWebGrocerRegistryBase"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.MyWebGrocerRegistryBase.#ctor(System.Func{System.String,System.Object})">
            <summary>
            this constructor is primarily for unit testing so that we can map to various config files.
            </summary>
            <param name="configSectionAccessor">The configuration section accessor.</param>
        </member>
        <member name="M:MyWebGrocer.Utility.MyWebGrocerRegistryBase.ForConfig``1">
            <summary>
            Use to registry Configuration. This method is especially useful because it will handle common code like using ConfigurationManager to get the section, resolving the section name from the assembly name, using a default section if there is no config, and throwing a meaningul exception with the required xml in the output.
            </summary>
            <typeparam name="TAbstractConfig">the abstract type that will be requested from the container</typeparam>
            <returns>fluent object for registering a concrete implementation</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1">
            <summary>
            Class FluentConfigRegistrator.
            </summary>
            <typeparam name="TAbstractConfig">The type of the t abstract configuration.</typeparam>
        </member>
        <member name="F:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1._configContainer">
            <summary>
            The _config container
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1._configSectionAccessor">
            <summary>
            The _config section accessor
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1._sectionName">
            <summary>
            The _section name
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1.#ctor(StructureMap.Configuration.DSL.Expressions.CreatePluginFamilyExpression{`0},System.Func{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1"/> class.
            </summary>
            <param name="configContainer">The configuration container.</param>
            <param name="configSectionAccessor">The configuration section accessor.</param>
        </member>
        <member name="M:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1.WithSectioName(System.String)">
            <summary>
            Use to override the default which is the assembly name of TConcreteConfig
            </summary>
            <param name="sectionName">name of the section in the config file in case it is not the assembly name of the TConcreteConfig</param>
            <returns>this</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1.UseConfig``1(``0,``0)">
            <summary>
            Uses the configuration.
            </summary>
            <typeparam name="TConcreteConfig">the concrete type of configuration. The assembly name of this type will be used to infer the section name.
            Use <see cref="M:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1.WithSectioName(System.String)"/> to override this behavior</typeparam>
            <param name="defaultConfig">default configuration if needed. If default configuration is not supported provide a function that returns null</param>
            <param name="sampleConfig">sample configuration. This will be used to provide the xml in an meaninful exception if
            no configuration is available or an exception is thrown while trying to retrieve the configuration</param>
            <exception cref="T:System.ArgumentNullException">Don't be lazy - provide a sample config</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.MyWebGrocerRegistryBase.FluentConfigRegistrator`1.ConcreteConfig``1(``0,``0)">
            <summary>
            Concretes the configuration.
            </summary>
            <typeparam name="TConcreteConfig">The type of the t concrete configuration.</typeparam>
            <param name="defaultConfig">The default configuration.</param>
            <param name="sampleConfig">The sample configuration.</param>
            <returns>TConcreteConfig.</returns>
            <exception cref="T:System.Exception">
            unable to get a configuration through config file or default
            or
            </exception>
        </member>
        <member name="T:MyWebGrocer.Utility.RegexExtensions">
            <summary>
            Class RegexExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.RegexExtensions.MatchNamedCaptures(System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Matches the named captures.
            </summary>
            <param name="regex">The regex.</param>
            <param name="input">The input.</param>
            <returns>Dictionary&lt;System.String, System.String&gt;.</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.Validation`1">
            <summary>
            This object is used by <see cref="T:MyWebGrocer.Validation.Validator`1"/> to delay 
            validation until the <see cref="M:MyWebGrocer.Validation.Validator`1.Validate(`0)"/> call.
            This object holds references to the functions that will be used to verify 
            the value, and if the value fails verification, to function that will be used
            to create the validation error for that failure.
            </summary>
            <typeparam name="T">the type of the object being validated</typeparam>
        </member>
        <member name="P:MyWebGrocer.Validation.Validation`1.Verify">
            <summary>
            Function that will be used to validate the object
            </summary>
        </member>
        <member name="P:MyWebGrocer.Validation.Validation`1.Error">
            <summary>
            Function that will be used to create an error if the object fails validation
            </summary>
        </member>
        <member name="T:MyWebGrocer.Validation.ValidationError">
            <summary>
            this class is responsible for separating the property from the error message so that we can replace the property with
            a new property at a higher layer to reflect the property that the customer is expecting which is often slightly different
            than the one on the Domain object that we validated. This makes it possible to do validation in one place (business layer).
            <see cref="P:MyWebGrocer.Validation.ValidationError.MessageTemplate"/> should contain <see cref="F:MyWebGrocer.Validation.ValidationError.PropertyPlaceholder"/> instead of the property name so that
            <see cref="M:MyWebGrocer.Validation.ValidationError.ErrorMessage"/> can replace it when producing the error message.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ValidationError.PropertyPlaceholder">
            <summary>
            The property placeholder
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.ValidationError"/> class.
            </summary>
            <param name="property">The property.</param>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationError.CreateMessageTemplate(System.Func{System.String,System.String})">
            <summary>
            Create message template from property name
            </summary>
            <param name="formatWithProperty">formatWithProperty(string property)</param>
            <returns>message template</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationError.ErrorMessage">
            <summary>
            replaces <see cref="F:MyWebGrocer.Validation.ValidationError.PropertyPlaceholder"/> with <see cref="P:MyWebGrocer.Validation.ValidationError.Property"/> on <see cref="P:MyWebGrocer.Validation.ValidationError.MessageTemplate"/>
            </summary>
            <returns><see cref="P:MyWebGrocer.Validation.ValidationError.MessageTemplate"/> with <see cref="F:MyWebGrocer.Validation.ValidationError.PropertyPlaceholder"/> replaced with <see cref="P:MyWebGrocer.Validation.ValidationError.Property"/> on</returns>
        </member>
        <member name="P:MyWebGrocer.Validation.ValidationError.Property">
            <summary>
            Gets or sets the property.
            </summary>
            <value>The property.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.ValidationError.MessageTemplate">
            <summary>
            Gets or sets the message template.
            </summary>
            <value>The message template.</value>
        </member>
        <member name="T:MyWebGrocer.Validation.ValidationError`1">
            <summary>
            Class ValidationError.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationError`1.#ctor(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.ValidationError`1"/> class.
            </summary>
            <param name="propertyLambda">The property lambda.</param>
        </member>
        <member name="T:MyWebGrocer.Validation.ValidationException">
            <summary>
            Class ValidationException.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationException.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Validation.ValidationError})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.ValidationException"/> class.
            </summary>
            <param name="errors">The errors.</param>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="P:MyWebGrocer.Validation.ValidationException.Errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>The errors.</value>
        </member>
        <member name="T:MyWebGrocer.Validation.Validator`1">
            <summary>
            Validator is a chainable implementation of IValidator. You are able to chain together
            many validation constraints, deferring executing, and therefore the need for an instance
            of <typeparam name="T"/> until the final call to <see cref="M:MyWebGrocer.Validation.Validator`1.Validate(`0)"/> which comes from <see cref="T:MyWebGrocer.Validation.IValidator`1"/>.
            You are able to call Is{TProperty} and And{TProperty} which are effectively
            the same method, but provide a more fluent (readable) api.
            This class enables for a strongly typed way of getting property names, validating values, and producing <see cref="T:MyWebGrocer.Validation.ValidationError"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Validation.IValidator`1">
            <summary>
            Interface IValidator
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Validation.IValidator`1.Validate(`0)">
            <summary>
            Validates a value and throws a <see cref="T:MyWebGrocer.Validation.ValidationException"/> which contains 
            1 or more <see cref="T:MyWebGrocer.Validation.ValidationError"/> when the validation fails
            </summary>
            <param name="value">the non-null value to be validated</param>
        </member>
        <member name="F:MyWebGrocer.Validation.Validator`1.ValuePlaceholder">
            <summary>
            The value placeholder
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.Validator`1"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.CreateMessageTemplate(System.Func{System.String,System.String,System.String})">
            <summary>
            Create validation message template from property and value
            </summary>
            <param name="formatWithPropertyAndValue">formatWithPropertyAndValue(string property, string value)</param>
            <returns>validation message template</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.Is``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,System.Boolean},System.Func{``0,System.String})">
            <summary>
            provides a strongly typed way to validate values. <paramref name="propertyLambda"/> will be used to get the property name
            to associate with the <see cref="T:MyWebGrocer.Validation.ValidationError"/> if validation fails, and it is used to get the value to pass into
            <paramref name="verify"/>. <paramref name="verify"/> will then evaluate to a true or false, true means it passed validation.
            <paramref name="messageTemplateFunction"/> is used to produce a message template which will be placed in a <see cref="T:MyWebGrocer.Validation.ValidationError"/>.
            If the property name is desired to be in the <see cref="T:MyWebGrocer.Validation.ValidationError"/> it is important not to write out the property name
            but instead you should use the placeholder from <see cref="F:MyWebGrocer.Validation.ValidationError.PropertyPlaceholder"/>. <see cref="M:MyWebGrocer.Validation.ValidationError.ErrorMessage"/>
            will replace <see cref="F:MyWebGrocer.Validation.ValidationError.PropertyPlaceholder"/> with <see cref="P:MyWebGrocer.Validation.ValidationError.Property"/> at the last possible
            moment which enables us to create a validation error at the business layer that gets mapped to a media type property at the
            api layer.
            </summary>
            <typeparam name="TProperty">the type of the property to be evaluated and associated with the error if it fails</typeparam>
            <param name="propertyLambda">lambda for the property which will be used to get the property name as a string</param>
            <param name="verify">function that should evaluate to true if the object passes validation</param>
            <param name="messageTemplateFunction">function that returns the template to be used <see cref="P:MyWebGrocer.Validation.ValidationError.MessageTemplate"/></param>
            <returns>self for chaining</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.Is``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,System.Boolean},System.Func{``0,System.String})">
            <summary>
            Determines whether [is] [the specified property lambda].
            </summary>
            <typeparam name="TProperty">The type of the t property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <param name="verify">The verify.</param>
            <param name="messageTemplateFunction">The message template function.</param>
            <returns>Validator&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.Is``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether [is] [the specified property lambda].
            </summary>
            <typeparam name="TProperty">The type of the t property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <param name="verify">The verify.</param>
            <returns>Validator&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.Is(System.String,System.Func{`0,System.Boolean},System.String)">
            <summary>
            Determines whether [is] [the specified property name].
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="verify">The verify.</param>
            <param name="messageTemplate">The message template.</param>
            <returns>Validator&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.DefaultMessageTemplateFunction(System.Object)">
            <summary>
            Defaults the message template function.
            </summary>
            <param name="arg">The argument.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.And``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,System.Boolean},System.Func{``0,System.String})">
            <summary>
            Same as Is{TProperty}
            </summary>
            <typeparam name="TProperty">Same as Is{TProperty}</typeparam>
            <param name="propertyLambda">Same as Is{TProperty}</param>
            <param name="verify">Same as Is{TProperty}</param>
            <param name="messageTemplateFunction">Same as Is{TProperty}</param>
            <returns>Same as Is{TProperty}</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.And``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Ands the specified property lambda.
            </summary>
            <typeparam name="TProperty">The type of the t property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <param name="verify">The verify.</param>
            <returns>Validator&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.WhenNotNull``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,System.Boolean},System.Func{``0,System.String})">
            <summary>
            See Is{TProperty} for general context.
            This method will evaluate to true if the value of the property is null. This is meant to prevent each <paramref name="verify"/> from having to check to see
            if the value is null before then drilling into that object. Because this will evaluate to null, it is necessary to perform another check Is{TProperty}
            or And{TProperty} to check for null. There is also an extension method specifically for this at <see cref="M:MyWebGrocer.Validation.ValidatorExtensions.Requires``2(MyWebGrocer.Validation.Validator{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})"/>
            </summary>
            <typeparam name="TProperty">Same as Is{TProperty}</typeparam>
            <param name="propertyLambda">Same as Is{TProperty}</param>
            <param name="verify">Same as Is{TProperty} except that it has already been checked for null. If the value was null, true is returned and <paramref name="verify"/> is not called</param>
            <param name="messageTemplateFunction">Same as Is{TProperty}</param>
            <returns>Same as Is{TProperty}</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.WhenNotNull``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{`0,System.Boolean},System.Func{``0,System.String})">
            <summary>
            Whens the not null.
            </summary>
            <typeparam name="TProperty">The type of the t property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <param name="verify">The verify.</param>
            <param name="messageTemplateFunction">The message template function.</param>
            <returns>Validator&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.WhenNotNull``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{``0,System.Boolean})">
            <summary>
            Whens the not null.
            </summary>
            <typeparam name="TProperty">The type of the t property.</typeparam>
            <param name="propertyLambda">The property lambda.</param>
            <param name="verify">The verify.</param>
            <returns>Validator&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.Validate(`0)">
            <summary>
            throws a <see cref="T:MyWebGrocer.Validation.ValidationException"/> in accordance with <see cref="M:MyWebGrocer.Validation.IValidator`1.Validate(`0)"/>. Exception
            will contain <see cref="T:MyWebGrocer.Validation.ValidationError"/> for each error encountered.
            </summary>
            <param name="value">instance to be validated</param>
            <exception cref="T:System.ArgumentException">value is null and cannot be validated</exception>
            <exception cref="T:MyWebGrocer.Validation.ValidationException"></exception>
        </member>
        <member name="M:MyWebGrocer.Validation.Validator`1.DefaultValidationMessageFor(System.String)">
            <summary>
            Defaults the validation message for.
            </summary>
            <param name="value">The value.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:MyWebGrocer.Validation.Validator`1.DefaultValidationMessageTemplate">
            <summary>
            Default validation message template when property has invalid value
            </summary>
            <value>The default validation message template.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.Validator`1.RequiredValidationMessageTemplate">
            <summary>
            Validation message template when the required property value is not present
            </summary>
            <value>The required validation message template.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.Validator`1.Validations">
            <summary>
            Gets the validations.
            </summary>
            <value>The validations.</value>
        </member>
        <member name="T:MyWebGrocer.Validation.ValidatorExtensions">
            <summary>
            Class ValidatorExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidatorExtensions.Requires``2(MyWebGrocer.Validation.Validator{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Validates that the property is not null
            </summary>
            <typeparam name="T">the type of the object being validated</typeparam>
            <typeparam name="TProperty">the type of the property being validated</typeparam>
            <param name="validator">the validator which will also be returned to support a fluent syntax</param>
            <param name="propertyLambda">expression to get the property name and value</param>
            <returns>the validator passed in to support fluent syntax</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidatorExtensions.Requires``1(MyWebGrocer.Validation.Validator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}})">
            <summary>
            Validates that the string property is not null or whitespace
            </summary>
            <typeparam name="T">the type of the object being validated</typeparam>
            <param name="validator">the validator which will also be returned to support a fluent syntax</param>
            <param name="propertyLambda">expression to get the property name and value</param>
            <returns>the validator passed in to support fluent syntax</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidatorExtensions.Requires``1(MyWebGrocer.Validation.Validator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.String)">
            <summary>
            Validates that the string property is not null or whitespace
            </summary>
            <typeparam name="T">the type of the object being validated</typeparam>
            <param name="validator">the validator which will also be returned to support a fluent syntax</param>
            <param name="propertyLambda">expression to get the property name and value</param>
            <param name="errorMessage">error messaage to be returned when validation fails</param>
            <returns>the validator passed in to support fluent syntax</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidatorExtensions.RequiresIf``1(MyWebGrocer.Validation.Validator{``0},System.Linq.Expressions.Expression{System.Func{``0,System.String}},System.Boolean)">
            <summary>
            Conditionally validates that the string property is not null or whitespace
            </summary>
            <typeparam name="T">the type of the object being validated</typeparam>
            <param name="validator">the validator which will also be returned to support a fluent syntax</param>
            <param name="propertyLambda">expression to get the property name and value</param>
            <param name="isRequired">condition to apply validation or not</param>
            <returns>the validator passed in to support fluent syntax</returns>
        </member>
        <member name="T:MyWebGrocer.Xml.IXmlLoader">
            <summary>
            Assist in loading XML files
            </summary>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlLoader.LoadFile(System.String)">
            <summary>
            Load XML file into <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="filePath">The path to the XML file</param>
            <returns>The <see cref="T:System.Xml.Linq.XElement"/> containing the file contents</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlLoader.LoadFileFromAppDomainPath(System.String)">
            <summary>
            Load XML file into <see cref="T:System.Xml.Linq.XElement"/>
            </summary>
            <param name="partialFilePath">The path to the XML file, after the <see cref="P:System.AppDomain.CurrentDomain"/> BaseDirectory</param>
            <returns>The <see cref="T:System.Xml.Linq.XElement"/> containing the file contents</returns>
        </member>
        <member name="T:MyWebGrocer.Xml.XmlLoader">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Xml.XmlLoader.LoadFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Xml.XmlLoader.LoadFileFromAppDomainPath(System.String)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Xml.XmlRegistry">
            <summary>Configures interfaces in the Xml namespace using StructureMap.</summary>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlRegistry.#ctor">
            <summary>Initializes a new instance of <see cref="T:MyWebGrocer.Xml.XmlRegistry"/>, which causes
            the StructureMap configuration to run.</summary>
        </member>
        <member name="T:MyWebGrocer.Xml.XmlSchemaValidatorHelper">
            <summary>
            Implementation of an <see cref="T:MyWebGrocer.Xml.IXmlSchemaValidatorHelper"/>.
            </summary>
            <remarks>Configured as a singleton in StructureMap as there is currently no instance
            state.</remarks>
        </member>
        <member name="T:MyWebGrocer.Xml.IXmlSchemaValidatorHelper">
            <summary>Interface for objects which validate XML data
            against an arbitrary XML Schema Definition.</summary>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlSchemaValidatorHelper.Validate(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>Validates the given XML data against the given schema, and throws
            a <see cref="T:System.Xml.Schema.XmlSchemaException"/> if there are errors.</summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlSchemaValidatorHelper.Validate(System.Xml.XmlDocument,System.Xml.XmlReader)">
            <summary>Validates the given XML data against the given schema, and throws
            a <see cref="T:System.Xml.Schema.XmlSchemaException"/> if there are errors.</summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlSchemaValidatorHelper.Validate(System.Xml.Linq.XDocument,System.IO.Stream)">
            <summary>Validates the given XML data against the given schema, and throws
            a <see cref="T:System.Xml.Schema.XmlSchemaException"/> if there are errors.</summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlSchemaValidatorHelper.Validate(System.Xml.Linq.XDocument,System.Xml.XmlReader)">
            <summary>Validates the given XML data against the given schema, and throws
            a <see cref="T:System.Xml.Schema.XmlSchemaException"/> if there are errors.</summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlSchemaValidatorHelper.IsValid(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>Validates the given XML data against the given schema.</summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
            <returns><c>true</c> if the <paramref name="xmlDocument"/> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlSchemaValidatorHelper.IsValid(System.Xml.XmlDocument,System.Xml.XmlReader)">
            <summary>Validates the given XML data against the given schema.</summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
            <returns><c>true</c> if the <paramref name="xmlDocument"/> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlSchemaValidatorHelper.IsValid(System.Xml.Linq.XDocument,System.IO.Stream)">
            <summary>Validates the given XML data against the given schema.</summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
            <returns><c>true</c> if the <paramref name="xmlDocument"/> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.IXmlSchemaValidatorHelper.IsValid(System.Xml.Linq.XDocument,System.Xml.XmlReader)">
            <summary>Validates the given XML data against the given schema.</summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
            <returns><c>true</c> if the <paramref name="xmlDocument"/> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="F:MyWebGrocer.Xml.XmlSchemaValidatorHelper.ScheamReaderAction">
            <summary>
            Event handler used when loading the schema.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.Validate(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
            Validates the given XML data against the given schema, and throws
            a <see cref="T:System.Xml.Schema.XmlSchemaException"/> if there are errors.
            </summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.Validate(System.Xml.XmlDocument,System.Xml.XmlReader)">
            <summary>
            Validates the given XML data against the given schema, and throws
            a <see cref="T:System.Xml.Schema.XmlSchemaException"/> if there are errors.
            </summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.Validate(System.Xml.Linq.XDocument,System.IO.Stream)">
            <summary>
            Validates the given XML data against the given schema, and throws
            a <see cref="T:System.Xml.Schema.XmlSchemaException"/> if there are errors.
            </summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.Validate(System.Xml.Linq.XDocument,System.Xml.XmlReader)">
            <summary>
            Validates the given XML data against the given schema, and throws
            a <see cref="T:System.Xml.Schema.XmlSchemaException"/> if there are errors.
            </summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.IsValid(System.Xml.XmlDocument,System.IO.Stream)">
            <summary>
            Validates the given XML data against the given schema.
            </summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
            <returns><c>true</c> if the <paramref name="xmlDocument" /> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.IsValid(System.Xml.XmlDocument,System.Xml.XmlReader)">
            <summary>
            Validates the given XML data against the given schema.
            </summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
            <returns><c>true</c> if the <paramref name="xmlDocument" /> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.IsValid(System.Xml.Linq.XDocument,System.IO.Stream)">
            <summary>
            Validates the given XML data against the given schema.
            </summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
            <returns><c>true</c> if the <paramref name="xmlDocument" /> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.IsValid(System.Xml.Linq.XDocument,System.Xml.XmlReader)">
            <summary>
            Validates the given XML data against the given schema.
            </summary>
            <param name="xmlDocument">The XML document to validate against the schema.</param>
            <param name="xsdReader">Reads the schema to use for the validation.</param>
            <returns><c>true</c> if the <paramref name="xmlDocument" /> is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.IsXmlValid(System.String,System.Xml.XmlReader)">
            <summary>
            Wrapper function that runs the validation and catches the exception.
            </summary>
            <param name="xml">The XML.</param>
            <param name="schema">The schema.</param>
            <returns><c>true</c> if no exception was thrown, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSchemaValidatorHelper.Validate(System.String,System.Xml.XmlReader)">
            <summary>
            Performs the validation by reading the XML document against the specified
            schema.
            </summary>
            <param name="xmlDocument">The XML document to check.</param>
            <param name="schemaReader">An <see cref="T:System.Xml.XmlReader"/> used to read the schema.</param>
        </member>
        <member name="T:MyWebGrocer.Xml.XmlWrapper`1">
            <summary>
            Custom Data Container
            </summary>
            <typeparam name="TContainer">The type of the t container.</typeparam>
        </member>
        <member name="F:MyWebGrocer.Xml.XmlWrapper`1.SerializationKey">
            <summary>
            The serialization key
            </summary>
        </member>
        <member name="F:MyWebGrocer.Xml.XmlWrapper`1._rootElementName">
            <summary>
            The _root element name
            </summary>
        </member>
        <member name="F:MyWebGrocer.Xml.XmlWrapper`1._data">
            <summary>
            The _data
            </summary>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlWrapper`1.#ctor">
            <summary>
            Constructor used to create an empty XDocument.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlWrapper`1.#ctor(System.String)">
            <summary>
            Constructor used to create an XDocument for existing data.
            </summary>
            <param name="xml">Data as XML string</param>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlWrapper`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Xml.XmlWrapper`1"/> class.
            </summary>
            <param name="info">The information.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlWrapper`1.Get``1(MyWebGrocer.Xml.IXDocumentSerializer{``0,`0})">
            <summary>
            Retrieve serialized data of specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="adapter">The adapter.</param>
            <returns>Stored data</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlWrapper`1.Set``1(MyWebGrocer.Xml.IXDocumentSerializer{``0,`0},`0,``0)">
            <summary>
            Store serialized data of specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="adapter">The adapter.</param>
            <param name="container">The container.</param>
            <param name="content">The content.</param>
            <returns>Stored data</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlWrapper`1.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlWrapper`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
        </member>
        <member name="P:MyWebGrocer.Xml.XmlWrapper`1.HasContent">
            <summary>
            Indicates whether this instance contains any data.
            </summary>
            <value><c>true</c> if this instance has content; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MyWebGrocer.Xml.IXDocumentSerializer`2">
            <summary>
            Interface IXDocumentSerializer
            </summary>
            <typeparam name="TContent">The type of the t content.</typeparam>
            <typeparam name="TContainer">The type of the t container.</typeparam>
        </member>
        <member name="M:MyWebGrocer.Xml.IXDocumentSerializer`2.Serialize(`0)">
            <summary>
            Serializes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>XDocument.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.IXDocumentSerializer`2.Deserialize(System.Xml.Linq.XDocument)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns>TContent.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.IXDocumentSerializer`2.ValidateChange(`1,`0,`0)">
            <summary>
            Validates the change.
            </summary>
            <param name="container">The container.</param>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="P:MyWebGrocer.Xml.IXDocumentSerializer`2.NodeName">
            <summary>
            Gets the name of the node.
            </summary>
            <value>The name of the node.</value>
        </member>
        <member name="T:MyWebGrocer.Xml.XmlSerializerAdapter`2">
            <summary>
            Class XmlSerializerAdapter.
            </summary>
            <typeparam name="TContent">The type of the t content.</typeparam>
            <typeparam name="TContainer">The type of the t container.</typeparam>
        </member>
        <member name="F:MyWebGrocer.Xml.XmlSerializerAdapter`2._rootNodeName">
            <summary>
            The _root node name
            </summary>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSerializerAdapter`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Xml.XmlSerializerAdapter`2"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSerializerAdapter`2.Serialize(`0)">
            <summary>
            Serializes the specified instance.
            </summary>
            <param name="instance">The instance.</param>
            <returns>XDocument.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSerializerAdapter`2.Deserialize(System.Xml.Linq.XDocument)">
            <summary>
            Deserializes the specified element.
            </summary>
            <param name="element">The element.</param>
            <returns>TContent.</returns>
        </member>
        <member name="M:MyWebGrocer.Xml.XmlSerializerAdapter`2.ValidateChange(`1,`0,`0)">
            <summary>
            Validates the change.
            </summary>
            <param name="container">The container.</param>
            <param name="oldContent">The old content.</param>
            <param name="newContent">The new content.</param>
        </member>
        <member name="P:MyWebGrocer.Xml.XmlSerializerAdapter`2.Serializer">
            <summary>
            Gets or sets the serializer.
            </summary>
            <value>The serializer.</value>
        </member>
        <member name="P:MyWebGrocer.Xml.XmlSerializerAdapter`2.NodeName">
            <summary>
            Gets the name of the node.
            </summary>
            <value>The name of the node.</value>
        </member>
        <member name="T:MyWebGrocer.Utility.TransactionHelper">
            <summary>
            Class TransactionHelper. TODO DELETE THIS??
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.TransactionHelper.ReadCommittedScope(System.Boolean)">
            <summary>
            Reads the committed scope.
            </summary>
            <param name="requiresNew">if set to <c>true</c> [requires new].</param>
            <returns>TransactionScope.</returns>
        </member>
        <member name="T:MyWebGrocer.DataExtensions">
            <summary>
            Contains extension methods related to DataTables, DataSets, Rows, etc.
            </summary>
        </member>
        <member name="M:MyWebGrocer.DataExtensions.HasRows(System.Data.DataTable)">
            <summary>
            Determines if there are any rows
            </summary>
            <param name="dataTable">The data table</param>
            <returns>True if the data table is not null and it has rows, else false</returns>
        </member>
        <member name="M:MyWebGrocer.DataExtensions.Parse``1(System.Data.DataRow,System.String)">
            <summary>
            Returns a the strongly typed value of <code>row[columnName]</code>.
            <para>_</para>
            <para>When <typeparamref name="T"/> is a <see cref="T:System.String"/> and the column contains a null, it will return string.Empty.</para>
            <para>When <typeparamref name="T"/> is a <see cref="T:System.DateTime"/> and the column contains a null, it will return DateTime.MinValue.</para>
            </summary>
            <typeparam name="T">The type of value to parse</typeparam>
            <param name="row">The row containing the column</param>
            <param name="columnName">The column name</param>
            <returns>
            The value if it exists, otherwise the default of <typeparamref name="T"/>
            </returns>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:System.Data.DataRow"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            No column matches the <paramref name="columnName"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            The column is not of type T
            </exception>
        </member>
        <member name="M:MyWebGrocer.DataExtensions.Parse``1(System.Data.DataRow,System.String,``0)">
            <summary>
            Returns a the strongly typed value of <code>row[columnName]</code>.
            <para>_</para>
            <para>When <typeparamref name="T"/> is a <see cref="T:System.String"/> and the column contains a null, it will return string.Empty.</para>
            <para>When <typeparamref name="T"/> is a <see cref="T:System.DateTime"/> and the column contains a null, it will return DateTime.MinValue.</para>
            </summary>
            <typeparam name="T">The type of value to parse</typeparam>
            <param name="row">The row containing the column</param>
            <param name="columnName">The column name</param>
            <param name="defaultValue">The value to return if the column is null</param>
            <returns>
            The value if it exists.  Otherwise <paramref name="defaultValue"/>
            </returns>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:System.Data.DataRow"/> is null
            </exception>
            <exception cref="T:System.ArgumentException">
            No column matches the <paramref name="columnName"/>
            </exception>
            <exception cref="T:System.ArgumentException">
            The column is not an instance of T
            </exception>
        </member>
        <member name="M:MyWebGrocer.DataExtensions.TryParse``1(System.Data.DataRow,System.String,``0@)">
            <summary>
            Tries the parse.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="row">The row.</param>
            <param name="columnName">Name of the column.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.DataExtensions.ConvertColumnValue``1(System.Data.DataRow,System.String,``0)">
            <summary>
            Converts column value to <typeparamref name="T"/>
            </summary>
            <typeparam name="T">The type of value</typeparam>
            <param name="row">The row containing the column</param>
            <param name="columnName">The column name</param>
            <param name="defaultValue">The value to use if conversion cannot happen</param>
            <returns>Type safe value of <paramref name="columnName"/>, otherwise <paramref name="defaultValue"/></returns>
        </member>
        <member name="M:MyWebGrocer.DataExtensions.EnforceDefaultValue``1(``0,``0)">
            <summary>
            Evaluates the <paramref name="result"/> and <paramref name="defaultValue"/> to ensure default values
            are used for data types where the parsing my not have used them
            </summary>
            <typeparam name="T">The type of value</typeparam>
            <param name="result">The value to check</param>
            <param name="defaultValue">The value to return if <paramref name="result"/> is based on a null</param>
            <returns><paramref name="result"/> if it is not based on null, otherwise <paramref name="defaultValue"/></returns>
        </member>
        <member name="M:MyWebGrocer.DataExtensions.GetValueAsString``1(System.Data.DataRow,System.String)">
            <summary>
            Returns a string representation of the column value
            </summary>
            <typeparam name="T">The type of value</typeparam>
            <param name="row">The row containing the cell</param>
            <param name="columnName">The name of the column</param>
            <returns>The data as a string if it exists, otherwise string.Empty</returns>
        </member>
        <member name="M:MyWebGrocer.DataExtensions.ThrowForInvalidCall``1(System.Data.DataRow,System.String)">
            <summary>
            Throws an <exception cref="T:System.ArgumentException">ArgumentException</exception> if the DataRow is null, if the
            column doesn't exist in the DataRow or if the column is of the wrong datatype for the parse
            action being performed
            </summary>
            <typeparam name="T">Type the column is about to be parsed to</typeparam>
            <param name="row">The DataRow</param>
            <param name="columnName">The name of the desired column</param>
        </member>
        <member name="T:MyWebGrocer.Events.DeletedEventArgs`1">
            <summary>
            Event which is raised by a repository when it successfully deletes
            a business object.
            </summary>
            <typeparam name="T">The type of business object deleted.</typeparam>
        </member>
        <member name="M:MyWebGrocer.Events.DeletedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Events.DeletedEventArgs`1"/> class.
            </summary>
            <param name="deleteObject">The delete object.</param>
        </member>
        <member name="P:MyWebGrocer.Events.DeletedEventArgs`1.DeletedObject">
            <summary>
            The object which was deleted.
            </summary>
            <value>The deleted object.</value>
        </member>
        <member name="T:MyWebGrocer.Events.EventPublisher">
            <summary>
            Class EventPublisher.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Events.IEventPublisher">
            <summary>
            Interface IEventPublisher
            </summary>
        </member>
        <member name="M:MyWebGrocer.Events.IEventPublisher.Publish``1(``0)">
            <summary>
            Publishes the specified event message.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMessage">The event message.</param>
        </member>
        <member name="F:MyWebGrocer.Events.EventPublisher._subscriptionService">
            <summary>
            The _subscription service
            </summary>
        </member>
        <member name="M:MyWebGrocer.Events.EventPublisher.#ctor(MyWebGrocer.Events.ISubscriptionService)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Events.EventPublisher"/> class.
            </summary>
            <param name="subscriptionService">The subscription service.</param>
        </member>
        <member name="M:MyWebGrocer.Events.EventPublisher.Publish``1(``0)">
            <summary>
            Publishes the specified event message.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventMessage">The event message.</param>
        </member>
        <member name="M:MyWebGrocer.Events.EventPublisher.PublishToHandler``1(MyWebGrocer.Events.IEventHandler{``0},``0)">
            <summary>
            Publishes to handler.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="handler">The handler.</param>
            <param name="eventMessage">The event message.</param>
        </member>
        <member name="T:MyWebGrocer.Events.EventsRegistry">
            <summary>
            Class EventsRegistry.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Events.EventsRegistry.#ctor">
            <summary>
            Register <see cref="T:MyWebGrocer.Events.ISubscriptionService"/> and <see cref="T:MyWebGrocer.Events.IEventPublisher"/>.  Optionally call ConfigureEvents to auto wireup events.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Events.EventsRegistry.ConfigureEvents">
            <summary>
            Call this to have StructureMap configure your event
            handler classes so that they will receive messages
            sent from the publisher.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Events.EventSubscriptions">
            <summary>
            Class EventSubscriptions.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Events.ISubscriptionService">
            <summary>
            Interface ISubscriptionService
            </summary>
        </member>
        <member name="M:MyWebGrocer.Events.ISubscriptionService.GetSubscriptions``1">
            <summary>
            Gets the subscriptions.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>IEnumerable&lt;IEventHandler&lt;T&gt;&gt;.</returns>
        </member>
        <member name="F:MyWebGrocer.Events.EventSubscriptions._container">
            <summary>
            The _container
            </summary>
        </member>
        <member name="M:MyWebGrocer.Events.EventSubscriptions.#ctor(StructureMap.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Events.EventSubscriptions"/> class.
            </summary>
            <param name="container">The container.</param>
        </member>
        <member name="M:MyWebGrocer.Events.EventSubscriptions.GetSubscriptions``1">
            <summary>
            Gets the subscriptions.
            </summary>
            <typeparam name="T"></typeparam>
            <returns>IEnumerable&lt;IEventHandler&lt;T&gt;&gt;.</returns>
        </member>
        <member name="T:MyWebGrocer.Events.IEventHandler`1">
            <summary>
            Interface IEventHandler
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Events.IEventHandler`1.Handle(`0)">
            <summary>
            Handles the specified event message.
            </summary>
            <param name="eventMessage">The event message.</param>
        </member>
        <member name="T:MyWebGrocer.Events.SavedEventArgs`1">
            <summary>
            Event which is raised by a repository when it successfully saves
            a business object.
            </summary>
            <typeparam name="T">The type of business object saved.</typeparam>
        </member>
        <member name="M:MyWebGrocer.Events.SavedEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Events.SavedEventArgs`1"/> class.
            </summary>
            <param name="savedObject">The saved object.</param>
        </member>
        <member name="P:MyWebGrocer.Events.SavedEventArgs`1.SavedObject">
            <summary>
            The object which was saved.
            </summary>
        </member>
        <member name="T:MyWebGrocer.IApplicationContext">
            <summary>
            Interface IApplicationContext
            </summary>
        </member>
        <member name="P:MyWebGrocer.IApplicationContext.HomePageUrl">
            <summary>
            Full URL of application home page, including http:// prefix.
            </summary>
        </member>
        <member name="T:MyWebGrocer.IEncryptable">
            <summary>
            things, such as password, that can be encrypted and verified
            </summary>
        </member>
        <member name="M:MyWebGrocer.IEncryptable.Encrypt(System.String)">
            <summary>
            encrypt clear text
            </summary>
            <param name="clearText">
            The clear text.
            </param>
            <returns>
            hash value of clear text computed by the crytograhy algorithm
            </returns>
        </member>
        <member name="M:MyWebGrocer.IEncryptable.Match(System.String)">
            <summary>
            verify the encrypted text of  matches the object
            </summary>
            <param name="clearText">
            The text to be matched against this encryptable object
            </param>
            <returns>
            true if the encrypted text of clearText matches the encryptable object
            </returns>
        </member>
        <member name="P:MyWebGrocer.IEncryptable.HashValue">
            <summary>
            Get the hash value
            </summary>
        </member>
        <member name="P:MyWebGrocer.IEncryptable.HashAlgorithm">
            <summary>
            Gets or sets HashAlgorithm.
            </summary>
        </member>
        <member name="T:MyWebGrocer.IListable">
            <summary>
            Interface representing an item that can be included in a shopping list.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.Id">
            <summary>
            Unique identifier for listable entity, e.g. product, circular item, coupon, balance. 
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.ItemSource">
            <summary>
            Should match the name of an enumeration in ShoppingList.ListItemSource.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.Name">
            <summary>
            List item name.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.Description">
            <summary>
            List item description.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.Messages">
            <summary>
            A collection of message strings adding additional description information.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.CategoryId">
            <summary>
            Category ID the list item belongs to, determining how the list will be grouped.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.AisleName">
            <summary>
            Name of aisle where product can be found.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.ImageFile">
            <summary>
            Filename of the image depicting the item.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.PriceText">
            <summary>
            Text describing the item price and/or conditions of sale.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.MoreInfoLink">
            <summary>
            A URL pointing to a page that provides additional information about the item.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.MoreInfoLinkLabel">
            <summary>
            The label to be used when displaying the MoreInfoLink.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.StartDate">
            <summary>
            Earliest date on which the item and specified price/value apply,
            or null if no limit.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.EndDate">
            <summary>
            Latest date on which the item and specified price/value apply,
            or null if no limit.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.DisplayEndDate">
            <summary>
            The display end date for item.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.SearchTerms">
            <summary>
            Indicates the search terms related to this item.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.IsRemovable">
            <summary>
            Indicates whether the shopper is able to remove the item from the list.
            </summary>
        </member>
        <member name="P:MyWebGrocer.IListable.IsQuantityChangeable">
            <summary>
            Indicates whether the shopper is able to change the quantity of the item in the list.
            </summary>
        </member>
        <member name="T:MyWebGrocer.IMeasurable">
            <summary>
            Interface IMeasurable
            </summary>
        </member>
        <member name="P:MyWebGrocer.IMeasurable.Unit">
            <summary>
            Gets or sets the unit.
            </summary>
            <value>The unit.</value>
        </member>
        <member name="P:MyWebGrocer.IMeasurable.Increment">
            <summary>
            Gets or sets the increment.
            </summary>
            <value>The increment.</value>
        </member>
        <member name="P:MyWebGrocer.IMeasurable.Range">
            <summary>
            Gets or sets the range.
            </summary>
            <value>The range.</value>
        </member>
        <member name="T:MyWebGrocer.ISelectable">
            <summary>
            Interface ISelectable
            </summary>
        </member>
        <member name="P:MyWebGrocer.ISelectable.IsSelected">
            <summary>
            Gets a value indicating whether this instance is selected.
            </summary>
            <value><c>true</c> if this instance is selected; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MyWebGrocer.Pricing.PriceExtensions">
            <summary>
            Class PriceExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Pricing.PriceExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,MyWebGrocer.Price})">
            <summary>
            Computes the sum of <see cref="T:MyWebGrocer.Price"/>s.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <param name="source">The list of prices to sum.</param>
            <param name="selector">Selection method</param>
            <returns>The sumation of the prices.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="M:MyWebGrocer.Pricing.PriceExtensions.Sum(System.Collections.Generic.IEnumerable{MyWebGrocer.Price})">
            <summary>
            Computes the sum of <see cref="T:MyWebGrocer.Price"/>s.
            </summary>
            <param name="source">The list of prices to sum.</param>
            <returns>The sumation of the prices.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="T:MyWebGrocer.Reflection.Reflector`1">
            <summary>
            Reflection helper.
            </summary>
            <typeparam name="T">The type being reflected against.</typeparam>
            <remarks>This class could eventually cache the reflection results.</remarks>
        </member>
        <member name="M:MyWebGrocer.Reflection.Reflector`1.SetPropertyValue``1(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>
            Sets the specified property to the specified value.
            </summary>
            <typeparam name="TValue">The property's expected type.</typeparam>
            <param name="target">The instance on which to set the value.</param>
            <param name="property">A lambda indicating the property to set.</param>
            <param name="value">The value to set.</param>
            <remarks>This method is intended for use with properties that have auto-
            generated backing fields and / or has a private setter.</remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when one of the following is true:
            <list type="bullet">
              <item><description><paramref name="property"/> is not a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</description></item>
              <item><description><paramref name="property"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</description></item>
              <item><description><paramref name="property"/> does not resolve to a <see cref="T:System.Reflection.PropertyInfo"/>.</description></item>
              <item><description><paramref name="property"/>'s <see cref="T:System.Type"/> does not 
              match <typeparamref name="TValue"/>'s <see cref="T:System.Type"/>.</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="property"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MyWebGrocer.Reflection.Reflector`1.SetFieldValue``1(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},``0)">
            <summary>
            Sets the specified field to the specified value.  Field names must
            match MWG standards (i.e., the backing field for property <code>Options</code> must
            be <code>_options</code>).
            </summary>
            <typeparam name="TValue">The field's type.</typeparam>
            <param name="target">The instance on which to set the value.</param>
            <param name="property">A lambda indicating the property to set; the name
            of the backing field is assumed to follow MWG standards.</param>
            <param name="value">The value to set.</param>
            <remarks>This method cannot be used with auto-generated backing fields,
            and is intended to be used only for properties which do not define
            setter methods.</remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when one of the following is true:
            <list type="bullet">
              <item><description><paramref name="property"/> is not a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</description></item>
              <item><description><paramref name="property"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</description></item>
              <item><description><paramref name="property"/> does not resolve to a <see cref="T:System.Reflection.PropertyInfo"/>.</description></item>
              <item><description><paramref name="property"/> does not have a backing field name matching MWG's standards and
              thus could not be found.</description></item>
              <item><description><paramref name="property"/> has a backing field name <see cref="T:System.Type"/> which is not
              compatible with <typeparamref name="TValue"/>'s <see cref="T:System.Type"/>.</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="target"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="property"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:MyWebGrocer.Reflection.Reflector`1.SetIdValue(`0,System.Int32)">
            <summary>
            Sets the id value of a business entity.  The business entity
            must contain a property named <code>Id</code>.
            </summary>
            <param name="target">The business entity whose id to set.</param>
            <param name="id">The value to set.</param>
        </member>
        <member name="M:MyWebGrocer.Reflection.Reflector`1.GetPropertyInfo(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Gets the property referenced by a lambda.
            </summary>
            <param name="property">The expression defining the property to get.</param>
            <returns>The <see cref="T:System.Reflection.PropertyInfo"/> object containing metadata
            about the property.</returns>
            <exception cref="T:System.ArgumentException">
            Thrown when one of the following is true:
            <list type="bullet">
              <item><description><paramref name="property"/> is not a <see cref="T:System.Linq.Expressions.LambdaExpression"/>.</description></item>
              <item><description><paramref name="property"/> is not a <see cref="T:System.Linq.Expressions.MemberExpression"/>.</description></item>
              <item><description><paramref name="property"/> does not resolve to a <see cref="T:System.Reflection.PropertyInfo"/>.</description></item>
            </list>
            </exception>
        </member>
        <member name="M:MyWebGrocer.Reflection.Reflector`1.GetFieldInfo``1(System.String)">
            <summary>
            Gets a field by field name, drilling down
            through the inheritance hierarchy.
            </summary>
            <typeparam name="V">The field's expected type.</typeparam>
            <param name="fieldName">The name of the field to find.</param>
            <returns>A <see cref="T:System.Reflection.FieldInfo"/></returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fieldName"/>
            does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="fieldName"/>'s
            <see cref="T:System.Type"/> does not match <typeparamref name="V"/>'s <see cref="T:System.Type"/>.</exception>
        </member>
        <member name="T:MyWebGrocer.Repository.IConnectionTarget">
            <summary>
            Interface IConnectionTarget
            </summary>
        </member>
        <member name="P:MyWebGrocer.Repository.IConnectionTarget.ServerName">
            <summary>
            Gets the name of the server.
            </summary>
            <value>The name of the server.</value>
        </member>
        <member name="P:MyWebGrocer.Repository.IConnectionTarget.MirrorServerName">
            <summary>
            Gets the name of the mirror server.
            </summary>
            <value>The name of the mirror server.</value>
        </member>
        <member name="P:MyWebGrocer.Repository.IConnectionTarget.DatabaseName">
            <summary>
            Gets the name of the database.
            </summary>
            <value>The name of the database.</value>
        </member>
        <member name="T:MyWebGrocer.Repository.IRepository">
            <summary>
            Interface which should be implemented by all repositories
            which will be used with MWG.Web.Mvc controllers.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Repository.IRepository.SubmitChanges">
            <summary>
            Tells the repository that it must send any
            batched changes to the database server for
            processing.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Search.Criteria">
            <summary>
            Base class for criteria which has sorting 
            and paging requirements.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Search.Criteria.PageSize">
            <summary>
            Gets or sets the number of results
            to return in a page.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Search.Criteria.PageNumber">
            <summary>
            Gets or sets the page of the results
            to return, from 1 to &lt;last_page&gt;.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Search.Criteria.SortDirection">
            <summary>
            Gets or sets the direction of the sorting.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Search.Criteria.SortDirections">
            <summary>
            Indicates the direction of the sort.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Search.Criteria.SortDirections.Ascending">
            <summary>
            The sort will be done in ascending order.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Search.Criteria.SortDirections.Descending">
            <summary>
            The sort will be done in descending order.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Search.SearchResult`1">
            <summary>
            Base class for search results.
            </summary>
            <typeparam name="T">The type of items returned
            by the search.</typeparam>
        </member>
        <member name="M:MyWebGrocer.Search.SearchResult`1.#ctor(System.Int32,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Search.SearchResult`1"/> class.
            </summary>
            <param name="resultCount">The result count.</param>
            <param name="pageCount">The page count.</param>
            <param name="pageNumber">The page number.</param>
            <param name="results">The results.</param>
        </member>
        <member name="P:MyWebGrocer.Search.SearchResult`1.PageCount">
            <summary>
            Gets the total number of pages.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Search.SearchResult`1.PageNumber">
            <summary>
            The page number being returned.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Search.SearchResult`1.ResultCount">
            <summary>
            Gets the total number of results.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Search.SearchResult`1.Results">
            <summary>
            Gets the results of the search.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Specifications.ChainedSpecification`1">
            <summary>
            Class ChainedSpecification.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Specifications.ChainedSpecification`1.#ctor(MyWebGrocer.Specifications.Specification{`0},MyWebGrocer.Specifications.Specification{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Specifications.ChainedSpecification`1"/> class.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
        </member>
        <member name="M:MyWebGrocer.Specifications.ChainedSpecification`1.Combine(System.Collections.Generic.List{MyWebGrocer.Specifications.Specification{`0}},MyWebGrocer.Specifications.ChainedSpecification{`0})">
            <summary>
            Combines the specified un met specs.
            </summary>
            <param name="unMetSpecs">The un met specs.</param>
            <param name="chained">The chained.</param>
            <returns>List&lt;Specification&lt;T&gt;&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.ChainedSpecification`1.FirstSatisfiedBy(`0)">
            <summary>
            Firsts the satisfied by.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.ChainedSpecification`1.SecondSatisfiedBy(`0)">
            <summary>
            Seconds the satisfied by.
            </summary>
            <param name="candidate">The candidate.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.ChainedSpecification`1.BuildSatisfying(`0)">
            <summary>
            Builds an object that satisfies the specification criteria. This is typically accomplished by passing the specification into a Factory. The factory will create an object instance and allow each specification to alter the object to meet its specification. <remarks> Overriding types should alter the candidate such that it will satisfy the criteria of the specification. </remarks>
            </summary>
            <param name="candidate">The candidate.</param>
        </member>
        <member name="P:MyWebGrocer.Specifications.ChainedSpecification`1.First">
            <summary>
            The first
            </summary>
        </member>
        <member name="P:MyWebGrocer.Specifications.ChainedSpecification`1.Second">
            <summary>
            The second
            </summary>
        </member>
        <member name="P:MyWebGrocer.Specifications.ChainedSpecification`1.UnMetSpecifications">
            <summary>
            Gets or sets the un met specifications.
            </summary>
            <value>The un met specifications.</value>
        </member>
        <member name="T:MyWebGrocer.State">
            <summary>
            Represents a state in the US and territories (including foreign bases)
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Alabama">
            <summary>
            The state of alabama
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Alaska">
            <summary>
            The state of alaska
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.AmericanSamoa">
            <summary>
            The state of american samoa
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Arizona">
            <summary>
            The state of arizona
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Arkansas">
            <summary>
            The state of arkansas
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.ArmedForcesAmerica">
            <summary>
            The state of armed forces america
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.ArmedForcesEurope">
            <summary>
            The state of armed forces europe
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.ArmedForcesPacific">
            <summary>
            The state of armed forces pacific
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.California">
            <summary>
            The state of california
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Colorado">
            <summary>
            The state of colorado
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Connecticut">
            <summary>
            The state of connecticut
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Delaware">
            <summary>
            The state of delaware
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.FederatedStatesOfMicronesia">
            <summary>
            The state of federated states of micronesia
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Florida">
            <summary>
            The state of florida
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Georgia">
            <summary>
            The state of georgia
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Guam">
            <summary>
            The state of guam
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Hawaii">
            <summary>
            The state of hawaii
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Idaho">
            <summary>
            The state of idaho
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Illinois">
            <summary>
            The state of illinois
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Indiana">
            <summary>
            The state of indiana
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Iowa">
            <summary>
            The state of iowa
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Kansas">
            <summary>
            The state of kansas
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Kentucky">
            <summary>
            The state of kentucky
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Louisiana">
            <summary>
            The state of louisiana
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Maine">
            <summary>
            The state of maine
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.MarshallIslands">
            <summary>
            The state of marshall islands
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Maryland">
            <summary>
            The state of maryland
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Massachusetts">
            <summary>
            The state of massachusetts
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Michigan">
            <summary>
            The state of michigan
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Minnesota">
            <summary>
            The state of minnesota
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Mississippi">
            <summary>
            The state of mississippi
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Missouri">
            <summary>
            The state of missouri
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Montana">
            <summary>
            The state of montana
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Nebraska">
            <summary>
            The state of nebraska
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Nevada">
            <summary>
            The state of nevada
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.NewHampshire">
            <summary>
            The state of new hampshire
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.NewJersey">
            <summary>
            The state of new jersey
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.NewMexico">
            <summary>
            The state of new mexico
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.NewYork">
            <summary>
            The state of new york
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.NorthCarolina">
            <summary>
            The state of north carolina
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.NorthDakota">
            <summary>
            The state of north dakota
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.NorthernMarianaIslands">
            <summary>
            The state of northern mariana islands
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Ohio">
            <summary>
            The state of ohio
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Oklahoma">
            <summary>
            The state of oklahoma
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Oregon">
            <summary>
            The state of oregon
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Palau">
            <summary>
            The state of palau
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Pennsylvania">
            <summary>
            The state of pennsylvania
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.PuertoRico">
            <summary>
            The state of puerto rico
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.RhodeIsland">
            <summary>
            The state of rhode island
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.SouthCarolina">
            <summary>
            The state of south carolina
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.SouthDakota">
            <summary>
            The state of south dakota
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Tennessee">
            <summary>
            The state of tennessee
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Texas">
            <summary>
            The state of texas
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Utah">
            <summary>
            The state of utah
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Vermont">
            <summary>
            The state of vermont
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.VirginIslands">
            <summary>
            The state of virgin islands
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Virginia">
            <summary>
            The state of virginia
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Washington">
            <summary>
            The state of washington
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.WashingtonDC">
            <summary>
            The state of washington dc
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.WestVirginia">
            <summary>
            The state of west virginia
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Wisconsin">
            <summary>
            The state of wisconsin
            </summary>
        </member>
        <member name="F:MyWebGrocer.State.Wyoming">
            <summary>
            The state of wyoming
            </summary>
        </member>
        <member name="M:MyWebGrocer.State.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.State"/> class.
            </summary>
            <param name="abbreviation">The abbreviation.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:MyWebGrocer.State.GetStates">
            <summary>
            Gets the list of states in the US.
            </summary>
            <returns>List of states</returns>
        </member>
        <member name="M:MyWebGrocer.State.Parse(System.String)">
            <summary>
            Attempts to find a state matching the given value.  Throws an exception if a State cannot be found.
            </summary>
            <param name="value">The value.</param>
            <returns>A state matching the value</returns>
            <exception cref="T:System.ArgumentException">The provided value cannot be parsed into a State</exception>
            <exception cref="T:System.ArgumentException">Throws an ArgumentException if a State cannot be found</exception>
        </member>
        <member name="M:MyWebGrocer.State.TryParse(System.String,MyWebGrocer.State@)">
            <summary>
            Attempts to find a state matching the given value, and returns a true/false to indicate success.
            </summary>
            <param name="value">The value.</param>
            <param name="result">The result.</param>
            <returns>True if the value was successfully parsed (and the result paramter set), or False if the value could not be parsed (and the result parameter is null)</returns>
        </member>
        <member name="M:MyWebGrocer.State.op_Equality(MyWebGrocer.State,MyWebGrocer.State)">
            <summary>
            Implements the ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.State.op_Inequality(MyWebGrocer.State,MyWebGrocer.State)">
            <summary>
            Implements the !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.State.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.State.Equals(MyWebGrocer.State)">
            <summary>
            Equals the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.State.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.State.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:MyWebGrocer.State.StateAbbreviation">
            <summary>
            Gets the state abbreviation.
            </summary>
            <value>The state abbreviation.</value>
        </member>
        <member name="P:MyWebGrocer.State.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:MyWebGrocer.Threading.ExponentialBackOffExecutor">
            <summary>
            Class ExponentialBackOffExecutor.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Threading.IExecutor">
            <summary>
            Interface IExecutor
            </summary>
        </member>
        <member name="M:MyWebGrocer.Threading.IExecutor.Execute``1(System.Func{``0},System.Byte,System.Action{System.Byte,System.Exception})">
            <summary>
            Execute a function/delegate/lamda expression with retries
            </summary>
            <typeparam name="T">return type of the function</typeparam>
            <param name="functionToExecute">method to get the value for return</param>
            <param name="maxAttempt">max number of retries</param>
            <param name="onAttemptFail">what to do handle on attempt fail</param>
            <returns>Value from a successful functionToExecute call</returns>
        </member>
        <member name="M:MyWebGrocer.Threading.IExecutor.Execute(System.Action,System.Byte,System.Action{System.Byte,System.Exception})">
            <summary>
            Execute a action/delegate/lamda expression with retries
            </summary>
            <param name="actionToExecute">what to execute</param>
            <param name="maxAttempt">max number of retries</param>
            <param name="onAttemptFail">what to do handle on attempt fail</param>
        </member>
        <member name="M:MyWebGrocer.Threading.ExponentialBackOffExecutor.#ctor(System.Int32)">
            <summary>
            Exponential back off with growth rate of e = 2.71828
            Wait time on attemp i failed is initialBackOff*exp(i-1), i starts from 1
            </summary>
            <param name="initialBackOff">initial backoff in millisec</param>
        </member>
        <member name="M:MyWebGrocer.Threading.ExponentialBackOffExecutor.#ctor(System.Int32,System.Decimal)">
            <summary>
            Exponential backoff. Wait time on attemp i failed is initialBackOff*backOffGrowthRate^(i-1), i starts from 1
            </summary>
            <param name="initialBackOff">initial backoff in millisec</param>
            <param name="backOffGrowthRate">the rate at which wait time multiplies for subsequent attempts</param>
        </member>
        <member name="M:MyWebGrocer.Threading.ExponentialBackOffExecutor.Execute``1(System.Func{``0},System.Byte,System.Action{System.Byte,System.Exception})">
            <summary>
            Execute a function/delegate/lamda expression with retries
            </summary>
            <typeparam name="T">return type of the function</typeparam>
            <param name="functionToExecute">method to get the value for return</param>
            <param name="maxAttempt">max number of retries</param>
            <param name="onAttemptFail">what to do handle on attempt fail</param>
            <returns>Value from a successful functionToExecute call, exception will be re-thrown if all attempts failed</returns>
        </member>
        <member name="M:MyWebGrocer.Threading.ExponentialBackOffExecutor.Execute(System.Action,System.Byte,System.Action{System.Byte,System.Exception})">
            <summary>
            Execute a action/delegate/lamda expression with retries
            </summary>
            <param name="actionToExecute">what to execute</param>
            <param name="maxAttempt">max number of retries</param>
            <param name="onAttemptFail">what to do handle on attempt fail</param>
        </member>
        <member name="T:MyWebGrocer.Threading.ISynchronizable">
            <summary>
            For thread-safe synchronized operations in a concurrent environment
            </summary>
        </member>
        <member name="M:MyWebGrocer.Threading.ISynchronizable.GetLockObject">
            <summary>
            get an object to lock on
            </summary>
            <returns>an object unique to the key</returns>
        </member>
        <member name="T:MyWebGrocer.Threading.ConstantWaitExecutor">
            <summary>
            Class ConstantWaitExecutor.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Threading.ConstantWaitExecutor.#ctor(System.Int32)">
            <summary>
            Pause for a constant time before next retry
            </summary>
            <param name="waitTimeBeforeRetry">millisec to wait for before retry, zero for no waiting</param>
        </member>
        <member name="M:MyWebGrocer.Threading.ConstantWaitExecutor.Execute``1(System.Func{``0},System.Byte,System.Action{System.Byte,System.Exception})">
            <summary>
            Execute a function/delegate/lamda expression with retries
            </summary>
            <typeparam name="T">return type of the function</typeparam>
            <param name="functionToExecute">method to get the value for return</param>
            <param name="maxAttempt">max number of retries</param>
            <param name="onAttemptFail">what to do handle on attempt fail</param>
            <returns>Value from a successful functionToExecute call</returns>
        </member>
        <member name="M:MyWebGrocer.Threading.ConstantWaitExecutor.Execute(System.Action,System.Byte,System.Action{System.Byte,System.Exception})">
            <summary>
            Execute a action/delegate/lamda expression with retries
            </summary>
            <param name="actionToExecute">what to execute</param>
            <param name="maxAttempt">max number of retries</param>
            <param name="onAttemptFail">what to do handle on attempt fail</param>
        </member>
        <member name="T:MyWebGrocer.Threading.SynchronizableObject">
            <summary>
            For purpose of synchronized operations among concurrent threads based on the object key.
            Don't use this if your keys are unique enough among objects of the same class such that 
            chance of key collision is low. For that scenario, it's discouraged to implement SynchronizableObject, 
            b/c maintaning large number of locks in the dictionary can affect the performance,
            with little benefit gained since chance of key collision is already fairly low. 
            </summary>
        </member>
        <member name="M:MyWebGrocer.Threading.SynchronizableObject.GetLockObject">
            <summary>
            get an object to lock on (different SynchronizableObject with the same key will resolve to the same lock object)
            so that different threads can operate synchronously when their SynchronizableObject have the same key
            </summary>
            <returns>an object unique to the key</returns>
        </member>
        <member name="P:MyWebGrocer.Threading.SynchronizableObject.ConcurrentLocks">
            <summary>
            implement this to return a static dictionary of concurrent locks for your own class
            </summary>
            <remarks>ConcurrentDictionary is available in .Net4.0</remarks>
        </member>
        <member name="P:MyWebGrocer.Threading.SynchronizableObject.ObjectKey">
            <summary>
            implement this to return the key of your SynchronizableObject
            e.g. return the object.GetHashCode() override. 
            No need to scope by type, b/c the ConcurrentLocks dictionary is already specific to the class
            </summary>
        </member>
        <member name="T:MyWebGrocer.UnitPriceExtensions">
            <summary>
            Class UnitPriceExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitPriceExtensions.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,MyWebGrocer.UnitPrice})">
            <summary>
            Computes the sum of <see cref="T:MyWebGrocer.Price"/>s.
            </summary>
            <typeparam name="TSource">The type of the t source.</typeparam>
            <param name="source">The list of prices to sum.</param>
            <param name="selector">Selection method</param>
            <returns>The sumation of the prices.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="M:MyWebGrocer.UnitPriceExtensions.Sum(System.Collections.Generic.IEnumerable{MyWebGrocer.UnitPrice})">
            <summary>
            Computes the sum of <see cref="T:MyWebGrocer.Price"/>s.
            </summary>
            <param name="source">The list of prices to sum.</param>
            <returns>The sumation of the prices.</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/>
            is <see langword="null"/>.</exception>
        </member>
        <member name="M:MyWebGrocer.UnitPriceExtensions.PerPound(System.Double)">
            <summary>
            Pers the pound.
            </summary>
            <param name="price">The price.</param>
            <returns>UnitPrice.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPriceExtensions.Each(System.Double)">
            <summary>
            Eaches the specified price.
            </summary>
            <param name="price">The price.</param>
            <returns>UnitPrice.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPriceExtensions.For(System.Int32,System.Double)">
            <summary>
            For the specified number.
            </summary>
            <param name="number">The number.</param>
            <param name="price">The price.</param>
            <returns>UnitPrice.</returns>
        </member>
        <member name="T:MyWebGrocer.DateTimeExtensions">
            <summary>
            Class DateTimeExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.Years(System.Int32)">
            <summary>
            Years.
            </summary>
            <param name="number">Years</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.Months(System.Int32)">
            <summary>
            Months.
            </summary>
            <param name="number">Months</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.Weeks(System.Int32)">
            <summary>
            Weeks.
            </summary>
            <param name="number">Weeks</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.Days(System.Int32)">
            <summary>
            Days
            </summary>
            <param name="number">Number of days.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.Hours(System.Int32)">
            <summary>
            Hours.
            </summary>
            <param name="number">hours</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.Minutes(System.Int32)">
            <summary>
            Minutes
            </summary>
            <param name="number">Minutes.</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.Seconds(System.Int32)">
            <summary>
            Seconds
            </summary>
            <param name="number">Seconds</param>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.Ago(System.TimeSpan)">
            <summary>
            Ago the specified time span.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.FromNow(System.TimeSpan)">
            <summary>
            From the now.
            </summary>
            <param name="timeSpan">The time span.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.FromToday(System.TimeSpan)">
            <summary>
            From the today.
            </summary>
            <param name="timespan">The timespan.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:MyWebGrocer.DateTimeExtensions.From(System.TimeSpan,System.DateTime)">
            <summary>
            From the specified time span.
            </summary>
            <param name="timeSpan">The time span.</param>
            <param name="theDate">From.</param>
            <returns>DateTime.</returns>
        </member>
        <member name="T:MyWebGrocer.Duration">
            <summary>
            Struct Duration
            </summary>
        </member>
        <member name="M:MyWebGrocer.Duration.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Duration"/> struct.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="M:MyWebGrocer.Duration.#ctor(System.Int32,MyWebGrocer.UnitOfTime)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Duration"/> struct.
            </summary>
            <param name="length">The length.</param>
            <param name="unitOfTime">The unit of time.</param>
        </member>
        <member name="M:MyWebGrocer.Duration.op_Equality(MyWebGrocer.Duration,MyWebGrocer.Duration)">
            <summary>
            Implements the ==.
            </summary>
            <param name="firstDuration">First duration</param>
            <param name="secondDuration">Second duration</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Duration.op_Inequality(MyWebGrocer.Duration,MyWebGrocer.Duration)">
            <summary>
            Implements the !=.
            </summary>
            <param name="firstDuration">First duration</param>
            <param name="secondDuration">Second duration</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Duration.op_LessThan(MyWebGrocer.Duration,MyWebGrocer.Duration)">
            <summary>
            Implements the &lt;.
            </summary>
            <param name="firstDuration">First duration</param>
            <param name="secondDuration">Second duration</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MyWebGrocer.Duration.op_GreaterThan(MyWebGrocer.Duration,MyWebGrocer.Duration)">
            <summary>
            Implements the &gt;.
            </summary>
            <param name="firstDuration">First duration</param>
            <param name="secondDuration">Second duration</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MyWebGrocer.Duration.op_LessThanOrEqual(MyWebGrocer.Duration,MyWebGrocer.Duration)">
            <summary>
            Implements the &lt;=.
            </summary>
            <param name="firstDuration">First duration</param>
            <param name="secondDuration">Second duration</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MyWebGrocer.Duration.op_GreaterThanOrEqual(MyWebGrocer.Duration,MyWebGrocer.Duration)">
            <summary>
            Implements the &gt;=.
            </summary>
            <param name="firstDuration">First duration</param>
            <param name="secondDuration">Second duration</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MyWebGrocer.Duration.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Duration.Equals(MyWebGrocer.Duration)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Duration.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="P:MyWebGrocer.Duration.Length">
            <summary>
            Gets the length.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:MyWebGrocer.Duration.UnitOfTime">
            <summary>
            Gets the unit of time.
            </summary>
            <value>The unit of time.</value>
        </member>
        <member name="T:MyWebGrocer.IUnitOfMeasure">
            <summary>
            Interface IUnitOfMeasure
            </summary>
        </member>
        <member name="M:MyWebGrocer.IUnitOfMeasure.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:MyWebGrocer.IUnitOfMeasure.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.IUnitOfMeasure.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.MetaData">
            <summary>
            Provides a list of name/value pairs with a ToString() overload that emits Xml.
            <remarks>
            Any object can be the value of the name/value pair, including another MetaData instance.
            This allows you to nest MetaData tags inside of others.
            </remarks><example>
            var inner = new MetaData();
            inner["Session"] = sessionID;
            inner["Product"] = productID;
            var eventMetaData = new MetaData();
            eventMetaData["Event"] = inner;
            Console.Writeline(eventMetaData.ToString()); // <Event><Session>1234</Session><Product>5678</Product></Event></example>
            </summary>
        </member>
        <member name="F:MyWebGrocer.MetaData._inner">
            <summary>
            The inner dictionary
            </summary>
        </member>
        <member name="M:MyWebGrocer.MetaData.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.MetaData"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:MyWebGrocer.MetaData.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.MetaData"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.MetaData.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.MetaData"/> class.
            </summary>
            <param name="keyValuePairs">The key value pairs.</param>
        </member>
        <member name="M:MyWebGrocer.MetaData.ToString">
            <summary>
            Formats the contents of the Dictionary object as Xml
            </summary>
            <returns>A string containing the xml metadata.</returns>
        </member>
        <member name="M:MyWebGrocer.MetaData.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MyWebGrocer.MetaData.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MyWebGrocer.MetaData.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:MyWebGrocer.MetaData.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:MyWebGrocer.MetaData.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.MetaData.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:MyWebGrocer.MetaData.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
        </member>
        <member name="M:MyWebGrocer.MetaData.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.MetaData.Add(System.String,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
        </member>
        <member name="M:MyWebGrocer.MetaData.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
        </member>
        <member name="M:MyWebGrocer.MetaData.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:MyWebGrocer.MetaData.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:MyWebGrocer.MetaData.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <value><c>true</c> if this instance is read only; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MyWebGrocer.MetaData.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:MyWebGrocer.MetaData.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:MyWebGrocer.MetaData.Item(System.String)">
            <summary>
            Automatically adds the key if it isn't already present in the Dictionary
            </summary>
            <param name="key">The key.</param>
            <returns>Gets the item with the specified key.</returns>
        </member>
        <member name="T:MyWebGrocer.Money">
            <summary>
            Struct Money
            </summary>
        </member>
        <member name="F:MyWebGrocer.Money._amount">
            <summary>
            The _amount
            </summary>
        </member>
        <member name="M:MyWebGrocer.Money.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Money"/> struct.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:MyWebGrocer.Money.op_Implicit(System.Decimal)~MyWebGrocer.Money">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:MyWebGrocer.Money"/>.
            </summary>
            <param name="amount">The amount.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_Explicit(MyWebGrocer.Money)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:MyWebGrocer.Money"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="money">The money.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_Explicit(System.Double)~MyWebGrocer.Money">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Double"/> to <see cref="T:MyWebGrocer.Money"/>.
            </summary>
            <param name="amount">The amount.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_Equality(MyWebGrocer.Money,MyWebGrocer.Money)">
            <summary>
            Implements the ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_Inequality(MyWebGrocer.Money,MyWebGrocer.Money)">
            <summary>
            Implements the !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_LessThan(MyWebGrocer.Money,MyWebGrocer.Money)">
            <summary>
            Implements the &lt;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_LessThanOrEqual(MyWebGrocer.Money,MyWebGrocer.Money)">
            <summary>
            Implements the &lt;=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_GreaterThan(MyWebGrocer.Money,MyWebGrocer.Money)">
            <summary>
            Implements the &gt;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_GreaterThanOrEqual(MyWebGrocer.Money,MyWebGrocer.Money)">
            <summary>
            Implements the &gt;=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_Multiply(MyWebGrocer.Money,System.Decimal)">
            <summary>
            Implements the *.
            </summary>
            <param name="money">The money.</param>
            <param name="quantity">The quantity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_Division(MyWebGrocer.Money,System.Decimal)">
            <summary>
            Implements the /.
            </summary>
            <param name="money">The money.</param>
            <param name="quantity">The quantity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_Addition(MyWebGrocer.Money,MyWebGrocer.Money)">
            <summary>
            Implements the +.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.op_Subtraction(MyWebGrocer.Money,MyWebGrocer.Money)">
            <summary>
            Implements the -.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode" /> for this instance.
            </summary>
            <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Boolean value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Unicode character equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.Equals(MyWebGrocer.Money)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.CompareTo(MyWebGrocer.Money)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.</returns>
        </member>
        <member name="M:MyWebGrocer.Money.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:MyWebGrocer.Paging`1">
            <summary>
            Provides paging functionality
            </summary>
            <typeparam name="T">Type of IEnumerable to page</typeparam>
        </member>
        <member name="M:MyWebGrocer.Paging`1.GetPageFor(System.Collections.Generic.IEnumerable{`0},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Gets the page of T
            </summary>
            <param name="items">The items.</param>
            <param name="page">The page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>IList&lt;T&gt;.</returns>
        </member>
        <member name="T:MyWebGrocer.Price">
            <summary>
            Struct Price
            </summary>
        </member>
        <member name="M:MyWebGrocer.Price.#ctor(MyWebGrocer.Money)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Price"/> struct.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:MyWebGrocer.Price.#ctor(MyWebGrocer.Price)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Price"/> struct.
            </summary>
            <param name="price">The price.</param>
        </member>
        <member name="M:MyWebGrocer.Price.op_Implicit(MyWebGrocer.Money)~MyWebGrocer.Price">
            <summary>
            Performs an implicit conversion from <see cref="T:MyWebGrocer.Money"/> to <see cref="T:MyWebGrocer.Price"/>.
            </summary>
            <param name="amount">The amount.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_Implicit(System.Decimal)~MyWebGrocer.Price">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:MyWebGrocer.Price"/>.
            </summary>
            <param name="amount">The amount.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_Explicit(System.Double)~MyWebGrocer.Price">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Double"/> to <see cref="T:MyWebGrocer.Price"/>.
            </summary>
            <param name="amount">The amount.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_Multiply(MyWebGrocer.Price,System.Decimal)">
            <summary>
            Implements the *.
            </summary>
            <param name="price">The price.</param>
            <param name="quantity">The quantity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_Multiply(System.Decimal,MyWebGrocer.Price)">
            <summary>
            Implements the *.
            </summary>
            <param name="quantity">The quantity.</param>
            <param name="price">The price.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_Division(MyWebGrocer.Price,System.Decimal)">
            <summary>
            Implements the /.
            </summary>
            <param name="price">The price.</param>
            <param name="quantity">The quantity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_Addition(MyWebGrocer.Price,MyWebGrocer.Price)">
            <summary>
            Implements the +.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_Subtraction(MyWebGrocer.Price,MyWebGrocer.Price)">
            <summary>
            Implements the -.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_Equality(MyWebGrocer.Price,MyWebGrocer.Price)">
            <summary>
            Implements the ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_Inequality(MyWebGrocer.Price,MyWebGrocer.Price)">
            <summary>
            Implements the !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_LessThan(MyWebGrocer.Price,MyWebGrocer.Price)">
            <summary>
            Implements the &lt;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_LessThanOrEqual(MyWebGrocer.Price,MyWebGrocer.Price)">
            <summary>
            Implements the &lt;=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_GreaterThan(MyWebGrocer.Price,MyWebGrocer.Price)">
            <summary>
            Implements the &gt;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.op_GreaterThanOrEqual(MyWebGrocer.Price,MyWebGrocer.Price)">
            <summary>
            Implements the &gt;=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.Equals(MyWebGrocer.Price)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode" /> for this instance.
            </summary>
            <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Boolean value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Unicode character equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToDecimal">
            <summary>
            To the decimal.
            </summary>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.CompareTo(MyWebGrocer.Price)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.</returns>
        </member>
        <member name="M:MyWebGrocer.Price.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="T:MyWebGrocer.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.Address1">
            <summary>
              Looks up a localized string similar to Address 1.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.Address1IsRequired">
            <summary>
              Looks up a localized string similar to Address 1 is required..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.Address2">
            <summary>
              Looks up a localized string similar to Address 2.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.Address3">
            <summary>
              Looks up a localized string similar to Address 3.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.AUS">
            <summary>
              Looks up a localized string similar to Australia.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.CAN">
            <summary>
              Looks up a localized string similar to Canada.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.City">
            <summary>
              Looks up a localized string similar to City.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.CityIsRequired">
            <summary>
              Looks up a localized string similar to City is required..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.Country">
            <summary>
              Looks up a localized string similar to Country.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.CountryIsRequired">
            <summary>
              Looks up a localized string similar to Country is required..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.CriteriaPageNumberInvalid">
            <summary>
              Looks up a localized string similar to Page number must be positive..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.CriteriaPageSizeInvalid">
            <summary>
              Looks up a localized string similar to Page size must be between 1 and 100..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.DEU">
            <summary>
              Looks up a localized string similar to Germany.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.DurationCompareDifferentUoT">
            <summary>
              Looks up a localized string similar to Cannot compare Durations with different Unit of Times..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.FRA">
            <summary>
              Looks up a localized string similar to France.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.FulfillmentDelivery">
            <summary>
              Looks up a localized string similar to Delivery.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.FulfillmentDownload">
            <summary>
              Looks up a localized string similar to Download.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.FulfillmentPickup">
            <summary>
              Looks up a localized string similar to Pickup.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.FulfillmentShipping">
            <summary>
              Looks up a localized string similar to Shipping.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.FulfillmentSpecialArrangements">
            <summary>
              Looks up a localized string similar to Special Arrangements.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.FulfillmentUnknown">
            <summary>
              Looks up a localized string similar to Unknown.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.GBR">
            <summary>
              Looks up a localized string similar to United Kingdom.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.InvalidClassForAttribute">
            <summary>
              Looks up a localized string similar to The attribute {0} can only be applied to {1}, but was applied to {2}..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.InvalidZipCodeFormat">
            <summary>
              Looks up a localized string similar to Invalid Zip Code format..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.LoggingSessionInfoBaseNoReqest">
            <summary>
              Looks up a localized string similar to The current HttpRequest is not available for logging..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.MustBeEnumerable">
            <summary>
              Looks up a localized string similar to {0} must implement IEnumerable&lt;{1}&gt;..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.NZL">
            <summary>
              Looks up a localized string similar to New Zealand.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ReflectorGetFieldInfoFieldNotFound">
            <summary>
              Looks up a localized string similar to Could not find field named {0}..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ReflectorGetFieldInfoFieldNotTypeOfV">
            <summary>
              Looks up a localized string similar to The field {0} which should be of type {1} was defined as type {2}..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ReflectorGetPropertyInfoExpressionNotAProperty">
            <summary>
              Looks up a localized string similar to The expression {0} does not refer to a property..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ReflectorGetPropertyInfoExpressionNotLamba">
            <summary>
              Looks up a localized string similar to The expression {0} is not a lamba expression..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ReflectorPropertyTypeDoesNotMatchValueToSet">
            <summary>
              Looks up a localized string similar to The type of the value ({1}) does not match the type of the property ({0})..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ReflectorPropertyTypeNotDeclaredOnT">
            <summary>
              Looks up a localized string similar to Property {0} is declare on {1}, but target is of type {2}.  Did you mean SetPropertyValue&lt;Parent&gt;( target.Child, x =&gt; x.Property, value) instead of SetPropertyValue&lt;Parent&gt;( target, x =&gt; x.Child.Property, value)?.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ReflectorSetIdValueIdNotFound">
            <summary>
              Looks up a localized string similar to Target object does not have Id property defined as System.Int32..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.State">
            <summary>
              Looks up a localized string similar to State.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.StateIsRequired">
            <summary>
              Looks up a localized string similar to State is required..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.StoreEmailInvalid">
            <summary>
              Looks up a localized string similar to Store email is invalid..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.UnitOfTimeDays">
            <summary>
              Looks up a localized string similar to days.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.UnitOfTimeHours">
            <summary>
              Looks up a localized string similar to hours.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.UnitPriceAddDifferentUoMs">
            <summary>
              Looks up a localized string similar to Cannot add UnitPrices when they have differing UnitOfMeasures..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.USA">
            <summary>
              Looks up a localized string similar to United States Of America.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ZipCode">
            <summary>
              Looks up a localized string similar to Zip.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Properties.Resources.ZipCodeIsRequired">
            <summary>
              Looks up a localized string similar to Zip Code is required..
            </summary>
        </member>
        <member name="T:MyWebGrocer.Quantity">
            <summary>
            Struct Quantity
            </summary>
        </member>
        <member name="M:MyWebGrocer.Quantity.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Quantity"/> struct.
            </summary>
            <param name="quantity">The quantity.</param>
        </member>
        <member name="M:MyWebGrocer.Quantity.#ctor(System.Decimal,MyWebGrocer.UnitOfMeasure)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Quantity"/> struct.
            </summary>
            <param name="quantity">The quantity.</param>
            <param name="unitOfMeasure">The unitOfMeasure.</param>
        </member>
        <member name="M:MyWebGrocer.Quantity.#ctor(System.Decimal,MyWebGrocer.IMeasurable)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Quantity"/> struct.
            </summary>
            <param name="quantity">The quantity.</param>
            <param name="of"><see cref="T:MyWebGrocer.IMeasurable"/></param>
            <exception cref="T:System.ArgumentOutOfRangeException"/>
        </member>
        <member name="M:MyWebGrocer.Quantity.#ctor(System.Decimal,MyWebGrocer.UnitOfMeasure,System.Decimal,MyWebGrocer.Collections.Generic.Range{System.Decimal})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Quantity"/> struct.
            </summary>
            <param name="quantity">The quantity.</param>
            <param name="unitOfMeasure">The unitOfMeasure.</param>
            <param name="increment">The increment.</param>
            <param name="range">The range.</param>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Implicit(System.Decimal)~MyWebGrocer.Quantity">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:MyWebGrocer.Quantity"/>.
            </summary>
            <param name="quantity">The quantity.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Implicit(MyWebGrocer.Quantity)~System.Decimal">
            <summary>
            Performs an implicit conversion from <see cref="T:MyWebGrocer.Quantity"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="quantity">The quantity.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Addition(MyWebGrocer.Quantity,MyWebGrocer.Quantity)">
            <summary>
            Implements the +.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:MyWebGrocer.Quantity.ConvertquantityTo(MyWebGrocer.Quantity,MyWebGrocer.UnitOfMeasure)">
            <summary>
            Converts the quantity to.
            </summary>
            <param name="quantity">The quantity.</param>
            <param name="unitOfMeasure">The unitOfMeasure.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.NotSupportedException">Quantity cannot be converted.</exception>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Increment(MyWebGrocer.Quantity)">
            <summary>
            Implements the ++.
            </summary>
            <param name="quantity">The quantity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Subtraction(MyWebGrocer.Quantity,MyWebGrocer.Quantity)">
            <summary>
            Implements the -.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.OverflowException"></exception>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Decrement(MyWebGrocer.Quantity)">
            <summary>
            Implements the --.
            </summary>
            <param name="quantity">The quantity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Multiply(MyWebGrocer.Quantity,MyWebGrocer.Quantity)">
            <summary>
            Implements the *.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Division(MyWebGrocer.Quantity,MyWebGrocer.Quantity)">
            <summary>
            Implements the /.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Equality(MyWebGrocer.Quantity,MyWebGrocer.Quantity)">
            <summary>
            Implements the ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.op_Inequality(MyWebGrocer.Quantity,MyWebGrocer.Quantity)">
            <summary>
            Implements the !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.Equals(MyWebGrocer.Quantity)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.GetTypeCode">
            <summary>
            Returns the <see cref="T:System.TypeCode" /> for this instance.
            </summary>
            <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToBoolean(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Boolean value equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToChar(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A Unicode character equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToSByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToByte(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToUInt16(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToUInt32(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToUInt64(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToSingle(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToDouble(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToDecimal(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToDateTime(System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider"/> interface implementation that supplies culture-specific formatting information.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.
            </summary>
            <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
            <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.CompareTo(MyWebGrocer.Quantity)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This object is equal to <paramref name="other" />. Greater than zero This object is greater than <paramref name="other" />.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="separator">The separator.</param>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.Parse(System.String)">
            <summary>
            Parse out Quantity from text
            </summary>
            <param name="sizeText">text value of quantity, e.g. 12.5 oz, ea/each can be omitted</param>
            <returns>Quantity object representing the size</returns>
            <exception cref="T:MyWebGrocer.InvalidSizeException">Quantity value must be a decimal.</exception>
            <exception cref="T:System.ArgumentException">when unitOfMeasure is not recognized/supported by UnitOfMeasure class</exception>
        </member>
        <member name="M:MyWebGrocer.Quantity.TryParse(System.String,MyWebGrocer.Quantity@)">
            <summary>
            Tries the parse.
            </summary>
            <param name="sizeText">The size text.</param>
            <param name="quantity">The quantity.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Quantity.Normalize(System.String)">
            <summary>
            Normalizes the specified size text, e.g. 1.00 lb to 1 lb
            </summary>
            <param name="sizeText">The size text.</param>
            <returns>normalized size text</returns>
            <remarks>size text will be unchanged if it can not be parsed as <see cref="T:MyWebGrocer.Quantity"/></remarks>
        </member>
        <member name="P:MyWebGrocer.Quantity.Increment">
            <summary>
            Gets or sets the increment.
            </summary>
            <value>The increment.</value>
        </member>
        <member name="P:MyWebGrocer.Quantity.Range">
            <summary>
            Gets the range.
            </summary>
            <value>The range.</value>
        </member>
        <member name="P:MyWebGrocer.Quantity.UnitOfMeasure">
            <summary>
            Gets or sets the unit of measure.
            </summary>
            <value>The unit of measure.</value>
        </member>
        <member name="P:MyWebGrocer.Quantity.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:MyWebGrocer.QuantityExtensions">
            <summary>
            Class QuantityExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.QuantityExtensions.Pounds(System.Double)">
            <summary>
            Pounds the specified quantity.
            </summary>
            <param name="quantity">The quantity.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="M:MyWebGrocer.QuantityExtensions.Ounces(System.Double)">
            <summary>
            Ounces the specified quantity.
            </summary>
            <param name="quantity">The quantity.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="M:MyWebGrocer.QuantityExtensions.Each(System.Int32)">
            <summary>
            Each the specified quantity.
            </summary>
            <param name="quantity">The quantity.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.AndSpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Determines if an existing object satisfies the specification criteria
            </summary>
            <param name="candidate">The object to compare to the specification criteria.</param>
            <returns>true if the specification is satisfied, otherwise false</returns>
        </member>
        <member name="T:MyWebGrocer.Specifications.Not`1">
            <summary>
            Class Not.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Specifications.Not`1.#ctor(MyWebGrocer.Specifications.Specification{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Specifications.Not`1"/> class.
            </summary>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:MyWebGrocer.Specifications.Not`1.IsSatisfiedBy(`0)">
            <summary>
            Determines if an existing object satisfies the specification criteria
            </summary>
            <param name="candidate">The object to compare to the specification criteria.</param>
            <returns>true if the specification is satisfied, otherwise false</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.Not`1.IsSatisfied">
            <summary>
            Returns a Linq Expression Tree for use in querying objects that satisfy the specification criteria.
            </summary>
            <returns>a Linq Expression Tree</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.OrSpecification`1.IsSatisfiedBy(`0)">
            <summary>
            Determines if an existing object satisfies the specification criteria
            </summary>
            <param name="candidate">The object to compare to the specification criteria.</param>
            <returns>true if the specification is satisfied, otherwise false</returns>
        </member>
        <member name="T:MyWebGrocer.Specifications.SpecificationExtensions">
            <summary>
            Class SpecificationExtensions.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Specifications.SpecificationExtensions.And``1(MyWebGrocer.Specifications.Specification{``0},MyWebGrocer.Specifications.Specification{``0})">
            <summary>
            Ands the specified first.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>ChainedSpecification&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.SpecificationExtensions.Or``1(MyWebGrocer.Specifications.Specification{``0},MyWebGrocer.Specifications.Specification{``0})">
            <summary>
            Ors the specified first.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>ChainedSpecification&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.SpecificationExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Composes the specified first.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <param name="merge">The merge.</param>
            <returns>Expression&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.SpecificationExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ands the specified first.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>Expression&lt;Func&lt;T, System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Specifications.SpecificationExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Ors the specified first.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>Expression&lt;Func&lt;T, System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="T:MyWebGrocer.ICountableUnitOfMeasure">
            <summary>
            Interface ICountableUnitOfMeasure
            </summary>
        </member>
        <member name="T:MyWebGrocer.IConvertibleUnitOfMeasure">
            <summary>
            Interface IConvertibleUnitOfMeasure
            </summary>
        </member>
        <member name="M:MyWebGrocer.IConvertibleUnitOfMeasure.IsCompatibleWith(MyWebGrocer.UnitOfMeasure)">
            <summary>
            Determines whether [is compatible with] [the specified other].
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if [is compatible with] [the specified other]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.IConvertibleUnitOfMeasure.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="unitOfMeasureType">Type of the unit of measure.</param>
            <param name="quantity">The quantity.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="T:MyWebGrocer.IWeighedUnitOfMeasure">
            <summary>
            Interface IWeighedUnitOfMeasure
            </summary>
        </member>
        <member name="T:MyWebGrocer.IVolumeUnitOfMeasure">
            <summary>
            Interface IVolumeUnitOfMeasure
            </summary>
        </member>
        <member name="T:MyWebGrocer.IDryVolumeUnitOfMeasure">
            <summary>
            Interface IDryVolumeUnitOfMeasure
            </summary>
        </member>
        <member name="T:MyWebGrocer.IAreaUnitOfMeasure">
            <summary>
            Interface IAreaUnitOfMeasure
            </summary>
        </member>
        <member name="T:MyWebGrocer.IDistanceUnitOfMeasure">
            <summary>
            Interface IDistanceUnitOfMeasure
            </summary>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure">
            <summary>
            Class UnitOfMeasure.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.NFer(System.Int32)">
            <summary>
            ns the fer.
            </summary>
            <param name="n">The n.</param>
            <returns>UnitOfMeasure.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.Per(MyWebGrocer.UnitOfMeasureType)">
            <summary>
            Pers the specified unit of measure type.
            </summary>
            <param name="unitOfMeasureType">Type of the unit of measure.</param>
            <returns>UnitOfMeasure.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.TryParse(System.String,MyWebGrocer.UnitOfMeasure@)">
            <summary>
            Returns a boolean indicator if the parsing of the <paramref name="name" /> to the <paramref name="unitOfMeasure" /> was successful
            </summary>
            <param name="name">Value to be parsed</param>
            <param name="unitOfMeasure">The UnitOfMeasure to be populated if parsing is succesful.</param>
            <returns>Boolean value indicating if parsing succeeded</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.Parse(System.String)">
            <summary>
            Return the unit of measure with the given name.
            </summary>
            <param name="name">The name of a unit of measure</param>
            <returns>The unit of measure.</returns>
            <exception cref="T:System.ArgumentException">name</exception>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.op_Equality(MyWebGrocer.UnitOfMeasure,MyWebGrocer.UnitOfMeasure)">
            <summary>
            Implements the ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.op_Inequality(MyWebGrocer.UnitOfMeasure,MyWebGrocer.UnitOfMeasure)">
            <summary>
            Implements the !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.Equals(MyWebGrocer.UnitOfMeasure)">
            <summary>
            Equals the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Each">
            <summary>
            Gets the each.
            </summary>
            <value>The each.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Pounds">
            <summary>
            Gets the pounds.
            </summary>
            <value>The pounds.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Ounces">
            <summary>
            Gets the ounces.
            </summary>
            <value>The ounces.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Pecks">
            <summary>
            Gets the pecks.
            </summary>
            <value>The pecks.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Bushels">
            <summary>
            Gets the bushels.
            </summary>
            <value>The bushels.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.FluidOunces">
            <summary>
            Gets the fluid ounces.
            </summary>
            <value>The fluid ounces.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.HalfPints">
            <summary>
            Gets the half pints.
            </summary>
            <value>The half pints.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Pints">
            <summary>
            Gets the pints.
            </summary>
            <value>The pints.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Quarts">
            <summary>
            Gets the quarts.
            </summary>
            <value>The quarts.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Gallons">
            <summary>
            Gets the gallons.
            </summary>
            <value>The gallons.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.SquareFeet">
            <summary>
            Gets the square feet.
            </summary>
            <value>The square feet.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MilliGrams">
            <summary>
            mg - milligrams
            </summary>
            <value>The milli grams.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Grams">
            <summary>
            g - grams
            </summary>
            <value>The grams.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.KiloGrams">
            <summary>
            kg - kilograms
            </summary>
            <value>The kilo grams.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.CubicCentimeters">
            <summary>
            cc - cubic centimeters
            </summary>
            <value>The cubic centimeters.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MilliLiters">
            <summary>
            ml - milliliters
            </summary>
            <value>The milli liters.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Liters">
            <summary>
            L - liters
            </summary>
            <value>The liters.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.TwoFer">
            <summary>
            Gets the two fer.
            </summary>
            <value>The two fer.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Miles">
            <summary>
            Gets the miles.
            </summary>
            <value>The miles.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Kilometers">
            <summary>
            Gets the kilometers.
            </summary>
            <value>The kilometers.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Centimeters">
            <summary>
            Gets the centimeters.
            </summary>
            <value>The centimeters.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Meters">
            <summary>
            Gets the meters.
            </summary>
            <value>The meters.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.CountableUnitOfMeasure">
            <summary>
            Unit of Measure that can be counted as 1, 2, 3, ...
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasure.CountableUnitOfMeasure._unitOfMeasureType">
            <summary>
            The _unit of measure type
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.CountableUnitOfMeasure.#ctor(MyWebGrocer.UnitOfMeasureType)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.UnitOfMeasure.CountableUnitOfMeasure"/> class.
            </summary>
            <param name="unitOfMeasureType">Type of the unit of measure.</param>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.CountableUnitOfMeasure.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.CountableUnitOfMeasure.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.EachUoM">
            <summary>
            Class EachUoM.
            </summary>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.EachUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.EachUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.WeighedUoM">
            <summary>
            Class WeighedUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.WeighedUoM.IsCompatibleWith(MyWebGrocer.UnitOfMeasure)">
            <summary>
            Determines whether [is compatible with] [the specified other].
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if [is compatible with] [the specified other]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.WeighedUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.PoundsUoM">
            <summary>
            Class PoundsUoM.
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasure.PoundsUoM.OuncesPerPound">
            <summary>
            The ounces per pound
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.PoundsUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.PoundsUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.PoundsUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.OuncesUoM">
            <summary>
            Class OuncesUoM.
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasure.OuncesUoM.OuncesPerPound">
            <summary>
            The ounces per pound
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.OuncesUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.OuncesUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.OuncesUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.MilliGramsUoM">
            <summary>
            Class MilliGramsUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.MilliGramsUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MilliGramsUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MilliGramsUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.GramsUoM">
            <summary>
            Class GramsUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.GramsUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.GramsUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.GramsUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.KiloGramsUoM">
            <summary>
            Class KiloGramsUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.KiloGramsUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.KiloGramsUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.KiloGramsUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.AreaUoM">
            <summary>
            Class AreaUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.AreaUoM.IsCompatibleWith(MyWebGrocer.UnitOfMeasure)">
            <summary>
            Determines whether [is compatible with] [the specified other].
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if [is compatible with] [the specified other]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.AreaUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.SquareFeetUoM">
            <summary>
            Class SquareFeetUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.SquareFeetUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.SquareFeetUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.SquareFeetUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.DryVolumeUoM">
            <summary>
            Class DryVolumeUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.DryVolumeUoM.IsCompatibleWith(MyWebGrocer.UnitOfMeasure)">
            <summary>
            Determines whether [is compatible with] [the specified other].
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if [is compatible with] [the specified other]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.DryVolumeUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.PecksUoM">
            <summary>
            Class PecksUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.PecksUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.PecksUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.PecksUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.BushelsUoM">
            <summary>
            Class BushelsUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.BushelsUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.BushelsUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.BushelsUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.VolumeUoM">
            <summary>
            Class VolumeUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.VolumeUoM.IsCompatibleWith(MyWebGrocer.UnitOfMeasure)">
            <summary>
            Determines whether [is compatible with] [the specified other].
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if [is compatible with] [the specified other]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.VolumeUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.FluidOuncesUoM">
            <summary>
            Class FluidOuncesUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.FluidOuncesUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.FluidOuncesUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.FluidOuncesUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.HalfPintsUoM">
            <summary>
            Class HalfPintsUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.HalfPintsUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.HalfPintsUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.HalfPintsUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.PintsUoM">
            <summary>
            Class PintsUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.PintsUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.PintsUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.PintsUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.QuartsUoM">
            <summary>
            Class QuartsUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.QuartsUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.QuartsUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.QuartsUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.GallonsUoM">
            <summary>
            Class GallonsUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.GallonsUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.GallonsUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.GallonsUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.CubicCentimetersUoM">
            <summary>
            Class CubicCentimetersUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.CubicCentimetersUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.CubicCentimetersUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.CubicCentimetersUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.MilliLitersUoM">
            <summary>
            Class MilliLitersUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.MilliLitersUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MilliLitersUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MilliLitersUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.LitersUoM">
            <summary>
            Class LitersUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.LitersUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">uomType</exception>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.LitersUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.LitersUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.NferUoM">
            <summary>
            Class NferUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.NferUoM.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.UnitOfMeasure.NferUoM"/> class.
            </summary>
            <param name="quantity">The quantity.</param>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.NferUoM.Quantity">
            <summary>
            Gets the quantity.
            </summary>
            <value>The quantity.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.NferUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.NferUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.DistanceUoM">
            <summary>
            Class DistanceUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.DistanceUoM.IsCompatibleWith(MyWebGrocer.UnitOfMeasure)">
            <summary>
            Determines whether [is compatible with] [the specified other].
            </summary>
            <param name="other">The other.</param>
            <returns><c>true</c> if [is compatible with] [the specified other]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.DistanceUoM.ConvertTo(System.Type,MyWebGrocer.Quantity)">
            <summary>
            Converts to.
            </summary>
            <param name="uomType">Type of the uom.</param>
            <param name="qty">The qty.</param>
            <returns>Quantity.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.DistanceUoM.ConvertToMeters(System.Decimal)">
            <summary>
            Converts to meters.
            </summary>
            <param name="distance">The distance.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.DistanceUoM.ConvertFromMeters(System.Decimal)">
            <summary>
            Converts from meters.
            </summary>
            <param name="meters">The meters.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.MilesUoM">
            <summary>
            Class MilesUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.MilesUoM.ConvertToMeters(System.Decimal)">
            <summary>
            Converts to meters.
            </summary>
            <param name="miles">The miles.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.MilesUoM.ConvertFromMeters(System.Decimal)">
            <summary>
            Converts from meters.
            </summary>
            <param name="meters">The meters.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MilesUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MilesUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.KilometersUoM">
            <summary>
            Class KilometersUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.KilometersUoM.ConvertToMeters(System.Decimal)">
            <summary>
            Converts to meters.
            </summary>
            <param name="kilometers">The kilometers.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.KilometersUoM.ConvertFromMeters(System.Decimal)">
            <summary>
            Converts from meters.
            </summary>
            <param name="meters">The meters.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.KilometersUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.KilometersUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.CentimetersUoM">
            <summary>
            Class CentimetersUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.CentimetersUoM.ConvertToMeters(System.Decimal)">
            <summary>
            Converts to meters.
            </summary>
            <param name="centimeters">The centimeters.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.CentimetersUoM.ConvertFromMeters(System.Decimal)">
            <summary>
            Converts from meters.
            </summary>
            <param name="meters">The meters.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.CentimetersUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.CentimetersUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasure.MetersUoM">
            <summary>
            Class MetersUoM.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.MetersUoM.ConvertToMeters(System.Decimal)">
            <summary>
            Converts to meters.
            </summary>
            <param name="meters">The meters.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitOfMeasure.MetersUoM.ConvertFromMeters(System.Decimal)">
            <summary>
            Converts from meters.
            </summary>
            <param name="meters">The meters.</param>
            <returns>System.Decimal.</returns>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MetersUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfMeasure.MetersUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfMeasureType">
            <summary>
            Enumerated type representing Unit of Measure.  It's important not to change the numeric values
            of these enumerations because they are persisted as integers by our NHibernate mapping.
            (See MyWebGrocer.Repository.UserType.UnitOf.)
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Each">
            <summary>
            The each
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Pounds">
            <summary>
            The pounds
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Ounces">
            <summary>
            The ounces
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Nfer">
            <summary>
            The nfer
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Days">
            <summary>
            The days
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Package">
            <summary>
            The package
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Bunch">
            <summary>
            The bunch
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Loaf">
            <summary>
            The loaf
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Head">
            <summary>
            The head
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Count">
            <summary>
            The count
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Dozen">
            <summary>
            The dozen
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Pack">
            <summary>
            The pack
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Pecks">
            <summary>
            The pecks
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Bushels">
            <summary>
            The bushels
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.FluidOunces">
            <summary>
            The fluid ounces
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Pints">
            <summary>
            The pints
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Quarts">
            <summary>
            The quarts
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Gallons">
            <summary>
            The gallons
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.HalfPints">
            <summary>
            The half pints
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.SquareFeet">
            <summary>
            The square feet
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Grams">
            <summary>
            The grams
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.KiloGrams">
            <summary>
            The kilo grams
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.CubicCentimeters">
            <summary>
            The cubic centimeters
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.MilliLiters">
            <summary>
            The milli liters
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Liters">
            <summary>
            The liters
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Case">
            <summary>
            The case
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.CasesPerTier">
            <summary>
            The cases per tier
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Platter">
            <summary>
            The platter
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Pie">
            <summary>
            The pie
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Pair">
            <summary>
            The pair
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Flat">
            <summary>
            The flat
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Carton">
            <summary>
            The carton
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Slice">
            <summary>
            The slice
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Cake">
            <summary>
            The cake
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Kit">
            <summary>
            The kit
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Bouquet">
            <summary>
            The bouquet
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Roll">
            <summary>
            The roll
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Hours">
            <summary>
            The hours
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.MilliGrams">
            <summary>
            The milli grams
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Miles">
            <summary>
            The miles
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Kilometers">
            <summary>
            The kilometers
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Meters">
            <summary>
            The meters
            </summary>
        </member>
        <member name="F:MyWebGrocer.UnitOfMeasureType.Centimeters">
            <summary>
            The centimeters
            </summary>
        </member>
        <member name="T:MyWebGrocer.UnitOfTime">
            <summary>
            Class UnitOfTime.
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitOfTime.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:MyWebGrocer.UnitOfTime.Days">
            <summary>
            Gets the days.
            </summary>
            <value>The days.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfTime.Hours">
            <summary>
            Gets the hours.
            </summary>
            <value>The hours.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfTime.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfTime.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfTime.DaysUoM">
            <summary>
            Class DaysUoM.
            </summary>
        </member>
        <member name="P:MyWebGrocer.UnitOfTime.DaysUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfTime.DaysUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitOfTime.HoursUoM">
            <summary>
            Class HoursUoM.
            </summary>
        </member>
        <member name="P:MyWebGrocer.UnitOfTime.HoursUoM.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:MyWebGrocer.UnitOfTime.HoursUoM.Type">
            <summary>
            Gets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:MyWebGrocer.UnitPrice">
            <summary>
            Struct UnitPrice
            </summary>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.#ctor(MyWebGrocer.Price)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.UnitPrice"/> struct.
            </summary>
            <param name="price">The price.</param>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.#ctor(MyWebGrocer.Price,MyWebGrocer.UnitOfMeasure)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.UnitPrice"/> struct.
            </summary>
            <param name="price">The price.</param>
            <param name="unitOfMeasure">The unit of measure.</param>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_Implicit(MyWebGrocer.UnitPrice)~MyWebGrocer.Price">
            <summary>
            Performs an implicit conversion from <see cref="T:MyWebGrocer.UnitPrice"/> to <see cref="P:MyWebGrocer.UnitPrice.Price"/>.
            </summary>
            <param name="unitPrice">The unit price.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_Multiply(MyWebGrocer.UnitPrice,MyWebGrocer.Quantity)">
            <summary>
            Implements the *.
            </summary>
            <param name="unitPrice">The unit price.</param>
            <param name="quantity">The quantity.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_Multiply(MyWebGrocer.Quantity,MyWebGrocer.UnitPrice)">
            <summary>
            Implements the *.
            </summary>
            <param name="quantity">The quantity.</param>
            <param name="unitPrice">The unit price.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_Addition(MyWebGrocer.UnitPrice,MyWebGrocer.UnitPrice)">
            <summary>
            Implements the +.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_GreaterThan(MyWebGrocer.UnitPrice,MyWebGrocer.UnitPrice)">
            <summary>
            Implements the &gt;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.NotSupportedException">Cannot compare unit prices with different units of measure</exception>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_GreaterThanOrEqual(MyWebGrocer.UnitPrice,MyWebGrocer.UnitPrice)">
            <summary>
            Implements the &gt;=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.NotSupportedException">Cannot compare unit prices with different units of measure</exception>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_LessThan(MyWebGrocer.UnitPrice,MyWebGrocer.UnitPrice)">
            <summary>
            Implements the &lt;.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.NotSupportedException">Cannot compare unit prices with different units of measure</exception>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_LessThanOrEqual(MyWebGrocer.UnitPrice,MyWebGrocer.UnitPrice)">
            <summary>
            Implements the &lt;=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.NotSupportedException">Cannot compare unit prices with different units of measure</exception>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_Equality(MyWebGrocer.UnitPrice,MyWebGrocer.UnitPrice)">
            <summary>
            Implements the ==.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.NotSupportedException">Cannot compare unit prices with different units of measure</exception>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_Inequality(MyWebGrocer.UnitPrice,MyWebGrocer.UnitPrice)">
            <summary>
            Implements the !=.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns>The result of the operator.</returns>
            <exception cref="T:System.NotSupportedException">Cannot compare unit prices with different units of measure</exception>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_GreaterThan(MyWebGrocer.UnitPrice,MyWebGrocer.Price)">
            <summary>
            Implements the &gt;.
            </summary>
            <param name="unitPrice">The unit price.</param>
            <param name="price">The price.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_GreaterThanOrEqual(MyWebGrocer.UnitPrice,MyWebGrocer.Price)">
            <summary>
            Implements the &gt;=.
            </summary>
            <param name="unitPrice">The unit price.</param>
            <param name="price">The price.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_LessThan(MyWebGrocer.UnitPrice,MyWebGrocer.Price)">
            <summary>
            Implements the &lt;.
            </summary>
            <param name="unitPrice">The unit price.</param>
            <param name="price">The price.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_LessThanOrEqual(MyWebGrocer.UnitPrice,MyWebGrocer.Price)">
            <summary>
            Implements the &lt;=.
            </summary>
            <param name="unitPrice">The unit price.</param>
            <param name="price">The price.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_Equality(MyWebGrocer.UnitPrice,MyWebGrocer.Price)">
            <summary>
            Implements the ==.
            </summary>
            <param name="unitPrice">The unit price.</param>
            <param name="price">The price.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.op_Inequality(MyWebGrocer.UnitPrice,MyWebGrocer.Price)">
            <summary>
            Implements the !=.
            </summary>
            <param name="unitPrice">The unit price.</param>
            <param name="price">The price.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.Equals(MyWebGrocer.UnitPrice)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MyWebGrocer.UnitPrice.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:MyWebGrocer.UnitPrice.Price">
            <summary>
            Gets the price.
            </summary>
            <value>The price.</value>
        </member>
        <member name="P:MyWebGrocer.UnitPrice.PricePerUnit">
            <summary>
            Gets the price per unit.
            </summary>
            <value>The price per unit.</value>
        </member>
        <member name="P:MyWebGrocer.UnitPrice.UnitOfMeasure">
            <summary>
            Gets the unit of measure.
            </summary>
            <value>The unit of measure.</value>
        </member>
        <member name="T:MyWebGrocer.Utility.Chrono">
            <summary>
            Class Chrono.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.Chrono._timeZones">
            <summary>
            An array of time zones
            (e.g. new string[] {"PST", "-0700", "(US) Pacific
            Standard" }).
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Chrono.DateDiff(MyWebGrocer.Utility.Chrono.DateDiffCompareMethod,System.DateTime,System.DateTime)">
            <summary>
            Returns the difference between two dates
            </summary>
            <param name="howToCompare">How to Compare the dates</param>
            <param name="start">Start date</param>
            <param name="end">End date</param>
            <returns>Interval between the dates</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Chrono.BuildJavascriptDateConstructor">
            <summary>
            Prepares a date for Javascript new Date() constructor version:
              new Date(year, month, day, hours, minutes, seconds, ms)
            Multiple versions to avoid boxing which adds overhead
            </summary>
            <returns>Current Date formatted for JavaScript</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Chrono.BuildJavascriptDateConstructor(System.String)">
            <summary>
            Prepares a date for Javascript new Date() constructor version:
              new Date(year, month, day, hours, minutes, seconds, ms)
            Multiple versions to avoid boxing which adds overhead
            </summary>
            <param name="date">Date to parameterize</param>
            <returns>Output example: "2005,0,1,15,0,30,0" which is 2005-01-01 15:00:30:00</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Chrono.BuildJavascriptDateConstructor(System.DateTime)">
            <summary>
            Prepares a date for Javascript new Date() constructor version:
              new Date(year, month, day, hours, minutes, seconds, ms)
            </summary>
            <param name="date">Date to parameterize</param>
            <returns>Output example: "2005,0,1,15,0,30,0" which is 2005-01-01 15:00:30:00</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Chrono.ConvertStringToLocalTime(System.String)">
            <summary>
            Converts a DateTime string (with or without a TimeZone identifier) to a DateTime object
            and also converts the actual time to our current time zone (EST)
            </summary>
            <param name="dateTime">String to convert</param>
            <returns>DateTime Object reflecting current timeZone.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Chrono.GetWeekOfYear">
            <summary>
            Get current week of year
            </summary>
            <returns>Week of year</returns>
            <remarks>we are using First day which may cause the week number to become 53 for weeks that straddle the new year</remarks>
        </member>
        <member name="M:MyWebGrocer.Utility.Chrono.GetWeeksInYear(System.Int32)">
            <summary>
            Get weeks in year
            </summary>
            <returns>Number of weeks of year</returns>
            <remarks>we are using First day which may cause the week number to become 53 for weeks that straddle the new year</remarks>
        </member>
        <member name="M:MyWebGrocer.Utility.Chrono.ConvertToLocalDateTime(System.String,System.String)">
            <summary>
            Support Method for ConvertStringToLocalTime
            </summary>
            <param name="dateTime">DateTime string with timeZone removed</param>
            <param name="timeZoneId">TimeZone ID</param>
            <returns>DateTime object with string converted to current TZ</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Chrono.GetTimeZoneOffset(System.String)">
            <summary>
            Converts a time zone (e.g. "PST") to an offset string
            (e.g. "-0700").
            </summary>
            <param name="tz">The time zone to convert.</param>
            <returns>The offset value (e.g. -0700).</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.Chrono.DateDiffCompareMethod">
            <summary>
            Allowable methods for comparison
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.Chrono.DateDiffCompareMethod.DAY">
            <summary>
            The day
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.Chrono.DateDiffCompareMethod.HOUR">
            <summary>
            The hour
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.Chrono.DateDiffCompareMethod.MINUTE">
            <summary>
            The minute
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.Chrono.DateDiffCompareMethod.SECOND">
            <summary>
            The second
            </summary>
        </member>
        <member name="T:MyWebGrocer.Utility.CollectionBuilder">
            <summary>
              Class CollectionBuilder.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.CollectionBuilder.ConvertToList(System.String,System.Char)">
            <summary>
              Converts a string that is delimited by a specific character into a list of strings
            </summary>
            <param name="toConvert">String to convert into a list</param>
            <param name="delimiter">Delimiter</param>
            <returns>string-List converted from passed in string</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.Configuration">
            <summary>
            Helper methods for accessing configuration settings from the web/app.config file.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Configuration.GetConfigSectionElement(System.String,System.String)">
            <summary>
            Returns a value contained within the *.config file. If parent section is not found, 
            an exception is thrown. If parent section does not contain element, returns null.
            </summary>
            <param name="parent">Parent node name</param>
            <param name="element">Child element requested</param>
            <returns>Value associated with the child element</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Configuration.TryGetConfigSectionElement``1(System.String,System.String,``0)">
            <summary>
            Returns a strongly-typed config setting (from a *.config file), or a
            default value if the config setting is not found, or the value in the 
            config setting cannot be parsed to the requested type. 
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="parent">Parent node name</param>
            <param name="element">Child element requested</param>
            <param name="defaultValue">Default value</param>
            <returns>Parsed value from the child element, or the default value</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Configuration.GetRequiredConfigSectionElement``1(System.String,System.String)">
            <summary>
            Returns a strongly-typed config setting (from a *.config file). Throws
            an ArgumentExcetion if the config setting is not found, or the value in 
            the config setting cannot be parsed to the requested type. 
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="parent">Parent node name</param>
            <param name="element">Child element requested</param>
            <returns>Parsed value from the child element</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Configuration.GetConfigSection(System.String)">
            <summary>
            Returns a name value collection of all child elements (and values) inside a 
            parent node in a *.config file
            </summary>
            <param name="parent">Parent node name</param>
            <returns>Name value collection of all child elements (and values) inside a parent node</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Configuration.GetAppSettingsValue(System.String)">
            <summary>
            Returns a value from AppSettings (Special section in *.config)
            </summary>
            <param name="element">Referenced Key</param>
            <returns>Value of the Referenced Key</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Configuration.GetConnectionStringValue(System.String)">
            <summary>
            Returns a value from ConnectionSrings (Special section in *.config)
            </summary>
            <param name="element">Referenced Key</param>
            <returns>Value of the Referenced Key</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Configuration.GetTimeSpan(System.String,System.String,System.TimeSpan)">
            <summary>
            Returns a TimeSpan constructed from Hours/Minutes/Seconds elements within a specified 
            configuration section in the web/app.config file.
            </summary>
            <param name="parent">Name of the containing config section</param>
            <param name="elementPrefix">Name prefix for .Hours, .Minutes, .Seconds elements</param>
            <param name="defaultValue">Value to return if config section missing/incomplete</param>
            <returns>The constructed TimeSpan</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.Constants">
            <summary>
            Class consisting of constant strings and integers
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.Constants.NewLine">
            <summary>
            The new line
            </summary>
        </member>
        <member name="T:MyWebGrocer.Utility.Copy">
            <summary>
            Class Copy.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Copy.ShallowCopy(System.Object,System.Object)">
            <summary>
            Performs a shallow copy of all public and private fields with matching names
            from source object to target object, including fields declared by the source
            and target classes themselves and fields declared by their base classes.
            This is sufficient to copy all matching data, since properties are all
            ultimately backed by fields.
            </summary>
            <param name="source">The source.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Copy.GetAllFields(System.Type)">
            <summary>
            Gets all public and private fields for a given class, including those
            declared by the class itself, and those declared by its base classes.
            </summary>
            <param name="type">The type.</param>
            <returns>IEnumerable&lt;FieldInfo&gt;.</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.DataObjects.UserAccount">
            <summary>
            Class UserAccount.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.DataObjects.UserAccount.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Utility.DataObjects.UserAccount"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.DataObjects.UserAccount.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Utility.DataObjects.UserAccount"/> class.
            </summary>
            <param name="domain">The domain.</param>
            <param name="userName">The username.</param>
            <param name="password">The password.</param>
        </member>
        <member name="P:MyWebGrocer.Utility.DataObjects.UserAccount.Domain">
            <summary>
            Gets or sets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:MyWebGrocer.Utility.DataObjects.UserAccount.Username">
            <summary>
            Gets or sets the user name.
            </summary>
            <value>The user name.</value>
        </member>
        <member name="P:MyWebGrocer.Utility.DataObjects.UserAccount.Password">
            <summary>
            Gets or sets the password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="T:MyWebGrocer.Utility.Email">
            <summary>
            Class Email.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.Email.EmailConfigSection">
            <summary>
            Defines regions in a config file to look for class specific configuration details.
            
            Note: this used to be called config_Email_Section
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.Email.SmtpServer">
            <summary>
            The SMTP server
            
            Note: this used to be called cfg_ele_SMTPServer
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Email.SendMail(System.String,System.String,System.String,System.String)">
            <summary>
            Sends an Email
            </summary>
            <param name="from">Whom the mail is From</param>
            <param name="to">Adress(es) the mail will be delivered to</param>
            <param name="subject">Subject of the message</param>
            <param name="body">HTML-based body of the message.</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Email.SendMail(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an Email
            </summary>
            <param name="from">Whom the mail is From</param>
            <param name="to">Adress(es) the mail will be delivered to</param>
            <param name="subject">Subject of the message</param>
            <param name="body">HTML-based body of the message.</param>
            <param name="smtpServer">SMTP server to use</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Email.SendMail(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an Email
            </summary>
            <param name="from">Whom the mail is From</param>
            <param name="to">Adress(es) the mail will be delivered to</param>
            <param name="cc">An additional email address to receive the message</param>
            <param name="bcc">An additional email address to receive the message that recipients will not know</param>
            <param name="subject">Subject of the message</param>
            <param name="body">HTML-based body of the message.</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Email.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an Email
            </summary>
            <param name="from">Whom the mail is From</param>
            <param name="to">Adress(es) the mail will be delivered to</param>
            <param name="cc">An additional email address to receive the message</param>
            <param name="bcc">An additional email address to receive the message that recipients will not know</param>
            <param name="subject">Subject of the message</param>
            <param name="body">Body of the message.</param>
            <param name="isBodyHtml">Is the body composed in HTML?</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Email.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Sends an Email
            </summary>
            <param name="from">Whom the mail is From</param>
            <param name="to">Adress(es) the mail will be delivered to</param>
            <param name="cc">An additional email address to receive the message</param>
            <param name="bcc">An additional email address to receive the message that recipients will not know</param>
            <param name="subject">Subject of the message</param>
            <param name="body">Body of the message.</param>
            <param name="isBodyHtml">Is the body composed in HTML?</param>
            <param name="smtpServer">SMTP server to use</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Email.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Collections.Generic.IEnumerable{System.Net.Mail.Attachment})">
            <summary>
            Sends an Email
            </summary>
            <param name="from">Whom the mail is From</param>
            <param name="to">Adress(es) the mail will be delivered to</param>
            <param name="cc">An additional email address to receive the message</param>
            <param name="bcc">An additional email address to receive the message that recipients will not know</param>
            <param name="subject">Subject of the message</param>
            <param name="body">Body of the message.</param>
            <param name="isBodyHtml">Is the body composed in HTML?</param>
            <param name="smtpServer">SMTP server to use</param>
            <param name="attachments">List of mail attachments</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Email.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Sends an Email
            </summary>
            <param name="message">MailMessage object consisting of all information needed to send an email</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Email.SendMail(System.Net.Mail.MailMessage,System.String)">
            <summary>
            Sends an email through a specified smtp server
            </summary>
            <param name="message">MailMessage object consisting of all information needed to send an email</param>
            <param name="smtpServer">SMTP server to use</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Email.ExtractEmailAddresses(System.String)">
            <summary>
            Extracts the email addresses.
            </summary>
            <param name="recipients">The recipients.</param>
            <returns>List&lt;MailAddress&gt;.</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.IEmailClient">
            <summary>
            Interface to allow mocking for testing.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.IEmailClient.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Sends the mail.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:MyWebGrocer.Utility.EmailClient">
            <summary>
            Wrapper around SmtpClient, providing whitelist filtering.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.EmailClient.SendMail(System.Net.Mail.MailMessage)">
            <summary>
            Sends an email message. If the app/web config file includes a whitelist,
            all from/reply/to/cc/bcc addresses are filtered against this list. If no
            recipients remain, an exception is thrown.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:MyWebGrocer.Utility.EnumBase">
            <summary>
            Provides a base class for implementing an enumerated type that can be inherited (unlike System.Enum).
            A subclass should implement a private constructor, and define a static readonly field for each member.
            A list of these members can be obtained by calling the method GetValues{T}().
            </summary>
            <example>
            public class MyEnum : EnumBase
            {
            public readonly static MyEnum Value1 = new MyEnum("Value1");
            public readonly static MyEnum Value2 = new MyEnum("Value2");
            private MyEnum(string name) : base(name) { }
            }
            </example>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Utility.EnumBase"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumBase.GetValues``1">
            <summary>
            Returns an enumeration of the static fields of type T, defined within class T
            that inherits from EnumBase. Does NOT include static fields defined on base types
            that type T inherits from. This method is analogous to System.Enum.GetValues().
            The list returned is typically used to populate a drop-down in the UI.
            </summary>
            <typeparam name="T">The class to inspect.</typeparam>
            <returns>An enumeration of objects of type T.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumBase.GetValues``2">
            <summary>
            Returns an enumeration of the static fields from the class TInspect, that are of a
            type that is assignable to type TReturn (a base class of TInspect). The returned
            enumeration includes fields defined in class TInspect and base classes of TInspect.
            The list returned is typically used to populate a drop-down in the UI.
            </summary>
            <typeparam name="TInspect">The class to inspect.</typeparam>
            <typeparam name="TReturn">The base type to return.</typeparam>
            <returns>An enumeration of objects of type TReturn.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumBase.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:MyWebGrocer.Utility.EnumBase.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:MyWebGrocer.Utility.EnumHelper">
            <summary>
            Class EnumHelper.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumHelper.GetName(System.Enum)">
            <summary>
            Returns human-readable description from [DisplayNameLocalizedAttribute] attribute for an Enum member,
            or the ToString() representation if the attribute is not present.
            </summary>
            <param name="en">The en.</param>
            <returns>String, name of "en"</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumHelper.GetName(MyWebGrocer.Utility.EnumBase)">
            <summary>
            Returns human-readable description from [DisplayNameLocalizedAttribute] attribute for an EnumBase member,
            or the ToString() representation if the attribute is not present.
            </summary>
            <param name="en">The en.</param>
            <returns>String, name of "en"</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumHelper.GetEnumName(System.Object)">
            <summary>
            Helper method to be used with either Enum or EnumBase.
            </summary>
            <param name="en">The en.</param>
            <returns>String, name of "en"</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumHelper.GetNonLocalizedDescription(System.Enum)">
            <summary>
            Returns the description (non-localized) from [Description] attribute for an Enum member,
            or the ToString() representation if the attribute is not present.
            </summary>
            <param name="en">The en.</param>
            <returns>description</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumHelper.GetNonLocalizedEnumDescriptionString(System.Object)">
            <summary>
            Helper method to be used with Enum
            </summary>
            <param name="en">The en.</param>
            <returns>description</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumHelper.GetDescription(System.Enum)">
            <summary>
            Returns human-readable description from [DescriptionLocalizedAttribute] attribute for an Enum member,
            or the ToString() representation if the attribute is not present.
            </summary>
            <param name="en">The en.</param>
            <returns>String, <see cref="T:MyWebGrocer.Validation.Attributes.DescriptionLocalizedAttribute"/> of "en"</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumHelper.GetDescription(MyWebGrocer.Utility.EnumBase)">
            <summary>
            Returns human-readable description from [DescriptionLocalizedAttribute] attribute for an EnumBase member,
            or the ToString() representation if the attribute is not present.
            </summary>
            <param name="en">The en.</param>
            <returns>String, <see cref="T:MyWebGrocer.Validation.Attributes.DescriptionLocalizedAttribute"/> of "en"</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumHelper.GetEnumDescription(System.Object)">
            <summary>
            Helper method to be used with either Enum or EnumBase.
            </summary>
            <param name="en">The en.</param>
            <returns>String, <see cref="T:MyWebGrocer.Validation.Attributes.DescriptionLocalizedAttribute"/> of "en"</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.EnumHelper.GetList(System.Type)">
            <summary>
            Returns list of human-readable descriptions from [DisplayName] attributes for all members of an Enum.
            </summary>
            <param name="enumType">Type of the enum.</param>
            <returns>A list of human-readable descriptions from [DisplayName] attributes for all members of an Enum</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.FileManager">
            <summary>
            Class FileManager.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.FileManager.GetDirectoryInfo(MyWebGrocer.Utility.DataObjects.UserAccount,System.String)">
            <summary>
            Gets the directory information.
            </summary>
            <param name="alias">The alias.</param>
            <param name="path">The path.</param>
            <returns>DataTable.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.FileManager.GetDirectoryInfo(MyWebGrocer.Utility.DataObjects.UserAccount,System.String,System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Returns a data table containing all files in a root directory and all subdirectories
            </summary>
            <param name="alias">Domain/Username and password with permissions on both
            target and destination server</param>
            <param name="path">Path to initial file</param>
            <param name="fileExcludes">List of files to exclude</param>
            <param name="directoryExcludes">List of directories to exclude</param>
            <param name="allowedExtensions">List of allowed extensions</param>
            <returns>DataTable.</returns>
            <exception cref="T:System.Exception">MyWebGrocer.CopyFiles.GetDirectoryInfo():  + ex.Message</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.FileManager.CopyFile(MyWebGrocer.Utility.DataObjects.UserAccount,System.String,System.String,System.Boolean)">
            <summary>
            Copies a file from destination A to destination B
            Note: The Account passed in MUST have permissions on both the target
            and destination servers.
            </summary>
            <param name="alias">Domain/Username and password with permissions on both
            target and destination server</param>
            <param name="from">Where the file initially is</param>
            <param name="to">Where the file needs to go</param>
            <param name="overwrite">Overwrite the file if it is already at destination B?</param>
            <exception cref="T:System.Exception">MyWebGrocer.CopyFiles.CopyFile():  + ex.Message</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.FileManager.FileExists(MyWebGrocer.Utility.DataObjects.UserAccount,System.String)">
            <summary>
            Returns whether or not a file exists
            </summary>
            <param name="alias">Domain/Username and password with permissions on both
            target and destination server</param>
            <param name="fileName">name of the file to check</param>
            <returns>True if file exists, False otherwise</returns>
            <exception cref="T:System.Exception">MyWebGrocer.CopyFiles.FileExists():  + ex.Message</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.FileManager.Exclude(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            If the file/directory is found in the exclusion list, return true.
            </summary>
            <param name="name">File/Directory to check</param>
            <param name="toExclude">List of files/directories to exclude</param>
            <returns>True if the file/directory is in the exclusion list, otherwise false</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.FileManager.AllowExtension(System.String,System.Collections.Generic.ICollection{System.String})">
            <summary>
            If the file extension is found in the allowed list, return true.
            </summary>
            <param name="extension">Extension to check</param>
            <param name="toAllow">List of file types to allow</param>
            <returns>True if the file type is allowed, otherwise false</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.Format">
            <summary>
            Class Format.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Format.AsCurrency(System.Object)">
            <summary>
            Formats an object as a currency string
            </summary>
            <param name="value">Object to convert</param>
            <returns>Formats an object as a currency string</returns>
            <exception cref="T:System.ArgumentException">Parameter cannot be null</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Format.AsDate(System.Object)">
            <summary>
            Formats an object as a date string
            </summary>
            <param name="value">Object to convert</param>
            <returns>Formats an object as a date string</returns>
            <exception cref="T:System.ArgumentException">Parameter cannot be null</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Format.AsNumber(System.Object,System.Int32)">
            <summary>
            Formats an object as a number string
            </summary>
            <param name="value">Object to convert</param>
            <param name="decimalPlaces">Number of decimal places to report</param>
            <returns>Formats an object as a number string</returns>
            <exception cref="T:System.ArgumentException">Parameter cannot be null</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Format.AsPercent(System.Object,System.Int32)">
            <summary>
            Formats an object as a percent string
            </summary>
            <param name="value">Object to convert</param>
            <param name="decimalPlaces">Number of decimal places to report</param>
            <returns>Formats an object as a percent string</returns>
            <exception cref="T:System.ArgumentException">Parameter cannot be null</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Format.ForJavaScript(System.String)">
            <summary>
            Formats an object for being printed to javascript.
            </summary>
            <param name="value">string to format</param>
            <returns>JavaScript serialized string</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Format.CleanString(System.String,System.String)">
            <summary>
            Removes specified characters from a string
            </summary>
            <param name="toClean">String to be cleaned</param>
            <param name="toRemove">String of characters to be removed</param>
            <returns>A string with specified characters removed.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Format.CleanString(System.String,System.String,System.Boolean)">
            <summary>
            Removes specified characters from a string
            </summary>
            <param name="toClean">String to be cleaned</param>
            <param name="toRemove">String of characters to be removed</param>
            <param name="replaceWithSpace">If true, a removed character will be replaced by a space</param>
            <returns>A string with specified characters removed.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Format.DictionaryAsHTMLTable(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Converts a dictionary of key value pairs into an HTML table
            </summary>
            <param name="dictionary">Dictionary of KVP's</param>
            <returns>string containing an HTML table of the KVPs.</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.Imaging.Info">
            <summary>
            Allows access to an image's properties
            NOTE: LoadImage() must be called with a fully mapped path to the image before accessing image properties
            otherwise LoadImage() will return false, false also returned if image doesn't exist
            EXAMPLE:
            int height = 0;
            string imgPath = Page.MapPath( "someImage.gif" ); // must be fully qualified
            MyWebGrocer.Utility.Imaging.Info info = new MyWebGrocer.Utility.Imaging.Info();
            if (ii.LoadImage(imgPath))
            {
            height = info.Height;
            info.dispose();
            }
            </summary>
        </member>
        <member name="F:MyWebGrocer.Utility.Imaging.Info._bmpImg">
            <summary>
            The BMP img
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Info.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Utility.Imaging.Info"/> class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Info.#ctor(System.Drawing.Image)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Utility.Imaging.Info"/> class.
            </summary>
            <param name="image">The image.</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Info.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Info.Dispose(System.Boolean)">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Info.LoadImage(System.String)">
            <summary>
            Load an image defined in a fully qualified path [imgFileSrc]
            </summary>
            <param name="imageFileSource">Image File Source</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Info.SaveAsJpeg(System.String,System.Int32)">
            <summary>
            Save image in JPG format, with the given quality.
            </summary>
            <param name="path">Path to which the image will be saved.</param>
            <param name="quality">An integer from 0 to 100, with 100 being the
            highest quality</param>
            <exception cref="T:System.ArgumentOutOfRangeException">quality</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">An invalid value was entered for image quality.</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Info.DetermineNewSizeKeepAspectRatio(System.Int32@,System.Int32@)">
            <summary>
            Determine a new image size (maintaining aspect ratio)
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:MyWebGrocer.Utility.Imaging.Info.Height">
            <summary>
            Height of image
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:MyWebGrocer.Utility.Imaging.Info.Width">
            <summary>
            Width of image
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:MyWebGrocer.Utility.Imaging.Info.RatioWidthHeight">
            <summary>
            Width to height ratio
            </summary>
            <value>The height of the ratio width.</value>
        </member>
        <member name="P:MyWebGrocer.Utility.Imaging.Info.RatioHeightWidth">
            <summary>
            Height to width ratio
            </summary>
            <value>The width of the ratio height.</value>
        </member>
        <member name="P:MyWebGrocer.Utility.Imaging.Info.PixelFormat">
            <summary>
            Pixel format
            </summary>
            <value>The pixel format.</value>
        </member>
        <member name="P:MyWebGrocer.Utility.Imaging.Info.Resolution">
            <summary>
            Get resolution of image as [Horizontal,Vertical]
            </summary>
            <value>The resolution.</value>
        </member>
        <member name="P:MyWebGrocer.Utility.Imaging.Info.Format">
            <summary>
            Get image format
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:MyWebGrocer.Utility.Imaging.Sizing">
            <summary>
            Class used for general imaging methods such as resizing.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Sizing.ResizeImages(System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Resizes all GIF, JPG, BMP images in a directory.
            If you'd like to set a width and let the height be resized proportionally,
            set width to desired pixel width, and set height to 0. Also set maintainProportions
            to true.  If you'd like to resize image to within a X x Y box, set width &gt; 0, height &gt; 0,
            and maintainProportions = true.
            If you'd like to force the resize to a width and height, specify both height
            and width (greater than 0) and set maintainProportions to false.
            </summary>
            <param name="width">Image width will resize to this number. Set to 0 otherwise.</param>
            <param name="height">Image height will resize to this number. Set to 0 otherwise.</param>
            <param name="fromPath">Path where images are located</param>
            <param name="toPath">Path where you'd like new images to be written. Can be the same as toPath.</param>
            <param name="maintainProportions">Set to true if you'd like to maintain proportions.</param>
            <param name="keepOriginalFiles">Set to true if you'd like to keep original files</param>
            <returns>true if successful, false otherwise</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Sizing.ResizeImages(System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Resizes the images.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="fromPath">From path.</param>
            <param name="toPath">To path.</param>
            <param name="maintainProportions">if set to <c>true</c> [maintain proportions].</param>
            <param name="keepOriginalFiles">if set to <c>true</c> [keep original files].</param>
            <param name="prefixToAdd">The prefix to add.</param>
            <param name="suffixToAdd">The suffix to add.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
            <exception cref="T:System.Exception">
            ResizeImages: Invalid maximum or minimum height
            or
            ResizeImages: If maintainProportion is false, both width and height must be set to a value greater than 0.
            or
            ResizeImages: Invalid fromPath
            or
            ResizeImages: Invalid toPath
            </exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Sizing.ResizeOneImage(System.Int32,System.Int32,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Resizes a GIF, JPG, or BMP image.
            If you'd like to set a width and let the height be resized proportionally,
            set width to desired pixel width, and set height to 0. Also set maintainProportions
            to true. If you'd like to resize image to within a X x Y box, set width &gt; 0, height &gt; 0,
            and maintainProportions = true.
            If you'd like to force the resize to a width and height, specify both height
            and width (greater than 0) and set maintainProportions to false.
            </summary>
            <param name="width">Image width will resize to this number. Set to 0 otherwise.</param>
            <param name="height">Image height will resize to this number. Set to 0 otherwise.</param>
            <param name="fromPath">Path and Filename of image</param>
            <param name="toPath">Path and Filename of new image. Can be the same as fromPathFile.</param>
            <param name="maintainProportions">Set to true if you'd like to maintain proportions.</param>
            <param name="keepOriginalFile">Set to true if you'd like to keep original file</param>
            <returns>true if successful, false otherwise</returns>
            <exception cref="T:System.Exception">
            ResizeImages: Invalid maximum or minimum height
            or
            ResizeImages: If maintainProportion is false, both width and height must be set to a value greater than 0.
            or
            ResizeImages: Invalid fromPath
            or
            ResizeImages: Can not overwrite file that is being resized. Use a different file name.
            or
            ResizeImages: Invalid toPath
            </exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Sizing.ResizeImage(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Loads an image from disk, resizes it, and writes it back to disk.
            </summary>
            <param name="fromPath">Location to read images from</param>
            <param name="toPath">Location to write new images to</param>
            <param name="fileName">Existing file name</param>
            <param name="newFileName">New file name</param>
            <param name="width">Width to resize to</param>
            <param name="height">Height to resize to</param>
            <param name="maintainProportion">Maintain aspect ratio</param>
            <param name="oFormat">Image format to save as</param>
        </member>
        <member name="M:MyWebGrocer.Utility.Imaging.Sizing.ResizeImage(System.Drawing.Image,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes an image.
            </summary>
            <param name="image">The image to be resized</param>
            <param name="width">Width to resize to</param>
            <param name="height">Height to resize to</param>
            <param name="maintainProportion">Maintain aspect ratio</param>
            <returns>Image.</returns>
            <exception cref="T:System.Exception">
            ResizeImage: If maintainProportion is false, both width and height must be set to a value greater than 0.
            or
            ResizeImage: invalid width and height values
            </exception>
        </member>
        <member name="T:MyWebGrocer.Utility.ImpersonateUser">
            <summary>
            Class ImpersonateUser.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.ImpersonateUser.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Logons the user.
            </summary>
            <param name="lpszUsername">The LPSZ username.</param>
            <param name="lpszDomain">The LPSZ domain.</param>
            <param name="lpszPassword">The LPSZ password.</param>
            <param name="dwLogonType">Type of the dw logon.</param>
            <param name="dwLogonProvider">The dw logon provider.</param>
            <param name="phToken">The ph token.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.ImpersonateUser.CloseHandle(System.IntPtr)">
            <summary>
            Closes the handle.
            </summary>
            <param name="handle">The handle.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.ImpersonateUser.StartImpersonation(MyWebGrocer.Utility.DataObjects.UserAccount)">
            <summary>
            Starts the impersonation. Ensure code executes with FullTrust.
            </summary>
            <param name="alias">The alias.</param>
            <exception cref="T:System.ComponentModel.Win32Exception"></exception>
        </member>
        <member name="M:MyWebGrocer.Utility.ImpersonateUser.StopImpersonation">
            <summary>
            Stops the impersonation.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Utility.IO">
            <summary>
            IO functionality
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.IO.LoadTextFromFile(System.String)">
            <summary>
            Loads the text from file.
            </summary>
            <param name="path">The path.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.Xml">
            <summary>
            Xml processing functionality
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.Xml.AddReplaceXmlNode(System.String@,System.String,System.String,System.String)">
            <summary>
            This procedure takes a reference to a well formed xml string (or a null string).
            It searches the Xml for elementName
            if( found ) --&gt; replace the element's value with elementVal
            else --&gt; add the element and value to the rootNode.
            If( xml string is null ) --&gt; create a well formed xml string with the element and its value.
            </summary>
            <param name="xml">well formed xml string</param>
            <param name="rootNode">name of root node</param>
            <param name="elementName">name of element we are looking for</param>
            <param name="elementValue">value to place in element</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Xml.GetXmlElementValue(System.String,System.String)">
            <summary>
            Find an element's value in a well formed xml string.
            </summary>
            <param name="xml">well formed xml string</param>
            <param name="elementName">name of element we are looking for</param>
            <returns>value of element we are looking for, or null if element doesn't exist</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Xml.Deserialize(System.String,System.Type)">
            <summary>
            Deserialize object from Xml string
            </summary>
            <param name="xml">Xml string</param>
            <param name="type">Type of object to deserialize to</param>
            <returns>Deserialized object or exception if error</returns>
            <exception cref="T:System.ArgumentException">Invalid input parameter.</exception>
            <exception cref="T:System.ArgumentException">If no xml or null type</exception>
            <exception cref="T:System.Exception">If error deserializing</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Xml.StringToUTF8ByteArray(System.String)">
            <summary>
            Convert string to UTF8 byte array
            </summary>
            <param name="xml">String to convert</param>
            <returns>UTF8 byte array</returns>
            <exception cref="T:System.ArgumentException">Invalid input parameter.</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Xml.LoadXmlFromUri(System.Uri)">
            <summary>
            Load Xml from Uri
            </summary>
            <param name="uri">Uri to load from</param>
            <returns>StringBuilder - null if not found or exception</returns>
            <exception cref="T:System.ArgumentException">Invalid input parameter.</exception>
        </member>
        <member name="M:MyWebGrocer.Utility.Xml.CreateXmlFromCsv(System.String,System.String,System.String)">
            <summary>
            Create Xml string from CSV
            </summary>
            <param name="outerTagName">Outer xml tag name</param>
            <param name="tagName">CSV item tag name</param>
            <param name="csv">CSV list</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentException">Invalid input parameter.</exception>
            <returns>XML containing the CSV list</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.XmlExtensions">
            <summary>Provides Xml extension methods for various types.</summary>
        </member>
        <member name="M:MyWebGrocer.Utility.XmlExtensions.ToXml(MyWebGrocer.Address,System.String)">
            <summary>
            Formats an <see cref="T:MyWebGrocer.Address"/> for xml.
            </summary>
            <param name="address">The address to format.</param>
            <param name="elementName">The name of the element which
            the address should be contained in.</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="M:MyWebGrocer.Utility.XmlExtensions.ToXml(MyWebGrocer.Duration,System.String)">
            <summary>Formats a <see cref="T:MyWebGrocer.Duration"/>
            as an <see cref="T:System.Xml.Linq.XElement"/>.</summary>
            <param name="duration">The instance to serialize.</param>
            <param name="elementName">The name of the element in which
            the <see cref="T:MyWebGrocer.Duration"/>'s values should be stored.</param>
            <returns>An <see cref="T:System.Xml.Linq.XElement"/>.</returns>
        </member>
        <member name="T:MyWebGrocer.Utility.XmlSerializationHelper">
            <summary>
            Serialize objects to xml
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.XmlSerializationHelper.#ctor">
            <summary>
            Serialize objects to xml
            </summary>
        </member>
        <member name="M:MyWebGrocer.Utility.XmlSerializationHelper.#ctor(System.Boolean)">
            <summary>
            Serialize objects to xml
            </summary>
            <param name="omitXmlDeclaration">Omit xml declaration at top of xml response</param>
        </member>
        <member name="M:MyWebGrocer.Utility.XmlSerializationHelper.#ctor(System.Boolean,System.Text.Encoding)">
            <summary>
            Serialize objects to xml
            </summary>
            <param name="omitXmlDeclaration">Omit xml declaration at top of xml response</param>
            <param name="encoding">Encoding of xml response</param>
        </member>
        <member name="M:MyWebGrocer.Utility.XmlSerializationHelper.#ctor(System.Boolean,System.Text.Encoding,System.String,System.String)">
            <summary>
            Serialize objects to xml
            </summary>
            <param name="omitXmlDeclaration">Omit xml declaration at top of xml response</param>
            <param name="encoding">Encoding of xml response</param>
            <param name="xmlNamespacePrefix">Xml namespace prefix to use (to remove set to string.Empty)</param>
            <param name="xmlNamespace">Xml namespace to use (to remove set to string.Empty)</param>
        </member>
        <member name="M:MyWebGrocer.Utility.XmlSerializationHelper.Serialize``1(``0)">
            <summary>
            Serializes the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">The object.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.AllChildrenAreValidAttribute">
            <summary>Ensures that all items in the enumeration are valid.</summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.AllChildrenAreValidAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.DescriptionLocalizedAttribute">
            <summary>
            Class DescriptionLocalizedAttribute.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.DescriptionLocalizedAttribute.ResourceType">
            <summary>
            Gets or sets the type of the resource.
            </summary>
            <value>The type of the resource.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.DescriptionLocalizedAttribute.ResourceName">
            <summary>
            Gets or sets the name of the resource.
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.DescriptionLocalizedAttribute.Description">
            <summary>
            Gets the description stored in this attribute.
            </summary>
            <value>The description.</value>
            <exception cref="T:System.InvalidOperationException">
            ResourceType must be provided
            or
            Invalid resource name  + ResourceName
            </exception>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.DisplayNameLocalizedAttribute">
            <summary>
            Class DisplayNameLocalizedAttribute.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.DisplayNameLocalizedAttribute.ResourceType">
            <summary>
            Gets or sets the type of the resource.
            </summary>
            <value>The type of the resource.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.DisplayNameLocalizedAttribute.ResourceName">
            <summary>
            Gets or sets the name of the resource.
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.DisplayNameLocalizedAttribute.DisplayName">
            <summary>
            Gets the display name for a property, event, or public void method that takes no arguments stored in this attribute.
            </summary>
            <value>The display name.</value>
            <exception cref="T:System.InvalidOperationException">
            ResourceType must be provided
            or
            Invalid resource name  + ResourceName
            </exception>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.DurationMustBePositiveAttribute">
            <summary>
            Applied to a duration property to prevent negative values.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.DurationMustBePositiveAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.EmailAddressAttribute">
            <summary>
            Class EmailAddressAttribute.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.EmailAddressAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.Attributes.EmailAddressAttribute"/> class.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.EnsureValidStateAttribute">
            <summary>
            Ensures that the state is a valid US state.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.EnsureValidStateAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.MaximumSelectedItemsAttribute">
            <summary>
            Ensures that a minimum number of selections have been meet.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.MaximumSelectedItemsAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.Attributes.MaximumSelectedItemsAttribute"/> class.
            </summary>
            <param name="maximum">The maximum.</param>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.MaximumSelectedItemsAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.MaximumSelectedItemsAttribute.Maximum">
            <summary>
            Gets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.MinimumSelectedItemsAttribute">
            <summary>
            Ensures that a minimum number of selections have been meet.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.MinimumSelectedItemsAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.Attributes.MinimumSelectedItemsAttribute"/> class.
            </summary>
            <param name="minimum">The minimum.</param>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.MinimumSelectedItemsAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.MinimumSelectedItemsAttribute.Minimum">
            <summary>
            Gets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.NotEmptyAttribute">
            <summary>
            Ensures that a collection is not empty.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.NotEmptyAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.ObjectRequiredAttribute">
            <summary>
            Ensures that the attached value is not null.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.ObjectRequiredAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.PropertiesMustMatchAttribute">
            <summary>
            Class PropertiesMustMatchAttribute. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.Attributes.PropertiesMustMatchAttribute.DefaultErrorMessage">
            <summary>
            The default error message
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.PropertiesMustMatchAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.Attributes.PropertiesMustMatchAttribute"/> class.
            </summary>
            <param name="originalProperty">The original property.</param>
            <param name="confirmProperty">The confirm property.</param>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.PropertiesMustMatchAttribute.FormatErrorMessage(System.String)">
            <summary>
            Applies formatting to an error message, based on the data field where the error occurred.
            </summary>
            <param name="name">The name to include in the formatted message.</param>
            <returns>An instance of the formatted error message.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.PropertiesMustMatchAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.PropertiesMustMatchAttribute.ConfirmProperty">
            <summary>
            Gets the confirm property.
            </summary>
            <value>The confirm property.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.PropertiesMustMatchAttribute.OriginalProperty">
            <summary>
            Gets the original property.
            </summary>
            <value>The original property.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.PropertiesMustMatchAttribute.TypeId">
            <summary>
            When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute" />.
            </summary>
            <value>The type identifier.</value>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.RequiredIfAttribute">
            <summary>
            Attribute to be applied to a property that is conditionally required,
            dependent on the value of another property.
            </summary>
            <remarks>Note: We don't inherit from RequiredAttribute as some elements of the MVC
            framework specifically look for it and choose not to add a RequiredValidator
            for non-nullable fields if one is found. This would be invalid if we inherited
            from it as obviously our RequiredIf only applies if a condition is satisfied.
            Therefore we're using a private instance of one just so we can reuse the IsValid
            logic, and don't need to rewrite it.</remarks>
        </member>
        <member name="F:MyWebGrocer.Validation.Attributes.RequiredIfAttribute._innerAttribute">
            <summary>
            The _inner attribute
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.RequiredIfAttribute.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.Attributes.RequiredIfAttribute"/> class.
            </summary>
            <param name="dependentProperty">The dependent property.</param>
            <param name="targetValue">The target value.</param>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.RequiredIfAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.RequiredIfAttribute.DependentProperty">
            <summary>
            Gets the dependent property.
            </summary>
            <value>The dependent property.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.Attributes.RequiredIfAttribute.TargetValue">
            <summary>
            Gets the target value.
            </summary>
            <value>The target value.</value>
        </member>
        <member name="T:MyWebGrocer.Validation.Attributes.UnitPriceMustBePositiveAttribute">
            <summary>
            Applied to a unit price property to prevent negative values.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Attributes.UnitPriceMustBePositiveAttribute.IsValid(System.Object)">
            <summary>
            Determines whether the specified value of the object is valid.
            </summary>
            <param name="value">The value of the object to validate.</param>
            <returns>true if the specified value is valid; otherwise, false.</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.DefaultRules">
            <summary>
            Contains information about default rules and conventions
            for business objects.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.DefaultMaxStringLength">
            <summary>
            Unless otherwise required, this should be the default maximum
            length of any user settable string property.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.DefaultMaxNameLength">
            <summary>
            Unless otherwise required, this should be the default maximum
            length of any user settable "name" property.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.DefaultMaxPersonNameLength">
            <summary>
            Unless otherwise required, this should be the default maximum
            length of any user settable "name" property which is a person's
            first or last name.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.DefaultMaxDescriptionLength">
            <summary>
            Unless otherwise required, this should be the default maximum
            length of any user settable "description" property.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.EmailAddressLength">
            <summary>
            Email addresses should be constrained to this length.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.PhoneNumberLength">
            <summary>
            Phone numbers should be constrained to this length.
            </summary>
            <remarks>25 was chosen as the current "longest" number
            possible during a Google search was 20.</remarks>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.EmailAddressRegEx">
            <summary>
            Email addresses should only be valid if they match this pattern.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.ZipCodeRegEx">
            <summary>
            Zip codes should only be valid if they match this pattern.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.PhoneNumberUnitedStatesRegEx">
            <summary>
            Valid USA phone numbers must match this pattern.  Ten digit entry only.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.ZeroOrPositiveIntegerRegEx">
            <summary>
            Positive integer or Zero
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.PositiveIntegerRegEx">
            <summary>
            Positive integer (greater than zero)
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.IntegerRegEx">
            <summary>
            Any Integer
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.MaxPasswordLength">
            <summary>
            Maximum password length
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.MinPasswordLength">
            <summary>
            Minimum password length
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.AddressLineLength">
            <summary>Length of each address line.</summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.DefaultNewZealandPostalCodeLength">
            <summary>
            Default New Zealand Postal Code Length
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.DefaultUnitedKingdomPostalCodeLength">
            <summary>
            Default United Kingdom Postal Code Length
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.DefaultRules.DefaultUnitedStatesPostalCodeLength">
            <summary>
            Default United States Postal Code Length
            </summary>
        </member>
        <member name="T:MyWebGrocer.Validation.Guard">
            <summary>
            Class Guard.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.NotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null
            </summary>
            <param name="value">The argument value to check.</param>
            <param name="name">The name of the argument.</param>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.AttributeAppliedTo``1(System.Object,System.Object)">
            <summary>
            Checks that an attribute has been applied to the expected type.
            </summary>
            <typeparam name="T">The type to which the attribute should be applied.</typeparam>
            <param name="attribute">The attribute being applied.</param>
            <param name="appliedTo">The type to which the attribute is being applied.</param>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsEnumerable``1(System.Object,System.String)">
            <summary>
            Checks that a value implements IEnumerable of the specified type.
            </summary>
            <typeparam name="T">The type contained by the expected IEnumerable list.</typeparam>
            <param name="value">The list being checked.</param>
            <param name="name">The name of the list being checked.</param>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.Unless``1(``0)">
            <summary>
            fluent validation pipeline conjunction
            </summary>
            <typeparam name="T">type of value</typeparam>
            <param name="value">value to be validated</param>
            <returns>value passed in</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.Is``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Check if the value can be validated by the verify function
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <param name="value">value to be validated</param>
            <param name="verify">validation function</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.MustBe``1(``0,System.Func{``0,System.Boolean})">
            <summary>
            Same as the Is function but given another name for fluent
            </summary>
            <typeparam name="T">type of the value</typeparam>
            <param name="value">value to be validated</param>
            <param name="verify">validation function</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsPositiveInteger(System.String)">
            <summary>
            Check if the value is a positive integer (greater than zero)
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsZeroOrPositiveInteger(System.String)">
            <summary>
            Check if the value is a positive integer or zero
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsInteger(System.String)">
            <summary>
            Check if the value is an integer
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsPhoneNumber(System.String)">
            <summary>
            Check if the value is a valid phone number
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsEmailAddress(System.String)">
            <summary>
            Check if the value is a valid email address
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsZipCode(System.String)">
            <summary>
            Check if the value is a valid zip code
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsBoolean(System.String)">
            <summary>
            Check if the value is a <see cref="T:System.Boolean"/> string: true/false/0/1
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsGuid(System.String)">
            <summary>
            Check if the string content is a valid Guid
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsEmptyGuid(System.String)">
            <summary>
            Check if the string content is an empty Guid
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.Guard.IsGuidAndNotEmpty(System.String)">
            <summary>
            Check if the string content is a Guid but not an empty Guid
            </summary>
            <param name="value">value to be validated</param>
            <returns>validation pipeline to operate on</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.ImageValidation">
            <summary>
            Class ImageValidation.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderGif1">
            <summary>
            GIF Image Header - Two Versions:
            Taken From: http://www.onicos.com/staff/iz/formats/gif.html
            1) Identifier (3 Bytes, "GIF")
            2) Version?   (3 Bytes, "87a" OR "89a")
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderGif2">
            <summary>
            The header gif2
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderGifLength">
            <summary>
            The header GIF length
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderJpegLength">
            <summary>
            The header JPEG length
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderPngLength">
            <summary>
            The header PNG length
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderTif1">
            <summary>
            TIFF Image Header - Two Versions:
            Taken From: http://en.wikipedia.org/wiki/Tagged_Image_File_Format#Flexible_options
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderTif2">
            <summary>
            The header tif2
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderTifLength">
            <summary>
            The header tif length
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderJpeg">
            <summary>
            JPEG Image Header - Consists of two parts:
            Taken From: http://www.obrador.com/essentialjpeg/headerinfo.htm
            1) Start of Image (SOI) marker               (2 Bytes, FF D8)
            2) JPEG File Interchange Format Identifier   (2 Bytes, FF E0)
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.HeaderPng">
            <summary>
            PNG Image Header
            Taken From: http://en.wikipedia.org/wiki/Portable_Network_Graphics#File_header
            Header (8 Bytes, 89 50 4E 47 0D 0A 1A 0A)
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.ImageValidation.IsValidImage(System.String,MyWebGrocer.Validation.ImageValidation.ImageFileType)">
            <summary>
            Verifies that imageStream is a true, valid image of the type specified.
            It checks the header first, then attempts to load the image in a try/catch block.
            </summary>
            <param name="filePath">Path to the file to validate against</param>
            <param name="type">Type of image to validate against.</param>
            <returns>True if a valid image, false otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ImageValidation.IsValidImage(System.IO.Stream,MyWebGrocer.Validation.ImageValidation.ImageFileType)">
            <summary>
            Verifies that imageStream is a true, valid image of the type specified.
            It checks the header first, then attempts to load the image in a try/catch block.
            </summary>
            <param name="imageStream">In-memory stream of data representing the iamge</param>
            <param name="type">Type of image to validate against.</param>
            <returns>True if a valid image, false otherwise.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ImageValidation.IsGifMatch(System.IO.Stream)">
            <summary>
            Determines whether [is GIF match] [the specified stream].
            </summary>
            <param name="stream">The stream.</param>
            <returns><c>true</c> if [is GIF match] [the specified stream]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ImageValidation.IsJpegMatch(System.IO.Stream)">
            <summary>
            Determines whether [is JPEG match] [the specified stream].
            </summary>
            <param name="stream">The stream.</param>
            <returns><c>true</c> if [is JPEG match] [the specified stream]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ImageValidation.IsPngMatch(System.IO.Stream)">
            <summary>
            Determines whether [is PNG match] [the specified stream].
            </summary>
            <param name="stream">The stream.</param>
            <returns><c>true</c> if [is PNG match] [the specified stream]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ImageValidation.IsTifMatch(System.IO.Stream)">
            <summary>
            Determines whether [is tif match] [the specified stream].
            </summary>
            <param name="stream">The stream.</param>
            <returns><c>true</c> if [is tif match] [the specified stream]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.ImageValidation.ImageFileType">
            <summary>
            Enum ImageFileType
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.ImageFileType.Gif">
            <summary>
            The GIF
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.ImageFileType.Jpeg">
            <summary>
            The JPEG
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.ImageFileType.Png">
            <summary>
            The PNG
            </summary>
        </member>
        <member name="F:MyWebGrocer.Validation.ImageValidation.ImageFileType.Tif">
            <summary>
            The tif
            </summary>
        </member>
        <member name="T:MyWebGrocer.Validation.IValidator">
            <summary>
            Validator interface
            </summary>
        </member>
        <member name="M:MyWebGrocer.Validation.IValidator.IsValid(System.String)">
            <summary>
            Check if a value is valid
            </summary>
            <param name="value">Value to check</param>
            <returns>true if valid, false otherwise</returns>
        </member>
        <member name="T:MyWebGrocer.Validation.ValidationPipeline`1">
            <summary>
            Class ValidationPipeline.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationPipeline`1.op_Implicit(MyWebGrocer.Validation.ValidationPipeline{`0})~System.Boolean">
            <summary>
            Performs an implicit conversion from <see cref="T:MyWebGrocer.Validation.ValidationPipeline`1"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="validation">The validation.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationPipeline`1.And(System.Func{`0,System.Boolean})">
            <summary>
            Ands the specified verify.
            </summary>
            <param name="verify">The verify.</param>
            <returns>ValidationPipeline&lt;T&gt;.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationPipeline`1.Throw``1">
            <summary>
            Throws this instance.
            </summary>
            <typeparam name="T1">The exception type</typeparam>
            <returns>T.</returns>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationPipeline`1.Throw``1(System.String)">
            <summary>
            Throws the specified user message.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <param name="userMessage">The user message.</param>
            <returns>T.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationPipeline`1.Throw``1(``0)">
            <summary>
            Throws the specified exception.
            </summary>
            <typeparam name="T1">The type of the t1.</typeparam>
            <param name="exception">The exception.</param>
            <returns>T.</returns>
        </member>
        <member name="P:MyWebGrocer.Validation.ValidationPipeline`1.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:MyWebGrocer.Validation.ValidationPipeline`1.Passed">
            <summary>
            Gets a value indicating whether this <see cref="T:MyWebGrocer.Validation.ValidationPipeline`1"/> is passed.
            </summary>
            <value><c>true</c> if passed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MyWebGrocer.Validation.ValidationPipelineEndpoint`1">
            <summary>
            Class ValidationPipelineEndpoint. This class cannot be inherited.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationPipelineEndpoint`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.ValidationPipelineEndpoint`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:MyWebGrocer.Validation.ValidationPipelineEndpoint`1.Passed">
            <summary>
            Gets a value indicating whether this <see cref="T:MyWebGrocer.Validation.ValidationPipelineEndpoint`1"/> is passed.
            </summary>
            <value><c>true</c> if passed; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MyWebGrocer.Validation.ValidationPipelineConnector`1">
            <summary>
            Class ValidationPipelineConnector. This class cannot be inherited.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Validation.ValidationPipelineConnector`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Validation.ValidationPipelineConnector`1"/> class.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:MyWebGrocer.Validation.ValidationPipelineConnector`1.Passed">
            <summary>
            Gets a value indicating whether this <see cref="T:MyWebGrocer.Validation.ValidationPipelineConnector`1"/> is passed.
            </summary>
            <value><c>true</c> if passed; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
