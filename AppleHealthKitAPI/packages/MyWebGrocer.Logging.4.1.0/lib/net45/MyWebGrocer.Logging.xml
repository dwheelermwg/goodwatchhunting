<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyWebGrocer.Logging</name>
    </assembly>
    <members>
        <member name="T:MyWebGrocer.Logging.Appender.AsyncAppender">
            <summary>
            A forwarding appender that queues the events first. And then forward
            to the attached appenders asynchronously.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Logging.Appender.AsyncAppender.DefaultQueueCapacity">
            <summary>
            The default event queue capacity.
            </summary>
            <seealso cref="P:MyWebGrocer.Logging.Appender.AsyncAppender.QueueCapacity"/>
        </member>
        <member name="F:MyWebGrocer.Logging.Appender.AsyncAppender.DefaultBatchSize">
            <summary>
            The default event batch size
            </summary>
            <seealso cref="P:MyWebGrocer.Logging.Appender.AsyncAppender.ForwardingBatchSize"/>
        </member>
        <member name="F:MyWebGrocer.Logging.Appender.AsyncAppender.MinQueueCapacity">
            <summary>
            The minimal accaptable queue capacity.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Logging.Appender.AsyncAppender.MinCapacityToBatchRatio">
            <summary>
            The minimal allowed queue capacity to batch size ratio.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Logging.Appender.AsyncAppender.DefaultBatchWaitTimeout">
            <summary>
            The default batch wait time.
            </summary>
            <seealso cref="P:MyWebGrocer.Logging.Appender.AsyncAppender.BatchWaitTimeout"/>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.AsyncAppender.ActivateOptions">
             <summary>
             Initialize the appender based on the options set
             </summary>
            
             <remarks>
             <para>
             This is part of the <see cref="T:log4net.Core.IOptionHandler" /> delayed object
             activation scheme. The <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> method must 
             be called on this object after the configuration properties have
             been set. Until <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> is called this
             object is in an undefined state and must not be used. 
             </para>
             <para>
             If any of the configuration properties are modified then 
             <see cref="M:log4net.Appender.AppenderSkeleton.ActivateOptions" /> must be called again.
             </para>
             </remarks>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.AsyncAppender.PreAppendCheck">
            <summary>
            Always return true;
            </summary>
            <returns>Always return true.</returns>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.AsyncAppender.Append(log4net.Core.LoggingEvent)">
            <summary>
            Add the <paramref name="loggingEvent"/> to the queue. If queue is
            full, error is reported and it waits for the queue to be available.
            </summary>
            <param name="loggingEvent">Event to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.AsyncAppender.Append(log4net.Core.LoggingEvent[])">
            <summary>
            Add all the events in <paramref name="loggingEvents"/> to the 
            queue. If queue doesn't have enough free capacity to hold all
            those events, error is reported and it waits for the queue to 
            be available.
            </summary>
            <param name="loggingEvents">Evnets to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.AsyncAppender.OnClose">
            <summary>
            Inform and wait for the asynchronous thread to end.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.AsyncAppender.Fix">
            <summary>
            Gets or sets a the fields that will be fixed in the event
            </summary>
            <value>
            The event fields that will be fixed before the event is queued.
            </value>
            <remarks>
            <para>
            The logging event needs to have certain thread specific values 
            captured before it can be queue for async logging. See 
            <see cref="P:log4net.Core.LoggingEvent.Fix"/> for details.
            </para>
            </remarks>
            <seealso cref="P:log4net.Core.LoggingEvent.Fix"/>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.AsyncAppender.ForwardingBatchSize">
            <summary>
            Gets and sets the number of events to forward to the attached 
            appenders in batch.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.AsyncAppender.BatchWaitTimeout">
            <summary>
            Gets and sets the seconds to wait for the events to fill the batch
            size. <see cref="T:MyWebGrocer.Logging.Appender.AsyncAppender"/> will strat to forward to the 
            attached appenders after the given time lapse regardless if the 
            number of events has reached the required batch size .
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.AsyncAppender.QueueCapacity">
            <summary>
            Gets and sets the event queue capacity. Once the this limit
            is reached. Events will be discarded.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.Appender.LoggingEventBuilder">
            <summary>
            Builder for constructing a new LoggingEvent instance. Copies an
            existing LoggingEvent, allowing certain properties to be modified.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.LoggingEventBuilder.#ctor(log4net.Core.LoggingEvent)">
            <summary>
            The constructor.
            </summary>
            <param name="copyFrom">The LoggingEvent to copy from.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.LoggingEventBuilder.ToLoggingEvent">
            <summary>
            Creates the new LoggingEvent object. This method should be called
            after setting the properties above.
            </summary>
            <returns>The new LoggingEvent object.</returns>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.LoggingEventBuilder.TimeStamp">
            <summary>
            When the event took place, in local time.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.LoggingEventBuilder.MessageObject">
            <summary>
            The event message.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.LoggingEventBuilder.Properties">
            <summary>
            Custom event properties.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.Appender.LoggingEventHelper">
            <summary>
            Logging related helper methods
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.LoggingEventHelper.IsReportingEvent(log4net.Core.LoggingEvent)">
            <summary>
            Helper method available for use by sub-classes.
            </summary>
            <param name="loggingEvent">Event</param>
            <returns>True if event is a reporting event</returns>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.LoggingEventHelper.ProccessDiagnosticInfoLoggingEvent(log4net.Core.LoggingEvent,System.DateTime@,System.Int32@,System.Int32@,System.Object@,System.Xml.Linq.XDocument@,System.String@)">
            <summary>
            Process a diagnostic info logging event, constructing the full details to be logged
            </summary>
            <param name="loggingEvent">A <see cref="T:log4net.Core.LoggingEvent"/></param>
            <param name="eventDateTime">The <see cref="T:System.DateTime"/> the event was logged on the server</param>
            <param name="applicationId">The logging application identifier</param>
            <param name="sessionId">The optional logging session identifier</param>
            <param name="messageObject">The message to log</param>
            <param name="additionalInfo">The additional information to log (metadata)</param>
            <param name="stackTrace">The stack trace</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.LoggingEventHelper.ProcessReportInfoLoggingEvent(log4net.Core.LoggingEvent,System.DateTime@,System.Int32@,System.Int32@,System.Int32@,System.String@,System.Xml.Linq.XDocument@)">
            <summary>
            Process a reporting info logging event, constructing the full details to be logged
            </summary>
            <param name="loggingEvent">A <see cref="T:log4net.Core.LoggingEvent"/></param>
            <param name="eventDateTime">The <see cref="T:System.DateTime"/> the event was logged on the server</param>
            <param name="applicationId">The logging application identifier</param>
            <param name="sessionId">The optional logging session identifier</param>
            <param name="message">The message to log</param>
            <param name="additionalInfo">The additional information to log (metadata)</param>
            <param name="eventTypeId">The event type identifier to log under</param>
        </member>
        <member name="T:MyWebGrocer.Logging.Appender.LogMessage">
            <summary>Gathers information about the session and adds it to the message.</summary>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.LogMessage.#ctor(System.Object,MyWebGrocer.Logging.ISessionInfo)">
            <summary>
            Log a message
            </summary>
            <param name="message">The message to log</param>
            <param name="sessionInfo">The <see cref="T:MyWebGrocer.Logging.ISessionInfo"/> information to log</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.LogMessage.ToString">
            <summary>
            Return a string representation of the <see cref="P:MyWebGrocer.Logging.Appender.LogMessage.ApplicationId"/>, <see cref="P:MyWebGrocer.Logging.Appender.LogMessage.SessionId"/> and <see cref="P:MyWebGrocer.Logging.Appender.LogMessage.Message"/>
            </summary>
            <returns>A string representation of the <see cref="T:MyWebGrocer.Logging.Appender.LogMessage"/></returns>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.LogMessage.ApplicationId">
            <summary>
            The application identifier
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.LogMessage.SessionId">
            <summary>
            The session identifier
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.LogMessage.Message">
            <summary>
            The message to log
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.Appender.LogMessage.Context">
            <summary>
            The context to log
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.Appender.SessionInfoAppender">
            <summary>
            A forwarding appender that augments all logging messages, including messages that
            originate from a MWG application, and messages that originate from a third-party
            tool. It wraps the message in a LogMessage object before passing it on, in order to
            add additional session information provided by an implementation of ISessionInfo.
            This appender should wrap all other appenders in the config file. When using the
            AsyncAppender, SessionInfoAppender should wrap AsyncAppender, which in turn
            should wrap the database appenders (DiagnosticDbAppender and ReportInfoDbAppender).
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.Appender.SessionInfoAppender.Append(log4net.Core.LoggingEvent)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Logging.DiagnosticEventNotification">
            <summary>
            This class contains diagnostic event information published by the QueuingAppender
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.EventNotification">
            <summary>
            Base class for event notifications published by the QueuingAppender
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.EventNotification.EventDateUtc">
            <summary>
            Date and time the event occurred in UTC
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.EventNotification.ApplicationId">
            <summary>
            The Application that recorded the event
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.EventNotification.SessionId">
            <summary>
            The session of the user that the event is for
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.EventNotification.ServerName">
            <summary>
            The server the event occurred on
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.EventNotification.Message">
            <summary>
            The event message
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.EventNotification.AdditionalInformation">
            <summary>
            Any additional information about the event
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.DiagnosticEventNotification.Level">
            <summary>
            The log level of the event
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.DiagnosticEventNotification.StackTrace">
            <summary>
            The stack trace at which the event occurred
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.DiagnosticMessage">
            <summary>
            Contains detailing information to log.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.DiagnosticMessage.#ctor(System.String,System.Int32,System.Nullable{System.DateTime},System.Object)">
            <summary>
            Initializes a new <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="sessionId">The id of the session if know, zero if this is not known.</param>
            <param name="eventUtcDate">The utc date / time when the event occurred.</param>
            <param name="additionalInformation">An object with additional information.  Its properties
            will be examined and included as metadata.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.DiagnosticMessage.#ctor(System.String,System.DateTime,System.Object)">
            <summary>
            Initializes a new <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="eventUtcDate">The utc date / time when the event occurred.</param>
            <param name="additionalInformation">An object with additional information.  Its properties
            will be examined and included as metadata.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.DiagnosticMessage.#ctor(System.String,System.Int32,System.Object)">
            <summary>
            Initializes a new <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/>.
            </summary>
            <param name="message">The message to log.</param>
            <param name="sessionId">The id of the session if know, zero if this is not known.</param>
            <param name="additionalInformation">An object with additional information.  Its properties
            will be examined and included as metadata.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.DiagnosticMessage.GetAdditionalInformationXml">
            <summary>
            Examines the <see cref="P:MyWebGrocer.Logging.DiagnosticMessage.AdditionalInformation"/> and captures its
            properties as an <see cref="T:System.Xml.Linq.XDocument"/>.
            </summary>
            <returns>An <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
        </member>
        <member name="M:MyWebGrocer.Logging.DiagnosticMessage.ToString">
            <summary>
            Outputs the objects values as a string.
            </summary>
            <returns>A <see cref="T:System.String"/> containing the object's state.</returns>
        </member>
        <member name="P:MyWebGrocer.Logging.DiagnosticMessage.Message">
            <summary>
            The message to log.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.DiagnosticMessage.EventUtcDate">
            <summary>
            The utc date / time when the event occurred.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.DiagnosticMessage.SessionId">
            <summary>
            The id of the session if know, zero if this is not known.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.DiagnosticMessage.AdditionalInformation">
            <summary>
            An object with additional information.  Its properties
            will be examined and included as metadata.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.ILog2">
            <summary>
            Interface used for logging diagnostics and shopping events.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Debug(System.String)">
            <summary>
            Logs a debug level message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Debug(System.String,System.Exception)">
            <summary>
            Logs a debug level message with an exception.
            </summary>
            <param name="ex">The exception to log</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Debug(System.String,System.Object)">
            <summary>
            Logs a debug message with some additional information to provide context.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Debug(System.String,System.Object,System.Exception)">
            <summary>
            Logs a debug message with some additional information to provide context
            and exception information.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Debug(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Logs a debug diagnostic message with exception information, used
            to provide a different date and session than would be normally collected.
            </summary>
            <param name="message">The <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/> to log.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Info(System.String)">
            <summary>
            Logs an info level message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Info(System.String,System.Exception)">
            <summary>
            Logs an info level message with an exception.
            </summary>
            <param name="ex">The exception to log</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Info(System.String,System.Object)">
            <summary>
            Logs an info message with some additional information to provide context.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Info(System.String,System.Object,System.Exception)">
            <summary>
            Logs an info message with some additional information to provide context
            and exception information.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Info(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Logs an info diagnostic message with exception information, used
            to provide a different date and session than would be normally collected.
            </summary>
            <param name="message">The <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/> to log.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Warn(System.String)">
            <summary>
            Logs a warning level message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Warn(System.String,System.Exception)">
            <summary>
            Logs a warning level message with an exception.
            </summary>
            <param name="ex">The exception to log</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Warn(System.String,System.Object)">
            <summary>
            Logs a warning message with some additional information to provide context.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Warn(System.String,System.Object,System.Exception)">
            <summary>
            Logs a warning message with some additional information to provide context
            and exception information.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Warn(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Logs a warning diagnostic message with exception information, used
            to provide a different date and session than would be normally collected.
            </summary>
            <param name="message">The <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/> to log.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Error(System.String)">
            <summary>
            Logs a error level message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Error(System.String,System.Exception)">
            <summary>
            Logs a error level message with an exception.
            </summary>
            <param name="ex">The exception to log</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Error(System.String,System.Object)">
            <summary>
            Logs a error message with some additional information to provide context.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Error(System.String,System.Object,System.Exception)">
            <summary>
            Logs a error message with some additional information to provide context
            and exception information.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Error(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Logs a error diagnostic message with exception information, used
            to provide a different date and session than would be normally collected.
            </summary>
            <param name="message">The <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/> to log.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Fatal(System.String)">
            <summary>
            Logs a fatal level message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Fatal(System.String,System.Exception)">
            <summary>
            Logs a fatal level message with an exception.
            </summary>
            <param name="ex">The exception to log</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Fatal(System.String,System.Object)">
            <summary>
            Logs a fatal message with some additional information to provide context.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Fatal(System.String,System.Object,System.Exception)">
            <summary>
            Logs a fatal message with some additional information to provide context
            and exception information.
            </summary>
            <param name="message">The message to log.</param>
            <param name="additionalInfo">The additional information.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Fatal(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Logs a fatal diagnostic message with exception information, used
            to provide a different date and session than would be normally collected.
            </summary>
            <param name="message">The <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/> to log.</param>
            <param name="ex">The exception to log.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.ILog2.Event(MyWebGrocer.Logging.IReportInfo)">
            <summary>
            Records an event which will be used in MWG Reporting.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:MyWebGrocer.Logging.LogLevel">
            <summary>
            Wraps the Log4Net Level for JSON serialization.  The Built in type for
            log4net is not friendly to JSON due to its constructors
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.LogLevel.#ctor">
            <summary>
            Create an empty instance of log level
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.LogLevel.#ctor(log4net.Core.Level)">
            <summary>
            Create an instance of the log level from the log4net level
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:MyWebGrocer.Logging.LogLevel.ToString">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Logging.LogLevel.Name">
            <summary>
            Gets the name of this level.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.LogLevel.Value">
            <summary>
            Gets the value of this level.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.LogLevel.DisplayName">
            <summary>
            Gets the display name of this level.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.IReportInfo">
            <summary>
            Interface implemented by objects which contain event data that
            is used in reporting.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.IReportInfo.EventTypeId">
            <summary>
            The type id of the event.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.IReportInfo.Message">
            <summary>
            Gets the message to log with the event.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.IReportInfo.TagName">
            <summary>
            Gets the element name for the root element.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.ISessionInfo">
            <summary>
            Implement this interface and then configure it in structuremap to allow the logging
            framework to pull out session data.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.ISessionInfo.ApplicationId">
            <summary>The id of the application which is running.</summary>
        </member>
        <member name="P:MyWebGrocer.Logging.ISessionInfo.SessionId">
            <summary>The user's Raiko session if available, or zero if none.</summary>
        </member>
        <member name="P:MyWebGrocer.Logging.ISessionInfo.Context">
            <summary>INTERNAL USE ONLY!  Provides context around the session.</summary>
            <remarks><see cref="T:MyWebGrocer.Web.Logging.SessionInfoBase"/> provides
            an implemention to use in web applications.</remarks>
        </member>
        <member name="T:MyWebGrocer.Logging.Log2">
            <summary>
            The <see cref="T:MyWebGrocer.Logging.ILog2"/> implementation
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.#ctor(log4net.ILog)">
            <summary>
            Initializes a new instance of <see cref="T:MyWebGrocer.Logging.Log2"/>.
            </summary>
            <param name="log">The log4net logger to wrap.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.#ctor(System.Type)">
            <summary>
            Constructor to create logger based on a specific type.
            Intended to be used in test code without StructureMap.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Debug(System.String)">
            <summary>
            Log as debug
            </summary>
            <param name="message">A message</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Debug(System.String,System.Exception)">
            <summary>
            Log as debug
            </summary>
            <param name="message">A message</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Debug(System.String,System.Object)">
            <summary>
            Log as debug
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Debug(System.String,System.Object,System.Exception)">
            <summary>
            Log as debug
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Debug(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Log as debug
            </summary>
            <param name="message">A <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/></param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Info(System.String)">
            <summary>
            Log as info
            </summary>
            <param name="message">A <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/></param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Info(System.String,System.Exception)">
            <summary>
            Log as info
            </summary>
            <param name="message">A <see cref="T:MyWebGrocer.Logging.DiagnosticMessage"/></param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Info(System.String,System.Object)">
            <summary>
            Log as info
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Info(System.String,System.Object,System.Exception)">
            <summary>
            Log as info
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Info(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Log as info
            </summary>
            <param name="message">A message</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Warn(System.String)">
            <summary>
            Log as warn
            </summary>
            <param name="message">A message</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Warn(System.String,System.Exception)">
            <summary>
            Log as warn
            </summary>
            <param name="message">A message</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Warn(System.String,System.Object)">
            <summary>
            Log as warn
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Warn(System.String,System.Object,System.Exception)">
            <summary>
            Log as warn
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Warn(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Log as warn
            </summary>
            <param name="message">A message</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Error(System.String)">
            <summary>
            Log as error
            </summary>
            <param name="message">A message</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Error(System.String,System.Exception)">
            <summary>
            Log as error
            </summary>
            <param name="message">A message</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Error(System.String,System.Object)">
            <summary>
            Log as error
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Error(System.String,System.Object,System.Exception)">
            <summary>
            Log as error
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Error(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Log as error
            </summary>
            <param name="message">A message</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Fatal(System.String)">
            <summary>
            Log as fatal
            </summary>
            <param name="message">A message</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Fatal(System.String,System.Exception)">
            <summary>
            Log as fatal
            </summary>
            <param name="message">A message</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Fatal(System.String,System.Object)">
            <summary>
            Log as fatal
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Fatal(System.String,System.Object,System.Exception)">
            <summary>
            Log as fatal
            </summary>
            <param name="message">A message</param>
            <param name="additionalInfo">Additional metadata to log</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Fatal(MyWebGrocer.Logging.DiagnosticMessage,System.Exception)">
            <summary>
            Log as fatal
            </summary>
            <param name="message">A message</param>
            <param name="ex">The exception</param>
        </member>
        <member name="M:MyWebGrocer.Logging.Log2.Event(MyWebGrocer.Logging.IReportInfo)">
            <summary>
            Log as a reporting event
            </summary>
            <param name="message">A message</param>
        </member>
        <member name="T:MyWebGrocer.Logging.LogConstants">
            <summary>
            Provides logging constants.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Logging.LogConstants.ExceptionXmlTag">
            <summary>
            Outer metadata xml tag for ILog exceptions
            </summary>
        </member>
        <member name="F:MyWebGrocer.Logging.LogConstants.MetadataRootNode">
            <summary>
            Outer metadata xml tag for all ILog2 diagnostic messages, including exceptions
            </summary>
        </member>
        <member name="F:MyWebGrocer.Logging.LogConstants.EventXmlTag">
            <summary>
            Outer metadata xml tag for events
            </summary>
        </member>
        <member name="F:MyWebGrocer.Logging.LogConstants.ReportEvent">
            <summary>
            Log level used for logging reporting events.
            </summary>
            <remarks>int.MaxValue - 1 is used as log4net uses int.MaxValue for the "Off" level.
            <see cref="F:log4net.Core.Level.Off"/>.</remarks>
        </member>
        <member name="M:MyWebGrocer.Logging.LogConstants.RegisterReportLevel">
            <summary>
            Configures log4net to use the MWG custom level for reporting.  Must be done before
            log4net.Configuration is performed!
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.LoggingConfiguration">
            <summary>
            Configuration section implementing IConfiguration for Logging.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.LoggingConfiguration.Log4NetConfigFile">
            <summary>
            Relative path from app base to file containing log4net config section.
            Leave blank to use app/web.config or log4net.config.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.LoggingConfiguration.Log4NetConfigPath">
            <summary>
            If Log4NetConfigFile is specified return full path to this file. If not specified, look for
            &lt;log4net&gt; section in app/web.config. If section found, return full path to app/web.config.
            Otherwise, assume file is log4net.config in app/web base, and return full path to that.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.LoggingRegistry">
            <summary>
            IOC registry for logging
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.LoggingRegistry.#ctor">
            <summary>
            Create an instance of the registry using the default configuration section "MyWebGrocer.Logging"
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.ReportEventNotification">
            <summary>
            This class contains report event information published by the QueuingAppender.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.ReportEventNotification.EventTypeId">
            <summary>
            The ID of the event type being recorded
            </summary>
        </member>
        <member name="T:MyWebGrocer.Logging.ReportInfo">
            <summary>
            Base class which can be used for implementing <see cref="T:MyWebGrocer.Logging.IReportInfo"/>.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.ReportInfo.EventTypeId">
            <summary>
            The unique event type id.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.ReportInfo.Message">
            <summary>
            The message to log.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Logging.ReportInfo.TagName">
            <summary>
            The tag name to use as the root element.
            </summary>
            <remarks>Override this to provide your own root element name.</remarks>
        </member>
        <member name="T:MyWebGrocer.Logging.XDocumentExtensions">
            <summary>
            Extensions to the <see cref="T:System.Xml.Linq.XDocument"/> type which help with logging
            concerns.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.XDocumentExtensions.AddRequestMetadata(System.Xml.Linq.XContainer,MyWebGrocer.Logging.Appender.LogMessage)">
            <summary>
            Adds Asp.net request information (headers, form values and some context) to the
            <paramref name="container"/>.
            </summary>
            <param name="container">The container where the meta data should be added.</param>
            <param name="logMessage">The log message containing the additional information.</param>
        </member>
        <member name="M:MyWebGrocer.Logging.XDocumentExtensions.CleanKeyName(System.String)">
            <summary>Removes characters that would be invalid as an xml element name and replaces with _.</summary>
            <param name="keyName">The name to clean.</param>
            <returns>A <see cref="T:System.String"/> with invalid characters replaced with _.</returns>
        </member>
        <member name="T:MyWebGrocer.Logging.XmlSerializer">
            <summary>
            Takes an object and creates an <see cref="T:System.Xml.Linq.XDocument"/> with
            it's property values, or simply the value if a primitive type or string.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Logging.XmlSerializer.SerializeAsXml(System.Object,System.String)">
            <summary>
            Takes a given object creates a metadata xml snippet
            with all it's public properties, or the value if a primitive or string is passed.
            </summary>
            <param name="obj">The object to serialize.</param>
            <param name="rootNodeName">The name of the root node for the xml.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument"/>.</returns>
        </member>
    </members>
</doc>
