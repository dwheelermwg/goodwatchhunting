<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyWebGrocer.Web.Mvc</name>
    </assembly>
    <members>
        <member name="T:MyWebGrocer.Web.Mvc.ApiController">
            <summary>
            All MyWebGrocer WebApi controller classes should derive this class. It extends
            the <see cref="T:System.Web.Http.ApiController"/> class with functionality to interact easily with the <see cref="T:MyWebGrocer.Logging.ILog2"/> logging
            framework and defines the Exception Filter to use.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.ApiController.#ctor(MyWebGrocer.Logging.ILog2)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.ApiController"/>
            </summary>
            <param name="log"></param>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.ApiController.Logger">
            <summary>
            <see cref="T:MyWebGrocer.Logging.ILog2"/> instance to use for logging
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.AnyOfAggregateAuthorizationProvider">
            <summary>
            An <see cref="T:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider"/> that only requires one of the set of providers 
            to validate the request successfully
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider">
            <summary>
            This class allows you to have more than one authorization provider. When the token authorization provider isn't enough
            then you should use this class to add the token authorization provider along with your more specific providers
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider">
            <summary>
            A authorization provider
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider.AuthorizeRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Determine if current request can be served.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider"/>
            </summary>
            <param name="authorizationProviders">The list of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>s</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider.Add(MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider)">
            <summary>
            Adds a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/> to the set
            </summary>
            <param name="authorizationProvider"><see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/></param>
            <returns>This</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider.AuthorizeRequest(System.Net.Http.HttpRequestMessage)">
            <inheritdoc cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider.AuthorizationProviders">
            <summary>
            The set of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>s to check
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.AnyOfAggregateAuthorizationProvider.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.AnyOfAggregateAuthorizationProvider"/>
            </summary>
            <param name="authorizationProviders">The list of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>s</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.AnyOfAggregateAuthorizationProvider.AuthorizeRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            If applicable to the route, this will authorize the request if one of 
            the <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>s can validate the request
            </summary>
            <remarks>
            Only the last authorization exception will be tracked and thrown, even if 
            multiple providers fail authorization, so the authoriziation providers 
            should be set up in specific order
            </remarks>
            <param name="requestMessage"><see cref="T:System.Net.Http.HttpRequestMessage"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationProviderExtensions">
            <summary>
            Extension methods related to <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/>s
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationProviderExtensions.HasRoute(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Verifies if the route is applicable to the request
            </summary>
            <param name="requestMessage">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="routeName">The name of the route</param>
            <returns>True if the routeName matches the request</returns>
            <exception cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException">Thrown when the route doesn't exist</exception>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationProviderExtensions.IsWildCardAuthorizationProvider(MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider)">
            <summary>
            Determines whether a authorization provider is wild card authorization provider.
            </summary>
            <param name="provider">The provider.</param>
            <returns><c>true</c> if the provider is a wild card provider</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAnyOfAggregateAuthorizationProvider">
            <summary>
            An <see cref="T:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider"/> that implements <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/> which requires
            only one of the providers to validate the request successfully (when the route is applicable)
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider">
            <summary>
            A route based <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider.IsInRoute(System.Net.Http.HttpRequestMessage)">
            <summary>
            Check if route matches this provider
            </summary>
            <param name="requestMessage">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>True if this provider is configured for the current route</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAnyOfAggregateAuthorizationProvider.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAnyOfAggregateAuthorizationProvider"/>
            </summary>
            <param name="routeName">The route name</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAnyOfAggregateAuthorizationProvider.#ctor(System.String,System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAnyOfAggregateAuthorizationProvider"/>
            </summary>
            <param name="routeName">The route name</param>
            <param name="authorizationProviders">The list of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAnyOfAggregateAuthorizationProvider.AuthorizeRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            If the current route is applicable to this provider, it checks all <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/> to 
            ensure all providers authorize the request
            </summary>
            <param name="requestMessage"><see cref="T:System.Net.Http.HttpRequestMessage"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAnyOfAggregateAuthorizationProvider.IsInRoute(System.Net.Http.HttpRequestMessage)">
            <inheritdoc cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAnyOfAggregateAuthorizationProvider.RouteName">
            <summary>
            The route to which this is applicable
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAnyOfAggregateAuthorizationProvider">
            <summary>
            An <see cref="T:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider"/> that implements <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/> which requires
            only one of the providers to validate the request successfully; all routes are applicable
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAnyOfAggregateAuthorizationProvider.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAnyOfAggregateAuthorizationProvider"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAnyOfAggregateAuthorizationProvider.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAnyOfAggregateAuthorizationProvider"/>
            </summary>
            <param name="authorizationProviders">The list of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>s</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAnyOfAggregateAuthorizationProvider.IsInRoute(System.Net.Http.HttpRequestMessage)">
            <summary>
            All routes are applicable
            </summary>
            <param name="requestMessage">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>Always true since this is a wildcard route provider</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Binders.BindingContextExtensionException">
            <summary>
            Exception thrown by <see cref="T:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtensionException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtensionException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message explaining what happened</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtensionException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">A message explaining what happened</param>
            <param name="innerException">The inner exception that caused this exception to be thrown</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtensionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor
            </summary>
            <param name="serializationInfo">The serialization info</param>
            <param name="streamingContext">The streaming context</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Caching.ApiOutputCacheKeyGenerator">
            <summary>
            Extends the default WebApi OutputCache key generation to add support for additional MWG constraints
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Caching.ApiOutputCacheKeyGenerator.MakeCacheKey(System.Web.Http.Controllers.HttpActionContext,System.Net.Http.Headers.MediaTypeHeaderValue,System.Boolean)">
            <summary>
            Override the default cache key generation. Ensuring that path is in the key and adding support for the Accept-Language header
            </summary>
            <returns>The cache key</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache">
            <summary>
            Apply the MWG Configurable Cache Provider to OutputCaching
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache.#ctor(MyWebGrocer.Caching.IConfigurableCacheFactory,MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache.RemoveStartsWith(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache.ConfigurationIdentifier">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Caching.ConfigurableApiOutputCache.AllKeys">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.CheckIfLocal">
            <summary>
            Check if an IP is local
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.CheckIfLocal.Check(System.String)">
            <summary>
            Check if IP is local
            </summary>
            <param name="ip">The IP to check</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Compression.BaseCompressor">
            <summary>
            Base compressor for compressing streams.
            </summary>
            <remarks>
            Taken from the package Microsoft.AspNet.WebApi.MessageHandlers.Compression (Ove Andersen)
            https://github.com/azzlack/Microsoft.AspNet.WebApi.MessageHandlers.Compression
            Licensed http://www.apache.org/licenses/LICENSE-2.0
            which is based on the work by: 
                Ben Foster (http://benfoster.io/blog/aspnet-web-api-compression)
                Kiran Challa (http://blogs.msdn.com/b/kiranchalla/archive/2012/09/04/handling-compression-accept-encoding-sample.aspx)
            </remarks>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Compression.ICompressor">
            <summary>
            Interface for stream compressors.
            </summary>
            <remarks>
            Original taken from the package Microsoft.AspNet.WebApi.MessageHandlers.Compression (Ove Andersen)
            https://github.com/azzlack/Microsoft.AspNet.WebApi.MessageHandlers.Compression
            Licensed http://www.apache.org/licenses/LICENSE-2.0
            </remarks>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ICompressor.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>The compressed content length.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ICompressor.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>An async void.</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Compression.ICompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.BaseCompressor.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates the compression stream.
            </summary>
            <param name="output">The output stream.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.BaseCompressor.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates the decompression stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.BaseCompressor.Compress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Compresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>An async void.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.BaseCompressor.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompresses the specified source stream onto the destination stream.
            </summary>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns>An async void.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.BaseCompressor.Pump(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the specified input stream onto the output stream.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
            <returns>An async void.</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Compression.BaseCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler">
            <summary>
            Message handler for handling gzip/deflate requests/responses on a <see cref="T:System.Net.Http.HttpClient"/>.
            </summary>
            <remarks>
            Original taken from the package Microsoft.AspNet.WebApi.MessageHandlers.Compression (Ove Andersen)
            https://github.com/azzlack/Microsoft.AspNet.WebApi.MessageHandlers.Compression
            Licensed http://www.apache.org/licenses/LICENSE-2.0
            </remarks>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler._contentSizeThreshold">
            <summary>
            The content size threshold before compressing.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler.httpContentOperations">
            <summary>
            The HTTP content operations
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler.#ctor(MyWebGrocer.Web.Mvc.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler"/> class.
            </summary>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler.#ctor(System.Int32,MyWebGrocer.Web.Mvc.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler"/> class.
            </summary>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,MyWebGrocer.Web.Mvc.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler"/> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,System.Int32,MyWebGrocer.Web.Mvc.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler"/> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            send as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send to the server.</param>
            <param name="cancellationToken">A cancellation token to cancel operation.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />. The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler.CompressRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Compresses the content.
            </summary>
            <param name="request">The request.</param>
            <returns>An async void.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler.DecompressResponse(System.Net.Http.HttpResponseMessage)">
            <summary>
            Decompresses the response.
            </summary>
            <param name="response">The response.</param>
            <returns>An async void.</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Compression.ClientCompressionHandler.Compressors">
            <summary>
            Gets the compressors.
            </summary>
            <value>The compressors.</value>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Compression.HttpContentOperations">
            <summary>
            Helper methods for operating on <see cref="T:System.Net.Http.HttpContent"/> instances.
            </summary>
            <remarks>
            Original taken from the package Microsoft.AspNet.WebApi.MessageHandlers.Compression (Ove Andersen)
            https://github.com/azzlack/Microsoft.AspNet.WebApi.MessageHandlers.Compression
            Licensed http://www.apache.org/licenses/LICENSE-2.0
            </remarks>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.HttpContentOperations.DecompressContent(System.Net.Http.HttpContent,MyWebGrocer.Web.Mvc.Compression.ICompressor)">
            <summary>
            Decompresses the compressed HTTP content.
            </summary>
            <param name="compressedContent">The compressed HTTP content.</param>
            <param name="compressor">The compressor.</param>
            <returns>The decompressed content.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.HttpContentOperations.CopyHeaders(System.Net.Http.HttpContent,System.Net.Http.HttpContent)">
            <summary>
            Copies the HTTP headers onto the new response.
            </summary>
            <param name="input">The input.</param>
            <param name="output">The output.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler">
            <summary>
            Message handler for handling gzip/deflate requests/responses on a <see cref="T:System.Web.Http.HttpServer"/>.
            </summary>
            <remarks>
            Original taken from the package Microsoft.AspNet.WebApi.MessageHandlers.Compression (Ove Andersen)
            https://github.com/azzlack/Microsoft.AspNet.WebApi.MessageHandlers.Compression
            Licensed http://www.apache.org/licenses/LICENSE-2.0
            </remarks>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler._contentSizeThreshold">
            <summary>
            The content size threshold before compressing.
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler._httpContentOperations">
            <summary>
            The HTTP content operations
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler._enableCompression">
            <summary>
            Custom delegate to enable or disable compression.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler.#ctor(MyWebGrocer.Web.Mvc.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler"/> class.
            </summary>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler.#ctor(System.Int32,MyWebGrocer.Web.Mvc.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler"/> class.
            </summary>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,MyWebGrocer.Web.Mvc.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler"/> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,System.Int32,MyWebGrocer.Web.Mvc.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler"/> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler.#ctor(System.Net.Http.HttpMessageHandler,System.Int32,System.Predicate{System.Net.Http.HttpRequestMessage},MyWebGrocer.Web.Mvc.Compression.ICompressor[])">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler"/> class.
            </summary>
            <param name="innerHandler">The inner handler.</param>
            <param name="contentSizeThreshold">The content size threshold before compressing.</param>
            <param name="enableCompression">Custom delegate to enable or disable compression.</param>
            <param name="compressors">The compressors.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            send as an asynchronous operation.
            </summary>
            <param name="request">The HTTP request message to send to the server.</param>
            <param name="cancellationToken">A cancellation token to cancel operation.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1" />. The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler.CompressResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
            <summary>
            Compresses the content.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
            <returns>An async void.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler.DecompressRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Decompresses the request.
            </summary>
            <param name="request">The request.</param>
            <returns>An async void.</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Compression.ServerCompressionHandler.Compressors">
            <summary>
            Gets the compressors.
            </summary>
            <value>The compressors.</value>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Container.StructureMapHttpRequestMessageHandler">
            <summary>
            Create a Per-Request instance of <see cref="T:StructureMap.IContainer"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Container.StructureMapHttpRequestMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Container.StructureMapMvcScopeModule">
            <summary>
            A HttpModule which ensures proper creating of a StructureMap Nested Container for the request
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Container.StructureMapMvcScopeModule.Dispose">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Container.StructureMapMvcScopeModule.Init(System.Web.HttpApplication)">
            <summary>
            Wire up the BeginRequest and EndRequest events to ensure proper creation and disposal of the Nested Container
            </summary>
            <param name="context">The current <see cref="T:System.Web.HttpApplication"/> context</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Container.StructureMapResolver">
            <summary>
            StructureMap Dependency Resolver for ASP.Net MVC and MVC WebApi
            </summary>
            <remarks>
            NOTE: Responsibility of resolution of dependencies has been given to the <see cref="T:MyWebGrocer.Container.ContainerScope"/> implementation.  
            
            The "wiring up" of the dependency resolver for WebApi is in the StartupMvcApi in the MyWebGrocer.Web.Mvc.Owin library
            
            The MVC "request scope" has been given to <see cref="T:MyWebGrocer.Web.Mvc.Container.StructureMapMvcScopeModule"/>.
            </remarks>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Container.StructureMapResolver.BeginScope">
            <summary>
            Starts a resolution scope.
            </summary>
            <returns>The dependency scope.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Container.StructureMapResolver.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Container.StructureMapResolver.System#Web#Http#Dependencies#IDependencyScope#GetService(System.Type)">
            <summary>
            Retrieves a service from the scope.
            </summary>
            <param name="serviceType">The service to be retrieved.</param>
            <returns>The retrieved service.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Container.StructureMapResolver.GetServices(System.Type)">
            <summary>
            Retrieves a collection of services from the scope.
            </summary>
            <param name="serviceType">The collection of services to be retrieved.</param>
            <returns>The retrieved collection of services.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Container.StructureMapResolver.DoGetAllInstances(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Container.StructureMapResolver.DoGetInstance(System.Type,System.String)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.HttpMethodNotAllowedException">
            <summary>
            Thrown to indicate the Http response should be Method Not Allowed
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException">
            <summary>
            MWG implementation of <see cref="T:System.Web.Http.HttpResponseException"/>.
            
            All custom MWG HTTP response exceptions should inherit from this base class.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException.#ctor(System.Net.HttpStatusCode)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Web.Http.HttpResponseException" /> class.
            </summary>
            <param name="statusCode">The status code of the response.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException"/> class.
            </summary>
            <param name="statusCode">The status code of the response.</param>
            <param name="message">The message to send to the client.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException.#ctor(System.Net.HttpStatusCode,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException"/> class.
            </summary>
            <param name="statusCode">The status code of the response.</param>
            <param name="exceptionCode">The code for this exception type</param>
            <param name="message">The message to send to the client.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException.StatusCode">
            <summary>Gets a <see cref="T:System.Net.HttpStatusCode"/> to return</summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException.ExceptionCode">
            <summary>Gets a code that describes the current exception</summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpMethodNotAllowedException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpMethodNotAllowedException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpMethodNotAllowedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpMethodNotAllowedException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpMethodNotAllowedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpMethodNotAllowedException"/> class.
            </summary>
            <param name="code">The code that describes the error.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.MwgExceptionLogger">
            <summary>
            Logs WebAPI Exceptions to ILog2
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.MwgExceptionLogger.Log(System.Web.Http.ExceptionHandling.ExceptionLoggerContext)">
            <summary>
            When overridden in a derived class, logs the exception synchronously.
            </summary>
            <param name="context">The exception logger context.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.MediaTypeFormatterException">
            <summary>
            Thrown when there is an issue locating an appropriate MediaTypeFormatter
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.MediaTypeFormatterException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.MediaTypeFormatterException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.MediaTypeFormatterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.MediaTypeFormatterException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.MediaTypeFormatterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.MediaTypeFormatterException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.MediaTypeFormatterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.MediaTypeFormatterException"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Extractors.IRouteToRouteTemplateMatcher">
            <summary>
            Matches the current route to a route template
            </summary>
            <remarks>
            The only reason this is needed is because the OWIN context does not 
            have request.GetRouteData() as early as we expect in our current implementations
            </remarks>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Extractors.IRouteToRouteTemplateMatcher.IsMatch(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Determines whether the specified request is matched to the route templates specified.
            </summary>
            <param name="request">The request.</param>
            <param name="routeTemplate">The route template.</param>
            <returns><c>true</c> if the specified request is matched to the template; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Extractors.IRouteToRouteTemplateMatcher.AnyMatch(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines whether the specified request is matched to one of the route templates specified.
            </summary>
            <param name="request">The request.</param>
            <param name="routeTemplates">The route templates.</param>
            <returns><c>true</c> if the specified request is matched to a template; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Extractors.IUserHostAddressRequestMessageExtractor">
            <summary>
            Extract user host address (IP)
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Extractors.IUserHostAddressRequestMessageExtractor.ExtractHostAddress(System.Net.Http.HttpRequestMessage)">
            <summary>
            Get the a specific IP address
            </summary>
            <returns>The user's IP</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.ApiLoggingSessionInfo">
            <summary>
            API Session Info
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.ApiLoggingSessionInfo.#ctor(System.Int32)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.ApiLoggingSessionInfo"/> instance
            </summary>
            <param name="applicationId">The application's identifier</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.ApiLoggingSessionInfo.#ctor(MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.ApiLoggingSessionInfo"/> instance
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.ApiLoggingSessionInfo.ApplicationId">
            <summary>
            The Application identifier
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.ApiLoggingSessionInfo.SessionId">
            <summary>
            API's do not have numeric sessions
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.ApiLoggingSessionInfo.Context">
            <summary>
            The Global context to add to log messages
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.ApiRequestLogInfo">
            <summary>
            A <see cref="T:MyWebGrocer.Logging.ReportInfo"/> instance for logging API Request data
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Logging.ApiReportInfo">
            <summary>
            A base API Reporting event
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Logging.ApiReportInfo.#ctor(MyWebGrocer.Logging.UniversalParameters,System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Logging.ApiReportInfo"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Logging.ApiReportInfo.With(System.Net.Http.HttpResponseMessage,System.String,System.Double)">
            <summary>
            Set the data to log with the message
            </summary>
            <param name="response">The <see cref="T:System.Net.Http.HttpResponseMessage"/> to log data from</param>
            <param name="responseBody">The response body to log</param>
            <param name="responseTimeMilliseconds">The time for the message to be processed and returned</param>
            <returns>A new <see cref="T:MyWebGrocer.Web.Mvc.ApiRequestLogInfo"/></returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Logging.ApiReportInfo.ApiParameters">
            <summary>
            The set of API parameters
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.ApiRequestLogInfo.#ctor(System.String,MyWebGrocer.Logging.UniversalParameters,System.Net.Http.HttpRequestMessage,System.Int32,System.String)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.ApiRequestLogInfo"/>
            </summary>
            <param name="message">The log message</param>
            <param name="universalParameters">The set of universal parameters to log</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> of the request</param>
            <param name="requestBody">The body of the HTTP request; defaults to null</param>
            <param name="applicationId">The application identifier</param>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.ApiRequestLogInfo.EventTypeId">
            <summary>
            Web API Request Event Type ID is 4
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.ApiRequestLogInfo.Message">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.ApiRequestLogInfo.ApplicationId">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.AuthorizationHandler">
            <summary>
            A <see cref="T:System.Net.Http.DelegatingHandler"/> which applies the <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.AuthorizationHandler.#ctor(MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider,MyWebGrocer.Logging.ILog2)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.AuthorizationHandler"/>
            </summary>
            <param name="authorizationProvider">The <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/></param>
            <param name="logger">The <see cref="T:MyWebGrocer.Logging.ILog2"/> logger</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.AuthorizationHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            The task action
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="cancellationToken">The current <see cref="T:System.Threading.CancellationToken"/></param>
            <returns>The task for continuation</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.ProviderCollection">
            <summary>
            The collection of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>s
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.IProviderCollection">
            <summary>
            A collection of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>s
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.IProviderCollection.Clear">
            <summary>
            Clear the collection
            </summary>
            <returns>The cleared collection</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.IProviderCollection.Add(MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider)">
            <summary>
            Add an <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/> to the collection
            </summary>
            <param name="authorizationProvider">The <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/> instance to add</param>
            <returns>The collection</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.ProviderCollection.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.ProviderCollection"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.ProviderCollection.Clear">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.ProviderCollection.Add(MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.ProviderCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.ProviderCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthenticateException">
            <summary>
            Thrown when Authentication fails
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthenticateException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthenticateException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthenticateException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthenticateException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthenticateException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthenticateException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthenticateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthenticateException"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthorizeException">
            <summary>
            Thrown when Authorization fails
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthorizeException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthorizeException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthorizeException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthorizeException"/>
            </summary>
            <param name="message">The exception message</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthorizeException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthorizeException"/>
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthorizeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.FailedToAuthorizeException"/>
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/></param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder">
            <summary>
            Builds route based authorization providers
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder.ConfigureWildcardProviders(System.Action{MyWebGrocer.Web.Mvc.Authorization.IProviderCollection})">
            <summary>
            Configure providers for all routes
            </summary>
            <param name="setupProviders">Setup the providers</param>
            <returns>A <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder"/> instance</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder.ConfigureRouteProviders(System.String,System.Action{MyWebGrocer.Web.Mvc.Authorization.IProviderCollection})">
            <summary>
            Configure providers for a specific route
            </summary>
            <param name="routeName">Name of the route</param>
            <param name="setupProviders">Setup the providers</param>
            <returns>A <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder"/> instance</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder.BuildProvider">
            <summary>
            Build the <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder"/>
            </summary>
            <returns>A <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder"/> instance</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.LocalIPAuthorizationProvider">
            <summary>
            Local IP Authorization Provider
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.LocalIPAuthorizationProvider.AuthorizeRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Authorize the current request
            </summary>
            <param name="requestMessage">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.PassThroughAuthorizationProvider">
            <summary>
            A <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/> that allows all requests
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.PassThroughAuthorizationProvider.AuthorizeRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Authorize the current <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
            <param name="requestMessage">The <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.RouteAuthorizationBuilder">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.RouteAuthorizationBuilder.#ctor(MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.RouteAuthorizationBuilder"/>
            </summary>
            <param name="apiConfiguration"></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.RouteAuthorizationBuilder.ConfigureWildcardProviders(System.Action{MyWebGrocer.Web.Mvc.Authorization.IProviderCollection})">
            <summary>
            Configure the wildcard providers
            </summary>
            <param name="setupProviders">The <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IProviderCollection"/> to configure</param>
            <returns>This instance</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.RouteAuthorizationBuilder.ConfigureRouteProviders(System.String,System.Action{MyWebGrocer.Web.Mvc.Authorization.IProviderCollection})">
            <summary>
            Configure the route providers
            </summary>
            <param name="routeName">The route name</param>
            <param name="setupProviders">The <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IProviderCollection"/></param>
            <returns>This instance</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.RouteAuthorizationBuilder.BuildProvider">
            <summary>
            Get the current <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>
            </summary>
            <returns>The current <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/></returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationAdapter">
            <summary>
            RouteAggregateAuthorizationProvider is an adapter to authorize using <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/>
            It looks for the first provider that <see cref="M:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider.IsInRoute(System.Net.Http.HttpRequestMessage)"/> and authorizes with that one 
            only. If no authorized providers are found, then you ARE authorized. If this is not desired, add an <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/>
            that matches all routes as the last one that always throws
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationAdapter.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationAdapter"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationAdapter.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationAdapter"/>
            </summary>
            <param name="authorizationProviders">The collection of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/>s</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationAdapter.Add(MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider)">
            <summary>
            Add the <paramref name="authorizationProvider"/>
            </summary>
            <param name="authorizationProvider">The <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/> to add</param>
            <returns>This instance</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAuthorizationAdapter.AuthorizeRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            Authorize the current request
            </summary>
            <param name="requestMessage">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAggregateAuthorizationProvider">
            <summary>
            An <see cref="T:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider"/> that implements <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/> which requires
            all of the providers to validate the request successfully (when the route is applicable)
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAggregateAuthorizationProvider.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAggregateAuthorizationProvider"/>
            </summary>
            <param name="routeName">The route name</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAggregateAuthorizationProvider.#ctor(System.String,System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAggregateAuthorizationProvider"/>
            </summary>
            <param name="routeName">The route name</param>
            <param name="authorizationProviders">The list of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>s</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAggregateAuthorizationProvider.AuthorizeRequest(System.Net.Http.HttpRequestMessage)">
            <summary>
            If the current route is applicable to this provider, it checks all <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/> to 
            ensure all providers authorize the request
            </summary>
            <param name="requestMessage"><see cref="T:System.Net.Http.HttpRequestMessage"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAggregateAuthorizationProvider.IsInRoute(System.Net.Http.HttpRequestMessage)">
            <inheritdoc cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Authorization.Route.RouteAggregateAuthorizationProvider.RouteName">
            <summary>
            The route to which this is applicable
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException">
            <summary>
            Thrown when a route does not exist
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException"/>
            </summary>
            <param name="routeName">The route name</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException.#ctor(System.String,System.Exception)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException"/>
            </summary>
            <param name="routeName">The route name</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.RouteDoesNotExistException"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAggregateAuthorizationProvider">
            <summary>
            An <see cref="T:MyWebGrocer.Web.Mvc.Authorization.AggregateAuthorizationProvider"/> that implements <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationProvider"/> which requires
            all of the providers to validate the request successfully; all routes are applicable
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAggregateAuthorizationProvider.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAggregateAuthorizationProvider"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAggregateAuthorizationProvider.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAggregateAuthorizationProvider"/>
            </summary>
            <param name="authorizationProviders">The list of <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/>s</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Authorization.Route.WildcardAggregateAuthorizationProvider.IsInRoute(System.Net.Http.HttpRequestMessage)">
            <summary>
            All routes are applicable
            </summary>
            <param name="requestMessage">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>True for all routes, since this is a wildcard route provider</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension">
            <summary>
            Extend the built in <see cref="T:System.Web.Http.ValueProviders.IValueProvider"/>'s to support smarter binding possibilities
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension.GetAttemptedValue(System.Web.Http.ModelBinding.ModelBindingContext,System.String)">
            <summary>
            Return the AttemptedValue from the <see cref="T:System.Web.Http.ValueProviders.IValueProvider"/> or null
            </summary>
            <param name="bindingContext">The current <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/></param>
            <param name="query">The key to locate a value for</param>
            <returns>The AttemptedValue or null</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension.GetRawValue(System.Web.Http.ModelBinding.ModelBindingContext,System.String)">
            <summary>
            Return the RawValue from the <see cref="T:System.Web.Http.ValueProviders.IValueProvider"/> or null
            </summary>
            <param name="bindingContext">The current <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/></param>
            <param name="query">The key to locate a value for</param>
            <returns>The RawValue or null</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension.GetValueAsArray(System.Web.Http.ModelBinding.ModelBindingContext,System.String)">
            <summary>
            Get values of the query from the <see cref="T:System.Web.Http.ValueProviders.IValueProvider"/> as an array
            </summary>
            <param name="bindingContext">The current <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/></param>
            <param name="query">The key to locate a value for</param>
            <returns>An array of its values, or empty array if not present</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension.GetIntegerValue(System.Web.Http.ModelBinding.ModelBindingContext,System.String)">
            <summary>
            Get an integer value from the <paramref name="key"/>
            </summary>
            <param name="bindingContext">The current <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/></param>
            <param name="key">The key to locate a value for</param>
            <returns>The integer value</returns>
            <exception cref="T:MyWebGrocer.Web.Mvc.Binders.BindingContextExtensionException">When parsing fails</exception>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension.GetIntegerValue(System.Web.Http.ModelBinding.ModelBindingContext,System.String,System.Int32)">
            <summary>
            Get an integer value from the <paramref name="key"/>
            </summary>
            <param name="bindingContext">The current <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/></param>
            <param name="key">The key to locate a value for</param>
            <param name="defaultValue">The default value to use</param>
            <returns>The integer value or <paramref name="defaultValue"/></returns>
            <exception cref="T:MyWebGrocer.Web.Mvc.Binders.BindingContextExtensionException">When parsing fails and value is not null or white space</exception>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension.GetBooleanValue(System.Web.Http.ModelBinding.ModelBindingContext,System.String)">
            <summary>
            Get a boolean value from the <paramref name="key"/>
            </summary>
            <param name="bindingContext">The current <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/></param>
            <param name="key">The key to locate a value for</param>
            <returns>True if [1, yes, <see cref="F:System.Boolean.TrueString"/>], False for [0, no, <see cref="F:System.Boolean.FalseString"/>]</returns>
            <exception cref="T:MyWebGrocer.Web.Mvc.Binders.BindingContextExtensionException">When parsing fails</exception>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension.GetBooleanValue(System.Web.Http.ModelBinding.ModelBindingContext,System.String,System.Boolean)">
            <summary>
            Get a boolean value from the <paramref name="key"/>
            </summary>
            <param name="bindingContext">The current <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/></param>
            <param name="key">The key to locate a value for</param>
            <param name="defaultValue">The default value to use</param>
            <returns>True if [1, yes, or <paramref name="defaultValue"/> is true], False for [0, no, or <paramref name="defaultValue"/> is false]</returns>
            <exception cref="T:MyWebGrocer.Web.Mvc.Binders.BindingContextExtensionException">When parsing fails and value is not null or white space</exception>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BindingContextExtension.ToBooleanString(System.String)">
            <summary>
            converts a string of "1" "0" "yes" or "no" (case-insensitive) to the equivalent boolean true/false string
            </summary>
            <param name="value">The value to convert</param>
            <returns><see cref="F:System.Boolean.TrueString"/>, <see cref="F:System.Boolean.FalseString"/>, or <paramref name="value"/></returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Binders.BooleanBinder">
            <summary>
            Custom Boolean binder which handles [1, 0, yes, no
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BooleanBinder.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
            <summary>
            Get this binder by <see cref="T:System.Web.Http.HttpConfiguration"/>
            </summary>
            <param name="configuration">The current <see cref="T:System.Web.Http.HttpConfiguration"/></param>
            <param name="modelType">The model type</param>
            <returns>This model binder if it supports the <paramref name="modelType"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BooleanBinder.GetBinder(System.Web.Http.ModelBinding.ModelBindingContext)">
            <summary>
            Get this binder by <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/>
            </summary>
            <param name="bindingContext">The current <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/></param>
            <returns>This model binder if the <paramref name="bindingContext"/> supports this type</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Binders.BooleanBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
            <summary>
            Bind the model
            </summary>
            <param name="actionContext">The current <see cref="T:System.Web.Http.Controllers.HttpActionContext"/></param>
            <param name="bindingContext">The current <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext"/></param>
            <returns>True if successful</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Compression.CompressedContent">
            <summary>
            Represents compressed HTTP content.
            </summary>
            <remarks>
            Original taken from the package Microsoft.AspNet.WebApi.MessageHandlers.Compression (Ove Andersen)
            https://github.com/azzlack/Microsoft.AspNet.WebApi.MessageHandlers.Compression
            Licensed http://www.apache.org/licenses/LICENSE-2.0
            </remarks>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Compression.CompressedContent._originalContent">
            <summary>
            The original content
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Compression.CompressedContent._compressor">
            <summary>
            The compressor
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.CompressedContent.#ctor(System.Net.Http.HttpContent,MyWebGrocer.Web.Mvc.Compression.ICompressor)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Compression.CompressedContent"/> class.
            </summary>
            <param name="content">The content.</param>
            <param name="compressor">The compressor.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.CompressedContent.TryComputeLength(System.Int64@)">
            <summary>
            Determines whether the HTTP content has a valid length in bytes.
            </summary>
            <param name="length">The length in bytes of the HTTP content.</param>
            <returns>Returns <see cref="T:System.Boolean" />.true if <paramref name="length" /> is a valid length; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.CompressedContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <summary>
            serialize to stream as an asynchronous operation.
            </summary>
            <param name="stream">The target stream.</param>
            <param name="context">Information about the transport (channel binding token, for example). This parameter may be null.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task" />.The task object representing the asynchronous operation.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.CompressedContent.CopyHeaders">
            <summary>
            Adds the headers.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.CompressedContent.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.Net.Http.HttpContent" /> and optionally disposes of the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Compression.DeflateCompressor">
            <summary>
            Compressor for handling <c>deflate</c> encodings.
            </summary>
            <remarks>
            Original taken from the package Microsoft.AspNet.WebApi.MessageHandlers.Compression (Ove Andersen)
            https://github.com/azzlack/Microsoft.AspNet.WebApi.MessageHandlers.Compression
            Licensed http://www.apache.org/licenses/LICENSE-2.0
            </remarks>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.DeflateCompressor.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates the compression stream.
            </summary>
            <param name="output">The output stream.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.DeflateCompressor.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates the decompression stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Compression.DeflateCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Compression.GZipCompressor">
            <summary>
            Compressor for handling <c>gzip</c> encodings.
            </summary>
            <remarks>
            Original taken from the package Microsoft.AspNet.WebApi.MessageHandlers.Compression (Ove Andersen)
            https://github.com/azzlack/Microsoft.AspNet.WebApi.MessageHandlers.Compression
            Licensed http://www.apache.org/licenses/LICENSE-2.0
            </remarks>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.GZipCompressor.CreateCompressionStream(System.IO.Stream)">
            <summary>
            Creates the compression stream.
            </summary>
            <param name="output">The output stream.</param>
            <returns>The compressed stream.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Compression.GZipCompressor.CreateDecompressionStream(System.IO.Stream)">
            <summary>
            Creates the decompression stream.
            </summary>
            <param name="input">The input stream.</param>
            <returns>The decompressed stream.</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Compression.GZipCompressor.EncodingType">
            <summary>
            Gets the encoding type.
            </summary>
            <value>The encoding type.</value>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Controller">
            <summary>
            All MyWebGrocer MVC controller classes should derive this class. It extends
            the MS Controller class with functionality to interact easily with the <see cref="T:MyWebGrocer.Logging.ILog2"/> logging
            framework and defines the Exception Filter to use.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Controller.#ctor(MyWebGrocer.Logging.ILog2)">
            <summary>
            Create a new instance of a <see cref="T:MyWebGrocer.Web.Mvc.Controller"/>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Controller.Logger">
            <summary>
            <see cref="T:MyWebGrocer.Logging.ILog2"/> instance to use for logging
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Extractors.RouteToRouteTemplateMatcher">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Extractors.RouteToRouteTemplateMatcher.IsMatch(System.Net.Http.HttpRequestMessage,System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Extractors.RouteToRouteTemplateMatcher.AnyMatch(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Filters.MvcCultureFilterAttribute">
            <summary>
            A MVC culture filter
            <remarks>ONLY VALID FOR MVC, NOT WEB API APPLICATIONS</remarks>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.MvcCultureFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            The action to perform when the this action filter executes
            </summary>
            <param name="filterContext">The current <see cref="T:System.Web.Http.Controllers.HttpActionContext"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Filters.MvcExceptionFilterAttribute">
            <summary>
            Handle exceptions thrown by a <see cref="T:MyWebGrocer.Web.Mvc.Controller"/>, returning a <see cref="T:System.Web.Mvc.HttpStatusCodeResult"/>.
            <remarks>Specifically this filter looks for a <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException"/> and pulls the status code out of that exception</remarks>
            <remarks>This should be used in conjunction with the <see cref="T:MyWebGrocer.Web.Mvc.Filters.LogExceptionsFilterAttribute"/> as this filter does not log</remarks>
            <remarks>ONLY VALID FOR MVC, NOT WEB API APPLICATIONS</remarks>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.MvcExceptionFilterAttribute.OnException(System.Web.Mvc.ExceptionContext)">
            <summary>
            Action to perform when an exception is encountered
            </summary>
            <param name="filterContext">The current <see cref="T:System.Web.Mvc.ExceptionContext"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Filters.MvcLocalIpAuthorizationFilterAttribute">
            <summary>
            A local IP authorization filter
            <remarks>We only support Local IP authorization for MVC applications</remarks>
            <remarks>ONLY VALID FOR MVC, NOT WEB API APPLICATIONS</remarks>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.MvcLocalIpAuthorizationFilterAttribute.OnAuthorization(System.Web.Mvc.AuthorizationContext)">
            <summary>
            Handles authorization for MVC
            <remarks>Only local IP authorization is supported</remarks>
            </summary>
            <param name="filterContext">The <see cref="T:System.Web.Mvc.AuthorizationContext"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Filters.MvcLoggingFilterAttribute">
            <summary>
            A MVC logging filter
            <remarks>ONLY VALID FOR MVC, NOT WEB API APPLICATIONS</remarks>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.MvcLoggingFilterAttribute.#ctor(MyWebGrocer.Logging.ILog2,MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration)">
            <summary>
            Logging filter attribute
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.MvcLoggingFilterAttribute.OnActionExecuting(System.Web.Mvc.ActionExecutingContext)">
            <summary>
            Called by the ASP.NET MVC framework before the action method executes.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.MvcLoggingFilterAttribute.OnResultExecuted(System.Web.Mvc.ResultExecutedContext)">
            <summary>
            Called by the ASP.NET MVC framework after the action method executes.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Filters.MvcLoggingFilterAttribute.Logger">
            <summary>
            Logging diagnostics
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Filters.MvcLoggingFilterAttribute.ApiConfiguration">
            <summary>
            The Api Configuration element
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Filters.MvcLoggingFilterAttribute.Stopwatch">
            <summary>
            Logging stop watch
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Filters.MwgHttpResponseExceptionFilterAttribute">
            <summary>
            Handles all <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException"/>s
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.MwgHttpResponseExceptionFilterAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)">
            <summary>
            Raises the exception event.
            </summary>
            <param name="actionExecutedContext">The context for the action.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeContentNegotiator">
            <summary>
            A <see cref="T:System.Net.Http.Formatting.IContentNegotiator"/> for mapping media types to models
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeContentNegotiator.#ctor(StructureMap.IContainer)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeContentNegotiator"/>
            </summary>
            <param name="container">The current <see cref="T:StructureMap.IContainer"/> to use for IoC/DI</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeContentNegotiator.Negotiate(System.Type,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
            <summary>
            Negotiate the current <paramref name="request"/> for all provided <paramref name="formatters"/> trying to find a match for the <paramref name="type"/>
            </summary>
            <param name="type">The type to find a mapper for</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="formatters">The list of configured formatters</param>
            <returns>A <see cref="T:System.Net.Http.Formatting.ContentNegotiationResult"/></returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1">
            <summary>
            A <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase"/> which maps between Model objects and MediaType objects prior to serializing
            the result with the specified <see cref="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1.BaseFormatter"/>
            </summary>
            <typeparam name="T">The <see cref="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1.BaseFormatter"/> type, which are themselves <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>s
            (either <see cref="T:System.Net.Http.Formatting.JsonMediaTypeFormatter"/> or <see cref="T:System.Net.Http.Formatting.XmlMediaTypeFormatter"/> instances)</typeparam>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase">
            <summary>
            Abstract <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/> which maps between Model objects and MediaType objects prior to serializing the result 
            </summary>
            <remarks>
            Don't implement this directly - use the generic <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1"/>
            </remarks>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase},StructureMap.IContainer)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase"/>
            </summary>
            <param name="mediaTypeMappers">The collection of <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/>s</param>
            <param name="container">The current IoC/DI container</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.MediaTypeFromRequest(System.Net.Http.HttpContent)">
            <summary>
            Get the MediaType from the current <see cref="T:System.Net.Http.HttpContent"/>
            </summary>
            <param name="content">The current <see cref="T:System.Net.Http.HttpContent"/></param>
            <returns>The MediaType string</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.CanReadType(System.Type)">
            <summary>
            All types will be valid, since <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeContentNegotiator"/> handles this logic and selects the appropriate <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase"/>
            </summary>
            <param name="type">The <see cref="T:System.Type"/></param>
            <returns>true</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.CanWriteType(System.Type)">
            <summary>
            All types will be valid, since <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeContentNegotiator"/> handles this logic and selects the appropriate <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase"/>
            </summary>
            <param name="type">The <see cref="T:System.Type"/></param>
            <returns>true</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.Container">
            <summary>
            Dependency container
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.RequestMessage">
            <summary>
            The current <see cref="T:System.Net.Http.HttpRequestMessage"/>, set by our <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeContentNegotiator"/>
            </summary>
            <remarks>THIS IS ONLY USABLE ON THE RESPONSE GENERATION</remarks>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.MediaTypeMapper">
            <summary>
            The current <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/>, set by our <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeContentNegotiator"/>
            </summary>
            <remarks>THIS IS ONLY USABLE ON THE RESPONSE GENERATION</remarks>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.BaseMediaType">
            <summary>
            The base media type string, e.g. "xml" or "json"
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.AllowEnumerableTypes">
            <summary>
            Whether or not this formatter can handle enumerable types
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.SupportedMappers">
            <summary>
            The supported <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/> for this formatter
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterBase.RequestCultureManager">
            <summary>
            The current <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.IRequestCultureManager"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase},StructureMap.IContainer)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1"/>
            </summary>
            <param name="mediaTypeMappers">The collection of <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/> instances</param>
            <param name="container">The current IoC/DI container</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
            <summary>
            Map incoming MediaType objects to Model objects
            </summary>
            <remarks>NOTE: this happens on requests, not responses, so you can't use the per-instance MediaTypeMapper or RequestMessage properties of this class</remarks>
            <returns>The <see cref="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1.BaseFormatter"/> ReadFromStreamAsync task</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1.WriteToStreamAsync(System.Type,System.Object,System.IO.Stream,System.Net.Http.HttpContent,System.Net.TransportContext)">
            <summary>
            Map outgoing Model objects to MediaType objects
            </summary>
            <returns>The <see cref="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1.BaseFormatter"/> WriteToStreamAsync task</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1.ConfigureMappings">
            <summary>
            Configure the SupportedMediaTypes for this formatter instance
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatter`1.BaseFormatter">
            <summary>
            The base <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterForXml">
            <summary>
            Serialize to XML, using the configured collection of <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterForXml.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase},StructureMap.IContainer)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterForXml"/>
            </summary>
            <param name="mediaTypeMappers">The collection of <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/> which may perform the mapping</param>
            <param name="container">The current IoC/DI container</param>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterForXml.BaseMediaType">
            <summary>
            The base MediaType
            <example>json</example>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterForXml.AllowEnumerableTypes">
            <summary>
            XML serialization cannot handle IEnumerable[T], therefore any attempt to do so will result in a 406 Not Acceptable
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterForJson">
            <summary>
            Serialize to JSON, using the configured collection of <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterForJson.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase},StructureMap.IContainer)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterForJson"/>
            </summary>
            <param name="mediaTypeMappers">The collection of <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/>s</param>
            <param name="container">The current IoC/DI container</param>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Formatters.MediaTypeFormatterForJson.BaseMediaType">
            <summary>
            The base MediaType
            <example>json</example>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.CustomModelValidator">
            <summary>
            Defines a custom model validator
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.CustomModelValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.CustomModelValidator"/>
            </summary>
            <param name="metadata">The <see cref="T:System.Web.Mvc.ModelMetadata"/></param>
            <param name="controllerContext">The current <see cref="P:MyWebGrocer.Web.Mvc.CustomModelValidator.ControllerContext"/> for the request</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.CustomModelValidator.GetModelValidator(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext)">
            <summary>
            Return the model validator
            </summary>
            <param name="metadata">The <see cref="T:System.Web.Mvc.ModelMetadata"/></param>
            <param name="context">The <see cref="P:MyWebGrocer.Web.Mvc.CustomModelValidator.ControllerContext"/></param>
            <returns>A new <see cref="T:MyWebGrocer.Web.Mvc.CustomModelValidator.CompositeModelValidator"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.CustomModelValidator.GetClientValidationRules">
            <summary>
            Retrieve the Model's <see cref="T:System.Web.Mvc.ModelClientValidationRule"/>'s
            </summary>
            <returns>The Model's <see cref="T:System.Web.Mvc.ModelClientValidationRule"/>'s</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.CustomModelValidator.Validate(System.Object)">
            <summary>
            Validate the model
            </summary>
            <param name="container">The container to validate</param>
            <returns>The <see cref="T:System.Web.Mvc.ModelValidationResult"/>'s</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.CustomModelValidator.CreateSubPropertyName(System.String,System.String)">
            <summary>
            Create a sub property name
            </summary>
            <param name="prefix">The prefix</param>
            <param name="propertyName">The property name</param>
            <returns>The <paramref name="propertyName"/> with the <paramref name="prefix"/></returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.CustomModelValidator.ControllerContext">
            <summary>
            Current controller context
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.CustomModelValidator.IsRequired">
            <summary>
            Flag indicating if the value is required
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.CustomModelValidator.Metadata">
            <summary>
            The model's <see cref="T:System.Web.Mvc.ModelMetadata"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.DerivedTypeModelBinder">
            <summary>
            An enhanced version of DefaultModelBinder which can handle a list of an abstract type
            without throwing a <see cref="T:System.MissingMethodException"/>"Cannot create an abstract class".
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.DerivedTypeModelBinder.GetValue``1(System.Web.Mvc.ModelBindingContext,System.String)">
            <summary>
            Helper method for custom model binders.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="bindingContext">
            </param>
            <param name="key">
            </param>
            <returns>
            The get value.
            </returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.DerivedTypeModelBinder.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Bind the model
            </summary>
            <param name="controllerContext">The current <see cref="T:System.Web.Mvc.ControllerContext"/></param>
            <param name="bindingContext">The current <see cref="T:System.Web.Mvc.ModelBindingContext"/></param>
            <returns><see cref="T:System.Object"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.DerivedTypeModelBinder.GetDerivedModelType(System.Web.Mvc.ModelBindingContext,System.Type)">
            <summary>
            Get a derived model type
            </summary>
            <param name="bindingContext">The current <see cref="T:System.Web.Mvc.ModelBindingContext"/></param>
            <param name="modelType">The current model type</param>
            <returns>The base model type</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.DerivedTypeModelBinder.OnModelUpdated(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            The action to perform when the model is updated
            </summary>
            <param name="controllerContext">The current <see cref="T:System.Web.Mvc.ControllerContext"/></param>
            <param name="bindingContext">The current <see cref="T:System.Web.Mvc.ModelBindingContext"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.HttpBadRequestException">
            <summary>
            Thrown to indicate the Http response should be Bad Request
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpBadRequestException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpBadRequestException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpBadRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpBadRequestException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpBadRequestException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpBadRequestException"/> class.
            </summary>
            <param name="code">The code that describes the error.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.HttpConflictException">
            <summary>
            Thrown to indicate the Http response should be Conflict
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpConflictException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpConflictException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpConflictException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpConflictException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpConflictException"/> class.
            </summary>
            <param name="code">The code that describes the error.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.HttpForbiddenException">
            <summary>
            Thrown to indicate the Http response should be Forbidden
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpForbiddenException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpForbiddenException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpForbiddenException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpForbiddenException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpForbiddenException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpForbiddenException"/> class.
            </summary>
            <param name="code">The code that describes the error.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.HttpInternalServerErrorException">
            <summary>
            Thrown to indicate the Http response should be Internal Server Error
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpInternalServerErrorException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpInternalServerErrorException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpInternalServerErrorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpInternalServerErrorException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpInternalServerErrorException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpInternalServerErrorException"/> class.
            </summary>
            <param name="code">The code that describes the error.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.HttpNotFoundException">
            <summary>
            Thrown to indicate the Http response should be Not Found
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpNotFoundException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpNotFoundException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpNotFoundException"/> class.
            </summary>
            <param name="code">The code that describes the error.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.HttpUnauthorizedException">
            <summary>
            Thrown to indicate the Http response should be Unauthorized
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpUnauthorizedException.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpUnauthorizedException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpUnauthorizedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpUnauthorizedException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.HttpUnauthorizedException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpUnauthorizedException"/> class.
            </summary>
            <param name="code">The code that describes the error.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.InvalidQueryStringParameterException">
            <summary>
            Thrown when a query string variable is invalid or missing 
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.InvalidQueryStringParameterException.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.InvalidQueryStringParameterException"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Filters.CultureFilterAttribute">
            <summary>
            NOTE: this is not the ideal place to set the culture for the controller, issues could arise
            around action filter ordering, etc.  The better place would be to find a seam in the MVC ControllerHandler if possible.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.CultureFilterAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
            <summary>
            The action to perform when the this action filter executes
            </summary>
            <param name="actionContext">The current <see cref="T:System.Web.Http.Controllers.HttpActionContext"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Handlers.DiagnosticsHandler">
            <summary>
            Add the ability to request diagnostics data as part of your response
            <remarks>Include "mwg-diagnostic" as a header to receive diagnostics data returned in the same header field</remarks>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.DiagnosticsHandler.#ctor(MyWebGrocer.Logging.ILog2,MyWebGrocer.Web.Mvc.Status.IStatusAssemblyRetriever,MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Handlers.DiagnosticsHandler"/>
            </summary>
            <param name="logger">The <see cref="T:MyWebGrocer.Logging.ILog2"/> instance</param>
            <param name="statusAssemblyRetriever">The <see cref="T:MyWebGrocer.Web.Mvc.Status.IStatusAssemblyRetriever"/></param>
            <param name="authorizationProvider">The <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IAuthorizationProvider"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.DiagnosticsHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            The task
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> token</param>
            <returns>The task for continuation</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Handlers.HttpErrorHandler">
            <summary>
            The <see cref="T:MyWebGrocer.Web.Mvc.Handlers.HttpErrorHandler"/> transforms <see cref="T:System.Web.Http.HttpError"/> of BadRequest to <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.HttpBadRequestException"/> responses
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.HttpErrorHandler.#ctor(MyWebGrocer.Logging.ILog2)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Web.Mvc.Handlers.HttpErrorHandler"/> class.
            </summary>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.HttpErrorHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Handlers.LoggingHandler">
            <summary>
            Log the current request data as a ApiRequest (EventType 4)
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.LoggingHandler.#ctor(MyWebGrocer.Logging.ILog2,MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Handlers.LoggingHandler"/>
            </summary>
            <param name="log">The <see cref="T:MyWebGrocer.Logging.ILog2"/> logger</param>
            <param name="apiConfiguration">The <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.LoggingHandler.#ctor(MyWebGrocer.Logging.ILog2,MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration,System.Action{MyWebGrocer.Web.Mvc.ApiRequestLogInfo})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Handlers.LoggingHandler"/>
            </summary>
            <param name="log">The <see cref="T:MyWebGrocer.Logging.ILog2"/> logger</param>
            <param name="apiConfiguration">The <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration"/></param>
            <param name="previewLogInfo">The <see cref="T:MyWebGrocer.Web.Mvc.ApiRequestLogInfo"/> preview</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.LoggingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            The task
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> token</param>
            <returns>The task for continuation</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Handlers.UnhandledExceptionHandler">
            <summary>
            An exception handler for un-handled low level MVC/WebApi that re-throws the exception when the request is local
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.UnhandledExceptionHandler.Handle(System.Web.Http.ExceptionHandling.ExceptionHandlerContext)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HtmlHelperExtension">
            <summary>
            Html Helper Extensions
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HtmlHelperExtension.LabelFor``2(System.Web.Mvc.HtmlHelper{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Helper extension method for rendering a label tag for the specified control,
            optionally with specified text. If text==null, this is identical to the built-in
            MVC helper, except that the id value is generated correctly, with square brackets
            replaced by underscores.
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="htmlHelper"></param>
            <param name="expression"></param>
            <param name="text"></param>
            <param name="htmlAttributes"></param>
            <returns>Label HTML</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HtmlHelperExtension.IsValidIdCharacter(System.Char)">
            <summary>
            Check if a character is valid
            </summary>
            <param name="c"></param>
            <returns>true if valid</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HtmlHelperExtension.IsAllowableSpecialCharacter(System.Char)">
            <summary>
            Checking whether the character belongs to special characters allowed for an id
            </summary>
            <param name="c"></param>
            <returns>true if character is allowed</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HtmlHelperExtension.GenerateIdFromName(System.String,System.String)">
            <summary>
            Method to generate the ID from name. This is a corrected version
            of the method of the same name in System.Web.Mvc.HtmlHelper.
            (The System version does not replace square brackets.)
            </summary>
            <param name="name"></param>
            <param name="dotReplacement"></param>
            <returns>ID string</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HttpRequestBaseExtensions">
            <summary>
            Extensions for <see cref="T:System.Web.HttpRequestBase"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HttpRequestBaseExtensions.GetUserHostAddress(System.Web.HttpRequestBase)">
            <summary>
            Lookup the user's host address
            </summary>
            <returns>User host address (IP)</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HttpRequestMessageExtensions">
            <summary>
            Extensions for <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HttpRequestMessageExtensions.GetAuthorizationToken(System.Net.Http.HttpRequestMessage)">
            <summary>
            Retrieve the Authorization header value as a <see cref="T:System.Guid"/>
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/> instance</param>
            <returns>The Authorization <see cref="T:System.Guid"/> or an empty <see cref="T:System.Guid"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HttpRequestMessageExtensions.GetRouteDataString(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Get a route value by <paramref name="key"/>
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/> instance</param>
            <param name="key">The route key</param>
            <returns>The route value for the specified <paramref name="key"/> or null</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HttpRequestMessageExtensions.GetRouteValue``1(System.Net.Http.HttpRequestMessage,System.String)">
            <summary>
            Get a route value for a specified <paramref name="key"/>
            </summary>
            <typeparam name="T">The object to extract</typeparam>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="key">The key to get a value for</param>
            <returns>An instance of the value</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HttpRequestMessageExtensions.LinkForPage(System.Net.Http.HttpRequestMessage,System.String,System.Int32)">
            <summary>
            Get link from current request, with page offset changed to a new value
            </summary>
            <param name="request">current request</param>
            <param name="pageOffsetQueryName">name of the page offset query, e.g. "skip", in the request URI</param>
            <param name="newPageOffset">new value for page offset</param>
            <returns>link targeting the new page</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HttpRouteCollectionExtensions">
            <summary>
            Extend the <see cref="T:System.Web.Http.HttpRouteCollection"/> object
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HttpRouteCollectionExtensions.MapConfigurableHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
            <summary>
            Add a configurable <see cref="T:System.Web.Http.Routing.IHttpRoute"/> to the <see cref="T:System.Web.Http.HttpRouteCollection"/>
            </summary>
            <param name="routes">Current <see cref="T:System.Web.Http.HttpRouteCollection"/></param>
            <param name="name">Name of the route</param>
            <param name="routeTemplate">The route template</param>
            <returns>A <see cref="T:System.Web.Http.Routing.IHttpRoute"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HttpRouteCollectionExtensions.MapConfigurableHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
            <summary>
            Add a configurable <see cref="T:System.Web.Http.Routing.IHttpRoute"/> to the <see cref="T:System.Web.Http.HttpRouteCollection"/>
            </summary>
            <param name="routes">Current <see cref="T:System.Web.Http.HttpRouteCollection"/></param>
            <param name="name">Name of the route</param>
            <param name="routeTemplate">The route template</param>
            <param name="defaults">The defaults for the route</param>
            <returns>A <see cref="T:System.Web.Http.Routing.IHttpRoute"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HttpRouteCollectionExtensions.MapConfigurableHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Object)">
            <summary>
            Add a configurable <see cref="T:System.Web.Http.Routing.IHttpRoute"/> to the <see cref="T:System.Web.Http.HttpRouteCollection"/>
            </summary>
            <param name="routes">Current <see cref="T:System.Web.Http.HttpRouteCollection"/></param>
            <param name="name">Name of the route</param>
            <param name="routeTemplate">The route template</param>
            <param name="dataTokens">The data tokens</param>
            <param name="defaults">The defaults for the route</param>
            <param name="constraints">The constraints for the route</param>
            <returns>A <see cref="T:System.Web.Http.Routing.IHttpRoute"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HttpRouteCollectionExtensions.MapConfigurableHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
            <summary>
            Add a configurable <see cref="T:System.Web.Http.Routing.IHttpRoute"/> to the <see cref="T:System.Web.Http.HttpRouteCollection"/>
            </summary>
            <param name="routes">Current <see cref="T:System.Web.Http.HttpRouteCollection"/></param>
            <param name="name">Name of the route</param>
            <param name="routeTemplate">The route template</param>
            <param name="dataTokens">The data tokens</param>
            <param name="defaults">The defaults for the route</param>
            <param name="constraints">The constraints for the route</param>
            <param name="handler">Handlers for the route</param>
            <returns>A <see cref="T:System.Web.Http.Routing.IHttpRoute"/></returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.AggregateLinkProvider`1">
            <summary>
            Create a list of links from a number of different <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILinkProvider`1"/>'s
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.ILinkProvider`1">
            <summary>
            Encapsulates a linkable model with requirements for it to become a linked resource
            </summary>
            <typeparam name="T">Model to be linkable</typeparam>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.ILinkProvider`1.GetLinksFor(`0,System.Net.Http.HttpRequestMessage)">
            <summary>
            Get links for specific instance <typeparamref name="T"/>
            </summary>
            <param name="instance">The instance to get links for</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>A collection of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>'s</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.AggregateLinkProvider`1.#ctor(MyWebGrocer.Web.Mvc.HyperMedia.ILinkProvider{`0}[])">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.AggregateLinkProvider`1"/>
            </summary>
            <param name="linkProviders">The collection of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILinkProvider`1"/>s</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.AggregateLinkProvider`1.GetLinksFor(`0,System.Net.Http.HttpRequestMessage)">
            <summary>
            Get the links
            </summary>
            <param name="instance">The source instance to get links for</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>A collection of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>'s</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1">
            <summary>
            A link provider that reads from the MyWebGrocer.Api
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1.#ctor(MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1"/>
            </summary>
            <param name="apiConfiguration">The <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1.GetLinksFor(`0,System.Net.Http.HttpRequestMessage)">
            <summary>
            Get the links for the <paramref name="instance"/>
            </summary>
            <param name="instance">The instance to get links for</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>A collection of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>'s</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1.GetRouteValues(`0)">
            <summary>
            Get the route values
            </summary>
            <returns>A dictionary of Route variables</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1.GetQueryString(`0)">
            <summary>
            Get the query string values
            </summary>
            <returns>A dictionary of Query String variables</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1.Rel">
            <summary>
            The Rel value
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1.RouteName">
            <summary>
            The route name
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1.TemplatePlaceholders">
            <summary>
            Route path placeholders
            </summary>
            <value>The placeholders.</value>
            <remarks>templated link only</remarks>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1.TemplateQueries">
            <summary>
            Optional query string parameters for client to fill in
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink">
            <summary>
            A linked resource
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.ILink.Uri">
            <summary>
            The link URI
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.ILink.Rel">
            <summary>
            Describes the link
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.ILink.Placeholders">
            <summary>
            Route path placeholders
            </summary>
            <remarks>templated link only</remarks>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.ILink.Queries">
            <summary>
            Optional query string parameters
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.LinkExtensions">
            <summary>
            Extensions for <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.LinkExtensions.ToLink(MyWebGrocer.NamedUri)">
            <summary>
            Convert a <see cref="T:MyWebGrocer.NamedUri"/> to an <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>
            </summary>
            <param name="uri">The <see cref="T:MyWebGrocer.NamedUri"/></param>
            <returns>An <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/></returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.LinksMediaType">
            <summary>
            A Media type for returning <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>'s
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.LinksMediaType.Links">
            <summary>
            Get the <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>'s
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.PagingMediaTypeLinkProvider">
            <summary>
            Link provider for media types that implement <see cref="T:MyWebGrocer.Web.Mvc.MediaTypes.IPagingMediaType"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.LinkProvider`1">
            <summary>
            Link helper functionality
            </summary>
            <typeparam name="T">The instance to provide links for</typeparam>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.HyperMedia.LinkProvider`1.SelfLinkKey">
            <summary>
            Expose the self link key, "self"
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.LinkProvider`1.CreateSelfLink(System.String,System.Object,System.Object,System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a link to self
            </summary>
            <param name="routeName">The route name to create a 'self' link for</param>
            <param name="routeValues">The current route values</param>
            <param name="queryStringParameters">The curren tquery string params</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>An instance of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.LinkProvider`1.CreateLink(System.String,System.String,System.Object,System.Object,System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a link
            </summary>
            <param name="relation">link relationship</param>
            <param name="routeName">The route name to create a link for</param>
            <param name="routeValues">The current route values</param>
            <param name="queryStringParameters">The curren tquery string params</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>An instance of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.LinkProvider`1.CreateLink(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Object,System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a link to self
            </summary>
            <param name="relation">The link relation</param>
            <param name="routeName">The route name to create a 'self' link for</param>
            <param name="routeValues">The current route values</param>
            <param name="queryStringParameters">The curren tquery string params</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>An instance of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.LinkProvider`1.CreateLink(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a link to self
            </summary>
            <param name="relation">The link relation</param>
            <param name="routeName">The route name to create a 'self' link for</param>
            <param name="routeValues">The current route values</param>
            <param name="queryStringParameters">The current query string params</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>An instance of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.LinkProvider`1.CreateLink(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String},System.Object,System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a link to self
            </summary>
            <param name="relation">The link relation</param>
            <param name="routeName">The route name to create a 'self' link for</param>
            <param name="routeValues">The current route values</param>
            <param name="queryStringParameters">The current query string parameters</param>
            <param name="templatePlaceholders">The route path template placeholders without the curly brackets. <c>null</c> if none.</param>
            <param name="templateQueries">The template queries.</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>An instance of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.LinkProvider`1.CreateLink(System.String,System.String,System.Web.Routing.RouteValueDictionary,System.Web.Routing.RouteValueDictionary,System.Collections.Generic.IEnumerable{System.String},System.Object,System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a link to self
            </summary>
            <param name="relation">The link relation</param>
            <param name="routeName">The route name to create a 'self' link for</param>
            <param name="routeValues">The current route values</param>
            <param name="queryStringParameters">The current query string parameters</param>
            <param name="templatePlaceholders">The route path template placeholders without the curly brackets. <c>null</c> if none.</param>
            <param name="templateQueries">The template queries.</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>An instance of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.LinkProvider`1.GetLinksFor(`0,System.Net.Http.HttpRequestMessage)">
            <summary>
            Get a collection of links for a given instance <typeparamref name="T"/>
            </summary>
            <param name="instance">The instance</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>A collection of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>'s</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.PagingMediaTypeLinkProvider.GetLinksFor(MyWebGrocer.Web.Mvc.MediaTypes.IPagingMediaType,System.Net.Http.HttpRequestMessage)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.PagingMediaTypeLinkExtensions">
            <summary>
            Extension methods for <see cref="T:MyWebGrocer.Web.Mvc.MediaTypes.IPagingMediaType"/>s and the <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.PagingMediaTypeLinkProvider"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.PagingMediaTypeLinkExtensions.AddNavigationLinks(MyWebGrocer.Web.Mvc.MediaTypes.IPagingMediaType,System.Net.Http.HttpRequestMessage)">
            <summary>
            Adds the navigation links to a <see cref="T:MyWebGrocer.Web.Mvc.MediaTypes.IPagingMediaType"/> instance
            </summary>
            <param name="pagingMediaType"><see cref="T:MyWebGrocer.Web.Mvc.MediaTypes.IPagingMediaType"/> instance.</param>
            <param name="message">The <see cref="T:System.Net.Http.HttpRequestMessage"/>.</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageLinkProvider">
            <summary>
            A link provider to use for paging
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageLinkProvider.GetLinksFor(MyWebGrocer.Collections.Page,System.Net.Http.HttpRequestMessage)">
            <summary>
            Get links for a specific page and request
            </summary>
            <param name="instance">The <see cref="T:MyWebGrocer.Collections.Page"/> instance</param>
            <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage"/> instance</param>
            <returns>A list of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>s for the page</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageLinkProvider.PageOffsetQueryName">
            <summary>
            Name of the page offset query
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigation">
            <summary>
            Page navigation
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigation.#ctor(MyWebGrocer.Collections.Page,System.Collections.Generic.IEnumerable{MyWebGrocer.Collections.Page})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigation"/>
            </summary>
            <param name="current">The current page</param>
            <param name="pages">The collection of pages</param>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigation.Current">
            <summary>
            The current page
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigation.Pages">
            <summary>
            The collection of pages
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigationLinkProvider">
            <summary>
            Link provider that returns page links with rel: first, last, previous, current, next
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigationLinkProvider.GetLinksFor(MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigation,System.Net.Http.HttpRequestMessage)">
            <summary>
            Get links for page navigation
            </summary>
            <param name="instance">The <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigation"/> instance</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>The paging links</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.Paging.PageNavigationLinkProvider.PageOffsetQueryName">
            <summary>
            Specify name of the page offset query in the query string
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.QueryOption">
            <summary>
            Query option such as filtering or sorting
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.QueryOption.Name">
            <summary>
            Option name (for display labeling)
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.QueryOption.Value">
            <summary>
            Option value
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.QueryOptionLinkProvider`1">
            <summary>
            Generic link provider for query option such as filtering and sorting
            </summary>
            <typeparam name="T">type of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.QueryOption"/></typeparam>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.QueryOptionLinkProvider`1.ResetRelatedQueries(MyWebGrocer.Web.Mvc.HyperMedia.RequestLink)">
            <summary>
            Perform necessary reset of other queries, such as paging
            </summary>
            <param name="link">the request link</param>
            <returns>modified link</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.QueryOptionLinkProvider`1.GetLinksFor(`0,System.Net.Http.HttpRequestMessage)">
            <summary>
            Get links for the <paramref name="instance"/> and <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
            <param name="instance">The instance to get links for</param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>A collection of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>s</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.QueryOptionLinkProvider`1.QueryName">
            <summary>
            Specify name of the option as appear in the query string
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.QueryOptionLinkProvider`1.RelClear">
            <summary>
            Name for the clear rel. The default is "clear"
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.QueryOptionLinkProvider`1.RelActivate">
            <summary>
            Name for the activate rel. The default is "activate"
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.QueryOptionLinkProvider`1.AllowMultiple">
            <summary>
            Indicate if the query option allows multiple instances in the query string.
            The default is true.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink">
            <summary>
            Link helper for <see cref="T:System.Net.Http.HttpRequestMessage"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.#ctor(System.Net.Http.HttpRequestMessage)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink"/>
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.#ctor(System.Uri)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink"/>
            </summary>
            <param name="requestUri">The request Uri</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Create the link
            </summary>
            <param name="link">The link</param>
            <param name="queryNameValues">The query string parameters (not encoded)</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.Exists(System.String,System.String)">
            <summary>
            Check if the query exists in the current request
            </summary>
            <param name="name">query name</param>
            <param name="value">query value (not encoded)</param>
            <returns>true if the query name value pair exists in the request</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.Exists(System.String)">
            <summary>
            Check if the query name exists in the current request
            </summary>
            <param name="name">query name</param>
            <returns>true if the query name exists in the request</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.Replace(System.String,System.String)">
            <summary>
            Replace all instances of queries in the request with this name to the new value
            </summary>
            <param name="name">query name to replace</param>
            <param name="value">new value (not encoded) to replace with</param>
            <returns>new request link with the new value for the query name</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.Remove(System.String)">
            <summary>
            Remove all instance of query with the specific name
            </summary>
            <param name="name">query name to remove</param>
            <returns>request link with the specific query removed</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.Remove(System.String,System.String)">
            <summary>
            Remove query with the specific name and value
            </summary>
            <param name="name">query name to remove</param>
            <param name="value">specific query value (not encoded) to remove</param>
            <returns>request link with the specific query removed</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.Append(System.String,System.String)">
            <summary>
            Append the query to the end
            </summary>
            <param name="name">query name</param>
            <param name="value">query value (not encoded)</param>
            <returns>request link with the new query appended</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.ReplaceOrAppend(System.String,System.String)">
            <summary>
            Replace if query exists by name, or append the query to the end
            </summary>
            <param name="name">query name</param>
            <param name="value">query value (not encoded)</param>
            <returns>request link with the existing query value replaced or new query appended</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.CompatabilityUrlEncodeQuery(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Build URL encoded query for compatibility support.
            </summary>
            <param name="pair">The pair.</param>
            <returns>URL encoded query</returns>
            <remarks>use for compatibility support only, to encode a query for the URL, use <see cref="M:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.Query(System.Collections.Generic.KeyValuePair{System.String,System.String})"/></remarks>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.Link">
            <summary>
            The link
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.RequestLink.QueryNameValuePairs">
            <summary>
            Query name value pairs (not encoded)
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection">
            <summary>
            Collection of accepted Origins for CORS support
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection.CreateNewElement">
            <inheritdocs/>
            <returns>A new <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationElement"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <inheritdocs/>
            <returns>A key for the <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationElement"/></returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection.GetEnumerator">
            <inheritdocs />
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection.Add(MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationElement)">
            <inheritdocs />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection.Clear">
            <inheritdocs />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection.Contains(MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationElement)">
            <inheritdocs />
            <returns>true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection.CopyTo(MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationElement[],System.Int32)">
            <inheritdocs />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection.Remove(MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationElement)">
            <inheritdocs />
            <returns>true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationElement">
            <summary>
            Configuration element defining an acceptable Origin for CORS support
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationElement.Origin">
            <summary>
            Origin value
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption">
            <summary>
            Language Option for <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager"/> to determine the thread culture
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption"/>, not supporting multi languages
            </summary>
            <param name="defaultCulture"></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption.#ctor(System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption"/>, with multi-language support
            </summary>
            <param name="defaultCulture">The default culture to use when none of those specified in the "Accept-Language" header is supported</param>
            <param name="supportedCultures">Languages supported for the current request</param>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption.DefaultCulture">
            <summary>
            The default culture to use when none of those specified in the "Accept-Language" header is supported
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption.Supported">
            <summary>
            Languages supported for the current request
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Logging.WebReportInfo">
            <summary>
            A base Web Reporting event
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Logging.WebReportInfo.#ctor(MyWebGrocer.Logging.UniversalParameters,System.Web.HttpContextBase,System.Web.Routing.RouteData,System.String,System.Double)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Logging.WebReportInfo"/>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Logging.WebReportInfo.WebParameters">
            <summary>
            The set of API parameters
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperHelper.GetEnumerableMappedObject(System.Object,System.Func{System.Object,System.Net.Http.HttpRequestMessage,System.Object},System.Type,System.Net.Http.HttpRequestMessage)">
            <summary>
            Map the object from one type to another, enumerating over the <paramref name="value"/> and calling <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/> for each enumeration
            </summary>
            <returns>A new enumeration with each instance mapped separately</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperHelper.GetMappedObject(System.Object,System.Func{System.Object,System.Net.Http.HttpRequestMessage,System.Object},System.Net.Http.HttpRequestMessage)">
            <summary>
            Map the object from one type to another, using a <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/>
            </summary>
            <returns>A mapped instance</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperHelper.DoesMediaTypeMatchContentType(System.String,MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase,System.String)">
            <summary>
            Does the <see cref="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MediaTypeString"/> match the <see cref="P:System.Net.Mime.ContentType.MediaType"/>
            </summary>
            <param name="requestMediaTypeString">The current requests MediaType string (from Accept header)</param>
            <param name="mediaTypeMapper">The current <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/></param>
            <param name="baseMediaType">The base media type of the formatter</param>
            <returns>True if the types match</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperHelper.GetMapperByMediaType(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase},System.String,System.String)">
            <summary>
            Locate a <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/>, where the <see cref="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MediaTypeString"/> matches the requested MediaType
            </summary>
            <returns>The first matching <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/>, based on the <see cref="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MediaTypeString"/></returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperNegotiator">
            <summary>
            Negotiates media type mappings
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperNegotiator.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase},System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperNegotiator"/> which will handle mapping media types to models
            </summary>
            <param name="mediaTypeMappers">The collection of <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/> instances</param>
            <param name="baseMediaType">The base media type</param>
            <param name="allowEnumerableTypes">Enumerable media types are allowed</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperNegotiator.NegotiateMapper(System.Type,System.Net.Http.HttpRequestMessage)">
            <summary>
            Negotiate to find a matching <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/> for the current <see cref="T:System.Net.Http.HttpRequestMessage"/> to see if it matches the <paramref name="modelType"/>
            </summary>
            <param name="modelType">The Model Type to try to match to the <paramref name="request"/></param>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>A <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/></returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Mappers.LinksMediaTypeMapper">
            <inheritdoc/>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapper`2">
            <summary>
            Map between a <typeparamref name="TModel"/> and <typeparamref name="TMediaType"/>
            </summary>
            <typeparam name="TModel">The Model <see cref="T:System.Type"/></typeparam>
            <typeparam name="TMediaType">The MediaType <see cref="T:System.Type"/></typeparam>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase">
            <summary>
            Maps <see cref="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.ModelType"/>s to <see cref="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MediaType"/>s for a given <see cref="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MediaTypeString"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MapToMediaType(System.Object,System.Net.Http.HttpRequestMessage)">
            <summary>
            Map a Model to a MediaType
            </summary>
            <param name="instance">The instance to map</param>
            <param name="message">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>The mapped MediaType</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MapToModel(System.Object,System.Net.Http.HttpRequestMessage)">
            <summary>
            Map a MediaType to a Model
            </summary>
            <param name="instance">The instance to map</param>
            <param name="message">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>The mapped Model</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MediaTypeRetailer">
            <summary>
            The MediaType Retailerstring.
            <example>application/vnd.mywebgrocer.media-type-name+format, this property would only specify mywebgrocer</example>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MediaTypeString">
            <summary>
            The MediaType string.
            <example>application/vnd.mywebgrocer.media-type-name+format, this property would only specify media-type-name</example>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.ModelType">
            <summary>
            The <see cref="T:System.Type"/> of the Model
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MediaType">
            <summary>
            The <see cref="T:System.Type"/> of the MediaType
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.DefaultForAccept">
            <summary>
            This mapper should be valid for any Request. It's treated as a fallback, so if the Request doesn't
            specify this <see cref="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.MediaTypeString"/>, it'll still be a valid mapper choice.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.DefaultForWildcardAccept">
            <summary>
            This mapper is the default for this <see cref="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.ModelType"/>. When multiple mappers exist with the same <see cref="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase.ModelType"/> only one can have this set to true.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapper`2.Map(`0,System.Net.Http.HttpRequestMessage)">
            <summary>
            Map from a <typeparamref name="TModel"/> to a <typeparamref name="TMediaType"/>
            </summary>
            <param name="instance">The instance of <typeparamref name="TModel"/> to map from</param>
            <param name="message">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>The instance of <typeparamref name="TMediaType"/> that has been mapped to</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapper`2.Map(`1,System.Net.Http.HttpRequestMessage)">
            <summary>
            Map from a <typeparamref name="TMediaType"/> to a <typeparamref name="TModel"/>
            </summary>
            <param name="instance">The instance of <typeparamref name="TMediaType"/> to map from</param>
            <param name="message">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <returns>The instance of <typeparamref name="TModel"/> that has been mapped to</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapper`2.MapToMediaType(System.Object,System.Net.Http.HttpRequestMessage)">
            <inheritdoc/>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapper`2.MapToModel(System.Object,System.Net.Http.HttpRequestMessage)">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapper`2.ModelType">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapper`2.MediaType">
            <inheritdoc/>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.LinksMediaTypeMapper.Map(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.HyperMedia.ILink},System.Net.Http.HttpRequestMessage)">
            <inheritdoc/>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.LinksMediaTypeMapper.Map(MyWebGrocer.Web.Mvc.HyperMedia.LinksMediaType,System.Net.Http.HttpRequestMessage)">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.LinksMediaTypeMapper.MediaTypeString">
            <inheritdoc/>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection">
            <inheritdoc/>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration">
            <summary>
            Common API Configuration
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.ApiRouteTemplateByName(System.String)">
            <summary>
            Locate an API Route Template by name
            </summary>
            <param name="routeName">Name of the route</param>
            <returns>The route template</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.LogResponseBody">
            <summary>
            Include the response body when logging
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.EnableDiagnosticsRoute">
            <summary>
            Enable the MWG Diagnostics Route
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.SkipAuthorization">
            <summary>
            When true, request authorization is skipped
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.UseOrLogicForAuthorizationProviders">
            <summary>
            When true, only one of the available authorization providers is needed to 
            authorize the current request (versus the default, which requires all providers 
            to authorize the current request)
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.EnableCors">
            <summary>
            When true, CORS is enabled
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.EnableCompressionHandler">
            <summary>
            When true, the compression handler is enabled
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.CompressionContentSizeThreshold">
            <summary>
            Gets the compression content size threshold (bytes)
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.LoggingApplicationId">
            <summary>
            The Logging Application identifier
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.ApiRoutes">
            <summary>
            The API Route Collection (used by the <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ConfigLinkProvider`1"/>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.SupportedCorsOrigins">
            <summary>
            The collection of <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.ApiCorsOriginConfigurationElement"/> for acceptable origins
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration.EnableOutputCachingDependencyKey">
            <summary>
            When true, output caching dependency keys are used, which allows cache invalidation of GET's from PUT/POST/DELETE actions
            <remarks>Use in conjunction with the <see cref="T:WebApi.OutputCache.V2.CacheOutputAttribute"/> and <see cref="T:WebApi.OutputCache.V2.InvalidateCacheOutputAttribute"/></remarks>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.ApiRouteTemplateByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.LogResponseBody">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.EnableDiagnosticsRoute">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.ApiRoutes">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.SupportedCorsOrigins">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.EnableOutputCachingDependencyKey">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.SkipAuthorization">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.UseOrLogicForAuthorizationProviders">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.EnableCors">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.EnableCompressionHandler">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.CompressionContentSizeThreshold">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiConfigurationSection.LoggingApplicationId">
            <inheritdoc/>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection">
            <summary>
            Collection of API Routes
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </summary>
            <returns>
            A new <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <returns>
            An <see cref="T:System.Object"/> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement"/>.
            </returns>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement"/> to return the key for. </param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection.Add(MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationElement)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection.Contains(MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationElement)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection.CopyTo(MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationElement[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type ApiRouteConfigurationElement cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection.Remove(MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationElement)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationElement">
            <summary>
            Route configurations
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationElement.Name">
            <summary>
            The route template name
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Infrastructure.ApiRouteConfigurationElement.Template">
            <summary>
            The route template
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.IRequestCultureManager">
            <summary>
            Locate the culture for the current request and set it using <see cref="T:MyWebGrocer.Internationalization.ICultureHelper"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.IRequestCultureManager.ConfigureCurrentCultureForApi(System.Net.Http.HttpRequestMessage)">
            <summary>
            Configure the current culture, adding API specific configurations
            <example>Look up the Culture based on a given store or other similar logic</example>
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.IRequestCultureManager.ConfigureCurrentCultureForApi(System.Net.Http.HttpRequestMessage,MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption)">
            <summary>
            Configure the current culture, based on request Accept-Language header and available language options
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="languageOption">The <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption"/> indicating the supported and default language</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.IRequestCultureManager.ConfigureCurrentCultureForMvc(System.Web.HttpRequestBase)">
            <summary>
            Configure the current culture, adding API specific configurations
            <example>Look up the Culture based on a given store or other similar logic</example>
            </summary>
            <param name="request">The current <see cref="T:System.Web.HttpRequestBase"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.IRequestCultureManager.ConfigureCurrentCultureForMvc(System.Web.HttpRequestBase,MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption)">
            <summary>
            Configure the current culture, based on request Accept-Language header and available language options
            </summary>
            <param name="request">The current <see cref="T:System.Web.HttpRequestBase"/></param>
            <param name="languageOption">The <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption"/> indicating the supported and default language</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager">
            <inheritdoc/>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager.#ctor(MyWebGrocer.Internationalization.ICultureHelper)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager"/>
            </summary>
            <param name="cultureHelper">The <see cref="T:MyWebGrocer.Internationalization.ICultureHelper"/> instance</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager.ConfigureCurrentCultureForApi(System.Net.Http.HttpRequestMessage)">
            <inheritdoc/>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager.ConfigureCurrentCultureForApi(System.Net.Http.HttpRequestMessage,MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption)">
            <summary>
            Using accept language from the current <see cref="T:System.Net.Http.HttpRequestMessage"/> and the calling application's <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption"/>
            the appropriate language to use for the current thread is determined and set.   
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="languageOption">The <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption"/> for the calling application&gt;</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager.ConfigureCurrentCultureForMvc(System.Web.HttpRequestBase)">
            <inheritdoc/>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager.ConfigureCurrentCultureForMvc(System.Web.HttpRequestBase,MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption)">
            <inheritdoc/>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager.FindAndSetCulture(System.Net.Http.HttpRequestMessage)">
            <summary>
            Locate the culture for the current request and set it using <see cref="T:MyWebGrocer.Internationalization.ICultureHelper"/>
            <remarks>Looks at <see cref="P:System.Net.Http.HttpRequestMessage.Headers"/> and pulls the first AcceptLanguage value</remarks>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager.FindAndSetCulture(System.Web.HttpRequestBase)">
            <summary>
            Locate the culture for the current request and set it using <see cref="T:MyWebGrocer.Internationalization.ICultureHelper"/>
            <remarks>Looks at <see cref="P:System.Web.HttpRequestBase.UserLanguages"/> and pulls the first valid value</remarks>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager.DetermineCulture(System.Net.Http.HttpRequestMessage,MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption)">
            <summary>
            From the request, find the language with the highest q value that is in the list of supported cultures.
            If only the language portion is in the request, then try to match on those two characters.
            If two languages have the same q value, the accept language header is considered in valid and the defaultCulture is used
            If any q value is invalid (non-numeric, etc), the MVC 4 web API the accept language collection returned is null
            If a q value is not in the form of x.y, the MVC 4 web API the accept language collection returned is null
            </summary>
            <returns> The name of the culture to use</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.RequestCultureManager.DetermineCulture(System.Web.HttpRequestBase,MyWebGrocer.Web.Mvc.Infrastructure.LanguageOption)">
            <summary>
            From the request, find the language portion, then try to match on those two characters.
            </summary>
            <returns> The name of the culture to use</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Infrastructure.MvcRegistry">
            <summary>
            StructureMap IOC registry for the MyWebGrocer.Api configuration, <see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder"/> and <see cref="T:System.Net.Http.DelegatingHandler"/>s
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Infrastructure.MvcRegistry.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.MvcRegistry"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Filters.LocationHeaderFilterAttribute">
            <summary>
            Adds a Location header with a URI to the new resource
            <remarks>See Location header http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html </remarks>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.LocationHeaderFilterAttribute.#ctor(System.String)">
            <summary>
            Add a Location header to the response
            </summary>
            <param name="routeName">The route to generate the Location URI with</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.LocationHeaderFilterAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
            <summary>
            The action to perform when the filter executes
            </summary>
            <param name="actionExecutedContext">The current <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.LocationHeaderFilterAttribute.GetRouteValues(System.Object)">
            <summary>
            Get the collection of route values
            </summary>
            <param name="model">The model</param>
            <returns>The route value dictionary</returns>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Filters.LocationHeaderFilterAttribute.RouteName">
            <summary>
            The route used to generate the Location URI with
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Filters.LogExceptionsFilterAttribute">
            <summary>
            Logs any exceptions not caught by a <see cref="T:MyWebGrocer.Web.Mvc.Controller"/>.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Filters.LogExceptionsFilterAttribute.OnException(System.Web.Mvc.ExceptionContext)">
            <summary>
            Action to perform when an exception is encountered
            </summary>
            <param name="filterContext">The current <see cref="T:System.Web.Mvc.ExceptionContext"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MapperRegistry">
            <summary>
            StructureMap IOC Registry. Scans and add all instances of <see cref="T:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MediaTypeMapperBase"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MapperRegistry.#ctor">
            <summary>
            Creates the registry
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.Infrastructure.MapperRegistry.OnScan(StructureMap.Graph.IAssemblyScanner)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Mappers.MwgHttpResponseExceptionMediaTypeMapper">
            <summary>
            Maps a <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException"/> to an <see cref="T:MyWebGrocer.Web.Mvc.MediaTypes.MwgHttpResponseExceptionMediaType"/>
            </summary>
            <remarks>
            The reason a single exception is mapped back to an enumerable set of media type is to ensure that the media type response is an array.
            This maintains backwards compatibility with the original "StoreFront 5" releases.
            </remarks>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.MwgHttpResponseExceptionMediaTypeMapper.Map(MyWebGrocer.Web.Mvc.Exceptions.MwgHttpResponseException,System.Net.Http.HttpRequestMessage)">
            <inheritdoc/>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Mappers.MwgHttpResponseExceptionMediaTypeMapper.Map(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.MediaTypes.MwgHttpResponseExceptionMediaType},System.Net.Http.HttpRequestMessage)">
            <inheritdoc/>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Mappers.MwgHttpResponseExceptionMediaTypeMapper.MediaTypeString">
            <inheritdoc/>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.MediaTypes.IPagingMediaType">
            <summary>
            Implementors are media types that have paging information associated with them
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MediaTypes.IPagingMediaType.Paging">
            <summary>
            Paging information
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MediaTypes.IPagingMediaType.Links">
            <summary>
            Collection of hypermedia links
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType">
            <summary>
            Represents paging details
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType.#ctor(System.Int32)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType.#ctor(MyWebGrocer.Web.Mvc.Paging.PagingOptions,System.Int32)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType.#ctor(MyWebGrocer.Web.Mvc.Paging.PagingOptions)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType"/>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType.Skip">
            <summary>
            Items to skip
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType.Take">
            <summary>
            Items to take
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MediaTypes.PagingMediaType.Total">
            <summary>
            The total number of items
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.MvcProfile">
            <summary>
            MVC AutoMapper profile
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MvcProfile.Configure">
            <summary>
            Create a map for all <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/> collections to <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.LinksMediaType"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper">
            <summary>
            Helper methods for constructing and comparing MediaType strings
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.WildcardMediaType">
            <summary>
            The wildcard media type */*
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.MediaTypePrefix">
            <summary>
            The media type prefix
            <example>application/vnd.mywebgrocer.media-type-name - it would be application/vnd.</example>
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.MediaTypeFormatTemplate">
            <summary>
            The MediaType format, in the form application/vnd.{0}.{1}
            <example>application/vnd.mywebgrocer.media-type-name</example>
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.MediaTypeFormatFullTemplate">
            <summary>
            The full MediaType format, in the form application/vnd.{0}.{1}+{2}
            <example>application/vnd.mywebgrocer.media-type-name+json</example>
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.XmlBaseMediaTypeName">
            <summary>
            Base MediaType for XML
            <example>xml</example>
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.JsonBaseMediaTypeName">
            <summary>
            Base MediaType for JSON
            <example>json</example>
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.XmlBaseMediaTypeNameWithPrefix">
            <summary>
            Base MediaType for XML including the prefix
            <example>+xml</example>
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.JsonBaseMediaTypeNameWithPrefix">
            <summary>
            Base MediaType for JSON including the prefix
            <example>+json</example>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.FormatMediaType(System.String,System.String)">
            <summary>
            Format a MediaType (excluding the base MediaType name)
            <example>application/vnd.mywebgrocer.message</example>
            </summary>
            <param name="mediaTypeName">Name of the MediaType</param>
            <param name="mediaTypeRetailer">Name of the retailer</param>
            <returns>MediaType string in the form application/vnd.mywebgrocer.mediaTypeName</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MediaTypes.MediaTypeHelper.FormatMediaType(System.String,System.String,System.String)">
            <summary>
            Format a MediaType (including the base MediaType name)
            <example>application/vnd.mywebgrocer.message+json</example>
            </summary>
            <param name="mediaTypeName">Name of the MediaType</param>
            <param name="mediaTypeRetailer">Name of the retailer</param>
            <param name="baseMediaTypeName">Name of the base MediaType, such as json</param>
            <returns>MediaType string in the form application/vnd.mywebgrocer.mediaTypeName+baseMediaTypeName</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.MediaTypes.MwgHttpResponseExceptionMediaType">
            <summary>
            A Message media type
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MediaTypes.MwgHttpResponseExceptionMediaType.Text">
            <summary>
            The message text
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MediaTypes.MwgHttpResponseExceptionMediaType.Code">
            <summary>
            The message code
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MediaTypes.MwgHttpResponseExceptionMediaType.CorrelationId">
            <summary>
            Gets or sets the correlation identifier for the request.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.HyperMedia.Link">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.Link.#ctor">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.HyperMedia.Link.#ctor(System.String,System.String)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.HyperMedia.ILink"/>
            </summary>
            <param name="rel">The rel</param>
            <param name="uri">The uri</param>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.Link.Rel">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.Link.Placeholders">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.Link.Queries">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.HyperMedia.Link.Uri">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.IModelBinder`1">
            <summary>
            Interface implemented by strongly type model binders.
            </summary>
            <typeparam name="T">The model which the binder works with.</typeparam>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.ModelBinderResolver">
            <summary>
            Resolves which model binder to return using StructureMap.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.ModelBinderResolver.BindModel(System.Web.Mvc.ControllerContext,System.Web.Mvc.ModelBindingContext)">
            <summary>
            Binds the model.
            </summary>
            <param name="controllerContext">
            </param>
            <param name="bindingContext">
            </param>
            <returns>
            The bind model.
            </returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.MvcRequestLogInfo">
            <summary>
            Mvc Request Log
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MvcRequestLogInfo.#ctor(MyWebGrocer.Logging.UniversalParameters,System.Web.Mvc.ResultExecutedContext,System.String,System.Double,System.Int32)">
            <summary>
            Constructor for use with <see cref="T:System.Web.Mvc.FilterAttribute"/>s
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MvcRequestLogInfo.#ctor(MyWebGrocer.Logging.UniversalParameters,System.Web.Mvc.ControllerContext,System.Int32)">
            <summary>
            Constructor for use with <see cref="T:System.Web.Mvc.ControllerContext"/>s
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.MvcRequestLogInfo.#ctor(MyWebGrocer.Logging.UniversalParameters,System.Web.HttpContextBase,System.Int32)">
            <summary>
            Constructor for use with <see cref="T:System.Web.HttpContextBase"/>
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MvcRequestLogInfo.EventTypeId">
            <summary>
            Mvc request event type
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MvcRequestLogInfo.Message">
            <summary>
            Mvc request message
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.MvcRequestLogInfo.ApplicationId">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Paging.Binders.PagingOptionsBinder">
            <summary>
            A binder for paging options
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Paging.Binders.PagingOptionsBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Paging.Binders.PagingOptionsBinder.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Paging.Constants">
            <summary>
            Paging specific constants
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Paging.Constants.PageOffsetQueryName">
            <summary>
            Name of the page offset query string parameter
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Paging.Constants.PageItemsQueryName">
            <summary>
            Name of the page items query string parameter
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Paging.Exceptions.InvalidPageSkipException">
            <summary>
            Thrown when an invalid Page Skip is encountered
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Paging.Exceptions.InvalidPageSkipException.#ctor">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Paging.Exceptions.InvalidPageSkipException"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Paging.Exceptions.InvalidPageTakeException">
            <summary>
            Thrown when an invalid Page Take is encountered
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Paging.Exceptions.InvalidPageTakeException.#ctor">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Paging.Exceptions.InvalidPageTakeException"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Paging.PagingOptions">
            <summary>
            Paging options
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Paging.PagingOptions.#ctor">
            <summary>
            Build default paging options object
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Paging.PagingOptions.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a paging options with skip and take values
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Paging.PagingOptions.Skip">
            <summary>
            Number of pages to skip, default 0
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Paging.PagingOptions.Take">
            <summary>
            Number of items to take, default 1
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Paging.PagingOptions.Total">
            <summary>
            Total number of items
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Plugin.IApiProvider">
            <summary>
            Strategy for registering a plugin to a MVC application or WebApi.
            The implementation of this interface should be in the plugin assembly.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Plugin.IRouteProvider">
            <summary>
            Strategy for introducing additional routes from a plugin
            to a MVC application or WebApi. The implementation of this
            interface should be in the plugin assembly.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Plugin.IRouteProvider.MapHttpRoutes(System.Web.Http.HttpRouteCollection,StructureMap.IContainer)">
            <summary>
            Maps the providers routes to the collection provided
            </summary>
            <param name="routes"><see cref="T:System.Web.Http.HttpRouteCollection"/></param>
            <param name="applicationContainer"><see cref="T:StructureMap.IContainer"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Plugin.IRouteProvider.SetupRouteAuthorization(MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder,StructureMap.IContainer)">
            <summary>
            Sets up the route authorizations
            </summary>
            <param name="builder"><see cref="T:MyWebGrocer.Web.Mvc.Authorization.IRouteAuthorizationBuilder"/></param>
            <param name="applicationContainer"><see cref="T:StructureMap.IContainer"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Plugin.IApiProvider.SetupWebApiFilters(System.Web.Http.Filters.HttpFilterCollection,StructureMap.IContainer)">
            <summary>
            Place to Register Http Filters
            </summary>
            <remarks>Exception filters fire in the reverse order of being added to the filters collection, i.e. first in is last to fire.
            Also, note that when used as an attribute on actions or controllers, it will be the first one to fire before the filter collection</remarks>
            <param name="filters">The existing <see cref="T:System.Web.Http.Filters.HttpFilterCollection"/></param>
            <param name="applicationContainer"><see cref="T:StructureMap.IContainer"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Plugin.IApiProvider.SetupWebApiParameterBindingRules(System.Web.Http.ModelBinding.ParameterBindingRulesCollection,StructureMap.IContainer)">
            <summary>
            Place to Register Parameter Binding Rules
            </summary>
            <param name="rulesCollection">The existing <see cref="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection"/></param>
            <param name="applicationContainer"><see cref="T:StructureMap.IContainer"/></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Properties.Resources.ControllerNoRepositoriesSpecified">
            <summary>
              Looks up a localized string similar to The controller requires at least one IRepository to be specified..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Properties.Resources.ForbiddenMessage">
            <summary>
              Looks up a localized string similar to You do not have the necessary privileges to perform this action..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Properties.Resources.InvalidPageSkipExceptionMessage">
            <summary>
              Looks up a localized string similar to Skip was invalid..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Properties.Resources.InvalidPageTakeExceptionMessage">
            <summary>
              Looks up a localized string similar to Take was invalid..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Properties.Resources.InvalidQueryStringParameterException">
            <summary>
              Looks up a localized string similar to The value provided in the query string for {0} was not valid..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Properties.Resources.UnhandledApiExceptionMessage">
            <summary>
              Looks up a localized string similar to Sorry, an error has occurred, please try again later..
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Properties.Resources.WebApiMwgDiagnosticsPageTemplate">
             <summary>
               Looks up a localized string similar to &lt;!DOCTYPE html&gt;
            &lt;html lang=&quot;en&quot;&gt;
              &lt;head&gt;
                &lt;meta charset=&quot;utf-8&quot;&gt;
                &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
                &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
                &lt;title&gt;MWG API Diagnostics&lt;/title&gt;
                &lt;link rel=&quot;stylesheet&quot; href=&quot;//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css&quot;&gt;
              &lt;/head&gt;
              &lt;body&gt;
                &lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js&quot;&gt;&lt;/script&gt;
                &lt;script src=&quot;//netdna.bootstrapcdn.com/bootstrap/3.1 [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.RemoveIdentifyingHeadersModule">
            <summary>
            Remove server identifying headers from the response
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.RemoveIdentifyingHeadersModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.RemoveIdentifyingHeadersModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule" />.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.RequiredIfValidator">
            <summary>
            Conditionally requires a property.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.RequiredIfValidator.#ctor(System.Web.Mvc.ModelMetadata,System.Web.Mvc.ControllerContext,MyWebGrocer.Validation.Attributes.RequiredIfAttribute)">
            <summary>
            Builds the validator.
            </summary>
            <param name="metadata"></param>
            <param name="context"></param>
            <param name="attribute"></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.RequiredIfValidator.GetClientValidationRules">
            <summary>
            Writes out rules to the client browser.
            </summary>
            <returns>rules</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.RequiredIfValidator.Validate(System.Object)">
            <summary>
            Validates the container.
            </summary>
            <param name="container"></param>
            <returns>validation results</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Exceptions.RouteNotConfigurableException">
            <summary>
            Thrown when a route was not configured or located
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.RouteNotConfigurableException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.RouteNotConfigurableException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.RouteNotConfigurableException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.RouteNotConfigurableException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.RouteNotConfigurableException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.RouteNotConfigurableException"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Exceptions.RouteNotConfigurableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Exceptions.RouteNotConfigurableException"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Handlers.MwgDiagnosticHandler">
            <summary>
            Handle requests to the MWG Diagnostics route. Enabled via the [MyWebGrocer.Api EnableDiagnosticsRoute="true|false" /> flag.
            <example>/mwgdiagnostics</example>
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Handlers.MwgDiagnosticHandler.MwgDiagnosticsRouteName">
            <summary>
            The MWG Diagnostics route name
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.MwgDiagnosticHandler.#ctor(MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Handlers.MwgDiagnosticHandler"/>
            </summary>
            <param name="apiConfiguration">The <see cref="T:MyWebGrocer.Web.Mvc.Infrastructure.IApiConfiguration"/></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Handlers.MwgDiagnosticHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            The task
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> token</param>
            <returns>The task for continuation</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Routing.MediaTypeHttpRouteConstraint">
            <summary>
            Ensures route is applicable to media type
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Routing.MediaTypeHttpRouteConstraint.#ctor(System.Net.Http.HttpMethod,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Create a MyWebGrocer media type route constraint
            </summary>
            <param name="httpMethod"></param>
            <param name="mediaTypeNames"></param>
            <param name="useStandardMimeTypes"></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Routing.MediaTypeHttpRouteConstraint.#ctor(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Create a Retailer-Specific media type route constraint
            </summary>
            <param name="httpMethod"></param>
            <param name="retailer"></param>
            <param name="mediaTypeNames"></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Routing.MediaTypeHttpRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
            <summary>
            Determines whether this instance equals a specified route.
            </summary>
            <param name="request">The request.</param>
            <param name="route">The route to compare.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="values">A list of parameter values.</param>
            <param name="routeDirection">The route direction.</param>
            <returns>True if this instance equals a specified route; otherwise, false.</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Routing.MediaTypeHttpRouteConstraint.GetFormattedMediaType(System.String,System.String)">
            <summary>
            Allow consumers to specify a suffix if they want to support xml
            </summary>
            <param name="mediaType"></param>
            <param name="retailer"></param>
            <returns>The formatted media type</returns>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Routing.MediaTypeHttpRouteConstraint.SetProperties(System.Net.Http.HttpMethod,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets the HttpMethod and MediaTypes properties
            </summary>
            <param name="httpMethod"></param>
            <param name="retailer"></param>
            <param name="mediaTypeNames"></param>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Routing.MediaTypeHttpRouteConstraint.HttpMethod">
            <summary>
            The applicable <see cref="P:MyWebGrocer.Web.Mvc.Routing.MediaTypeHttpRouteConstraint.HttpMethod"/> for this constraint
            </summary>
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Routing.MediaTypeHttpRouteConstraint.MediaTypes">
            <summary>
            Gets the media types applicable to this constraint
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Status.IStatusAssemblyRetriever">
            <summary>Retreives the API assembly reference.</summary>
            <remarks>This is required because of the OWIN self-host vs OWIN web-host vs IIS execution context</remarks>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.IStatusAssemblyRetriever.WhoAmI">
            <summary>Retreives the API assembly reference.</summary>
            <returns><see cref="T:System.Reflection.AssemblyName"/></returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Status.IStatusMessageBuilder">
            <summary>
            Build up the status response
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.IStatusMessageBuilder.BuildMessage(System.Text.StringBuilder)">
            <summary>
            Add a specific status string to the <paramref name="response"/> body
            </summary>
            <param name="response"></param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Status.StatusHttpHandler">
            <summary>
            A status handler for the MVC pipeline
            <remarks>
            NOTE: Any changes here should also be evaluated against the Web API version <see cref="T:MyWebGrocer.Web.Mvc.Status.StatusHandler"/>
            </remarks>
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Status.StatusHttpHandler.StatusRouteName">
            <summary>
            The status route name
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.StatusHttpHandler.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Status.IStatusMessageBuilder},MyWebGrocer.Web.Mvc.Status.IStatusAssemblyRetriever,MyWebGrocer.Logging.ILog2)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Status.StatusHttpHandler"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.StatusHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Web.Mvc.Status.StatusHttpHandler.IsReusable">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Status.ServerInfoStatusMessageBuilder">
            <summary>
            The server info string (formatted for the Status response)
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.ServerInfoStatusMessageBuilder.#ctor">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Status.ServerInfoStatusMessageBuilder"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.ServerInfoStatusMessageBuilder.#ctor(System.Func{System.DateTime})">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Status.ServerInfoStatusMessageBuilder"/>
            </summary>
            <param name="currentTimeGetter">The Func to resolve the current time</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.ServerInfoStatusMessageBuilder.BuildMessage(System.Text.StringBuilder)">
            <summary>
            Add machine name and time
            </summary>
            <param name="response">The status response body</param>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Status.StatusHandler">
            <summary>
            A status handler for the Web API Pipeline
            
            <remarks>
            NOTE: Any changes here should also be evaluated against the MVC version <see cref="T:MyWebGrocer.Web.Mvc.Status.StatusHttpHandler"/>
            </remarks>
            </summary>
        </member>
        <member name="F:MyWebGrocer.Web.Mvc.Status.StatusHandler.StatusRouteName">
            <summary>
            The status route name
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.StatusHandler.#ctor(System.Collections.Generic.IEnumerable{MyWebGrocer.Web.Mvc.Status.IStatusMessageBuilder},MyWebGrocer.Web.Mvc.Status.IStatusAssemblyRetriever,MyWebGrocer.Logging.ILog2)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Status.StatusHandler"/>
            </summary>
            <param name="statusMessageBuilders">The collection of <see cref="T:MyWebGrocer.Web.Mvc.Status.IStatusMessageBuilder"/></param>
            <param name="statusAssemblyRetriever">The <see cref="T:MyWebGrocer.Web.Mvc.Status.IStatusAssemblyRetriever"/></param>
            <param name="logger">The <see cref="T:MyWebGrocer.Logging.ILog2"/> logger</param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.StatusHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            The task
            </summary>
            <param name="request">The current <see cref="T:System.Net.Http.HttpRequestMessage"/></param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> token</param>
            <returns>The task for continuation</returns>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Status.StatusRouteHandler">
            <summary>
            A status route handler for the MVC pipeline
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.StatusRouteHandler.#ctor(MyWebGrocer.Web.Mvc.Status.StatusHttpHandler)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Status.StatusRouteHandler"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.StatusRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Status.StatusRegistry">
            <summary>
            IOC Registry for the status route
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.StatusRegistry.#ctor">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Web.Mvc.Status.StatusRegistry"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Web.Mvc.Status.VersionStatusMessageBuilder">
            <summary>
            The assembly version string (formatted for the Status response)
            </summary>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.VersionStatusMessageBuilder.#ctor(MyWebGrocer.Web.Mvc.Status.IStatusAssemblyRetriever)">
            <summary>
            Create a new <see cref="T:MyWebGrocer.Web.Mvc.Status.VersionStatusMessageBuilder"/>
            </summary>
            <param name="statusAssemblyRetriever"></param>
        </member>
        <member name="M:MyWebGrocer.Web.Mvc.Status.VersionStatusMessageBuilder.BuildMessage(System.Text.StringBuilder)">
            <summary>
            Add the version string
            </summary>
            <param name="response">The status response body</param>
        </member>
    </members>
</doc>
