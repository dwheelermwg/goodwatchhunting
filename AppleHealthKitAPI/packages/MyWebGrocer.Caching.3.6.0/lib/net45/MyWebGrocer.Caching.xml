<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyWebGrocer.Caching</name>
    </assembly>
    <members>
        <member name="T:MyWebGrocer.Caching.CacheHelpers">
            <summary>
            Helper functions for the caching library.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheHelpers.IsTypeSerializable(System.Object)">
            <summary>
            Determines whether the type is serializable.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if type serializable; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheHelpers.ComposeInternalKey(System.String,System.Type,System.String)">
            <summary>
            Creates a key for a cacheable item, based on the
            type and a specified key.
            </summary>
            <param name="key">The key which uniquely identifies an instance
            of <paramref name="type"/></param>
            <param name="prefix">The cache prefix, typically used to identify retailers within a shared environment (provided by <see cref="T:MyWebGrocer.Caching.Configuration.ICacheConfigurationSection"/></param>
            <param name="type">The class for which to generate a key.</param>
            <returns>A key unique for the type and instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheHelpers.CreateKey(System.Object)">
            <summary>
            See http://msdn.microsoft.com/en-us/library/system.object.gethashcode.aspx for details on
            why GetHashCode is allowed to collide even when two object instances are not considered Equal.
            </summary>
            <param name="value"></param>
            <returns>A key unique for the type and instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheHelpers.CreateUniqueKey(System.String,MyWebGrocer.Caching.ICacheable)">
            <summary>
            Creates a unique key for a cacheable item.
            </summary>
            <param name="prefix">The cache prefix, typically used to identify retailers within a shared environment (provided by <see cref="T:MyWebGrocer.Caching.Configuration.ICacheConfigurationSection"/></param>
            <param name="obj">The cacheable item to generate a key for.</param>
            <returns>A key unique for the type and instance.</returns>
        </member>
        <member name="T:MyWebGrocer.Caching.CacheRegistry">
            <summary>
            Class CacheRegistry. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheRegistry.#ctor">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Caching.CacheRegistry"/>
            </summary>
        </member>
        <member name="T:MyWebGrocer.Caching.CacheWrapper">
            <summary>
            Class CacheWrapper.
            </summary>
        </member>
        <member name="T:MyWebGrocer.Caching.ICachingService">
            <summary>
            Interface for performing caching operations with objects
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Store(MyWebGrocer.Caching.ICacheable,System.TimeSpan)">
            <summary>
            Stores an object in cache for a given duration.
            </summary>
            <param name="value">The object being saved.</param>
            <param name="expiration">The duration that the object will be cached.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Store(MyWebGrocer.Caching.ICacheable,System.DateTime)">
            <summary>
            Stores an object in cache until a given date.
            </summary>
            <param name="value">The object being saved.</param>
            <param name="expiration">The date the object expires in cache.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Store(System.String,System.Object,System.TimeSpan)">
            <summary>
            Store an object using the specified key for a given duration.
            </summary>
            <param name="key">Key to use to store the object.</param>
            <param name="value">The object to store.</param>
            <param name="expiration">The duration that the object will be cached.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Store(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <summary>
            Store an object using the specified key for a given duration.
            </summary>
            <param name="key">Key to use to store the object.</param>
            <param name="value">The object to store.</param>
            <param name="expiration">The duration that the object will be cached.</param>
            <param name="generateCustomInternalKey">Generate custom internal key (appending Type/version information)</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Store``1(System.String,``0,System.TimeSpan)">
            <summary>
            Store an object of <typeparamref name="T"/> using the specified key for a given duration.
            </summary>
            <param name="key">Key to use to store the object.</param>
            <param name="value">The object to store.</param>
            <param name="expiration">The duration that the object will be cached.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Store``1(System.String,``0,System.TimeSpan,System.Boolean)">
            <summary>
            Store an object of <typeparamref name="T"/> using the specified key for a given duration.
            </summary>
            <param name="key">Key to use to store the object.</param>
            <param name="value">The object to store.</param>
            <param name="expiration">The duration that the object will be cached.</param>
            <param name="generateCustomInternalKey">Generate custom internal key (appending Type/version information)</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Get``1(MyWebGrocer.Caching.ICacheable)">
            <summary>
            Retrieves an object from cache.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="objIdentifier">The object to be retrieved.</param>
            <returns>The object saved in cache, or null if not found.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Get``1(System.String)">
            <summary>
            Retrieves an object from cache using the specified key.
            This method is meant for reference types. Value types should use the non-generic Get.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">The key used to retrieve the object from cache.</param>
            <returns>The object saved in cache, or null if not found.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Get``1(System.String,System.Boolean)">
            <summary>
            Retrieves an object from cache using the specified key.
            This method is meant for reference types. Value types should use the non-generic Get.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">The key used to retrieve the object from cache.</param>
            <param name="generateCustomInternalKey">Generate custom internal key (appending Type/version information)</param>
            <returns>The object saved in cache, or null if not found.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Get``1(MyWebGrocer.Caching.ICacheable,System.Func{``0},System.TimeSpan)">
            <summary>
            Get an object from the read-thru cache. Object will be fetched on cache miss. 
            </summary>
            <typeparam name="T">Type of the object of interest</typeparam>
            <param name="objIdentifier">The object to be retrieved.</param>
            <param name="fetchOnCacheMiss">delegate that fetches the object on cache miss</param>
            <param name="expiration">time span for cache to expire</param>
            <returns>The object saved in cache, or null if not found.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Get(MyWebGrocer.Caching.ICacheable)">
            <summary>
            Tries to retrieve an object from cache.
            </summary>
            <param name="objIdentifier">The object to be retrieved.</param>
            <returns>The object saved in cache, or null if not found.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Get(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Get multiple items as specified by <paramref name="keys"/> from the cache provider
            </summary>
            <param name="keys">The cache keys to retrieve from cache</param>
            <returns>The dictionary of cache key to object</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Contains(System.String)">
            <summary>
            Check if the object specified by <paramref name="key"/> exists
            </summary>
            <param name="key">Key of the object to find.</param>
            <returns>true if the cache provider contains the key</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Contains``1(System.String)">
            <summary>
            Check if the object specified by <paramref name="key"/> exists for type T
            </summary>
            <param name="key">Key of the object to find.</param>
            <returns>true if the cache provider contains the key</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Contains``1(System.String,System.Boolean)">
            <summary>
            Check if the object specified by <paramref name="key"/> exists for type T
            </summary>
            <param name="key">Key of the object to find.</param>
            <param name="generateCustomInternalKey">Generate custom internal key (appending Type/version information)</param>
            <returns>true if the cache provider contains the key</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Remove(MyWebGrocer.Caching.ICacheable)">
            <summary>
            Removes an object from the cache.
            </summary>
            <param name="objIdentifier">The object to be removed.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Remove(System.String)">
            <summary>
            Removes an object from the cache.
            </summary>
            <param name="key">Key of the object to be removed.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Remove``1(System.String)">
            <summary>
            Removes an object from the cache by key.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key of the object to be removed.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ICachingService.Remove``1(System.String,System.Boolean)">
            <summary>
            Removes an object from the cache by key.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key of the object to be removed.</param>
            <param name="generateCustomInternalKey">Generate custom internal key (appending Type/version information)</param>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.#ctor(MyWebGrocer.Caching.Configuration.ICacheConfigurationSection)">
            <summary>
            Create a new instance of <see cref="T:MyWebGrocer.Caching.CacheWrapper"/>
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.StoreByUniqueKey(System.String,System.Object,System.DateTime)">
            <summary>
            Stores the by unique key.
            </summary>
            <param name="uniqueKey">The unique key.</param>
            <param name="value">The value.</param>
            <param name="expiration">The expiration.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.StoreByUniqueKey(System.String,System.Object,System.TimeSpan)">
            <summary>
            Stores the by unique key.
            </summary>
            <param name="uniqueKey">The unique key.</param>
            <param name="value">The value.</param>
            <param name="expiration">The expiration.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.GetByUniqueKey(System.String)">
            <summary>
            Gets the by unique key.
            </summary>
            <param name="uniqueKey">The unique key.</param>
            <returns>System.Object.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.GetByUniqueKeys(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the collection of keys.
            </summary>
            <param name="uniqueKeys">The unique keys.</param>
            <returns>The collection of objects that were found for the unique keys.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.RemoveByUniqueKey(System.String)">
            <summary>
            Removes the by unique key.
            </summary>
            <param name="uniqueKey">The unique key.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.ContainsUniqueKey(System.String)">
            <summary>
            Contains the unique key.
            </summary>
            <param name="uniqueKey">The unique key.</param>
            <returns>true if key exists in cache.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Store(MyWebGrocer.Caching.ICacheable,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Store(MyWebGrocer.Caching.ICacheable,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Store(System.String,System.Object,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Store(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Store``1(System.String,``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Store``1(System.String,``0,System.TimeSpan,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Get``1(MyWebGrocer.Caching.ICacheable)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Get``1(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Get``1(MyWebGrocer.Caching.ICacheable,System.Func{``0},System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Get(MyWebGrocer.Caching.ICacheable)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Get(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Contains``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Contains``1(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Remove(MyWebGrocer.Caching.ICacheable)">
            <summary>
            Removes an object from the cache.
            </summary>
            <param name="objIdentifier">The object to be removed.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Remove``1(System.String)">
            <summary>
            Removes an object from the cache by key.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key of the object to be removed.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.CacheWrapper.Remove``1(System.String,System.Boolean)">
            <summary>
            Removes an object from the cache by key.
            </summary>
            <typeparam name="T">Type of the object</typeparam>
            <param name="key">Key of the object to be removed.</param>
            <param name="generateCustomInternalKey">Generate custom internal key (appending Type/version information)</param>
        </member>
        <member name="T:MyWebGrocer.Caching.ConfigurableCacheFactory">
            <summary>
            Locates the correct cache provider based on configuration
            </summary>
        </member>
        <member name="T:MyWebGrocer.Caching.IConfigurableCacheFactory">
            <summary>
            Locates the correct cache provider based on configuration
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.IConfigurableCacheFactory.CreateProvider(System.String)">
            <summary>
            Locate a <see cref="T:MyWebGrocer.Caching.ICachingService"/> cache provider instance for the <paramref name="configurationIdentifier"/>
            </summary>
            <param name="configurationIdentifier">The cache configuration identifier</param>
            <returns>A new instance of a <see cref="T:MyWebGrocer.Caching.ICachingService"/> based on the configured instance, or a <see cref="T:MyWebGrocer.Caching.NullCacheProvider"/> if not configured</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.IConfigurableCacheFactory.CreateProvider">
            <summary>
            Locate a <see cref="T:MyWebGrocer.Caching.ICachingService"/> default cache provider instance.
            </summary>
            <returns>A new instance of a <see cref="T:MyWebGrocer.Caching.ICachingService"/> based on the default instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.IConfigurableCacheFactory.CreateProvider``1(``0)">
            <summary>
            Locate a <see cref="T:MyWebGrocer.Caching.ICachingService"/> cache provider instance for the <paramref name="cacheableInstance"/>, a <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/>
            </summary>
            <param name="cacheableInstance">A instance implementing <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/></param>
            <returns>A new instance of a <see cref="T:MyWebGrocer.Caching.ICachingService"/> based on the configured instance, or a <see cref="T:MyWebGrocer.Caching.NullCacheProvider"/> if not configured</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.IConfigurableCacheFactory.CacheEnabled(System.String)">
            <summary>
            Check if cache is enabled for the <paramref name="configurationIdentifier"/>
            </summary>
            <param name="configurationIdentifier">Identifier of cache to check</param>
            <returns>True if caching is enabled for the <paramref name="configurationIdentifier"/></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.IConfigurableCacheFactory.CacheEnabled``1(``0)">
            <summary>
            Check if cache is enabled for the <paramref name="cacheableInstance"/>
            </summary>
            <param name="cacheableInstance">A instance implementing <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/></param>
            <returns>True if caching is enabled for the <paramref name="cacheableInstance"/></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.IConfigurableCacheFactory.CacheProvider(System.String)">
            <summary>
            Cache provider for the <paramref name="configurationIdentifier"/>
            </summary>
            <param name="configurationIdentifier">Identifier of cache to check</param>
            <returns>Cache provider to use for the <paramref name="configurationIdentifier"/></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.IConfigurableCacheFactory.CacheProvider``1(``0)">
            <summary>
            Cache provider for the <paramref name="cacheableInstance"/>
            </summary>
            <param name="cacheableInstance">A instance implementing <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/></param>
            <returns>Cache provider to use for the <paramref name="cacheableInstance"/></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.IConfigurableCacheFactory.CacheExpiration(System.String)">
            <summary>
            Expiration time for the <paramref name="configurationIdentifier"/>
            </summary>
            <param name="configurationIdentifier">Identifier of cache to check</param>
            <returns>Expiration for the <paramref name="configurationIdentifier"/></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.IConfigurableCacheFactory.CacheExpiration``1(``0)">
            <summary>
            Expiration time for the <paramref name="cacheableInstance"/>
            </summary>
            <param name="cacheableInstance">A instance implementing <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/></param>
            <returns>Expiration for the <paramref name="cacheableInstance"/></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.#ctor(MyWebGrocer.Caching.Configuration.CacheConfigurationSection,MyWebGrocer.Logging.ILog2,StructureMap.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Caching.ConfigurableCacheFactory"/> class.
            </summary>
            <param name="cacheConfigurationSection">The cache configuration section.</param>
            <param name="log">The log.</param>
            <param name="container">The container.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.CreateProvider(System.String)">
            <summary>
            Locate a <see cref="T:MyWebGrocer.Caching.ICachingService"/> cache provider instance for the <paramref name="configurationIdentifier"/>
            </summary>
            <param name="configurationIdentifier">The cache configuration identifier</param>
            <returns>A new instance of a <see cref="T:MyWebGrocer.Caching.ICachingService"/> based on the configured instance, or a <see cref="T:MyWebGrocer.Caching.NullCacheProvider"/> if not configured</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.CreateProvider">
            <summary>
            Locate a <see cref="T:MyWebGrocer.Caching.ICachingService"/> default cache provider instance.
            </summary>
            <returns>A new instance of a <see cref="T:MyWebGrocer.Caching.ICachingService"/> based on the default instance.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.CreateProvider``1(``0)">
            <summary>
            Locate a <see cref="T:MyWebGrocer.Caching.ICachingService"/> cache provider instance for the <paramref name="cacheableInstance"/>, a <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheableInstance">A instance implementing <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/></param>
            <returns>A new instance of a <see cref="T:MyWebGrocer.Caching.ICachingService"/> based on the configured instance, or a <see cref="T:MyWebGrocer.Caching.NullCacheProvider"/> if not configured</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.CacheEnabled(System.String)">
            <summary>
            Check if cache is enabled for the <paramref name="configurationIdentifier" />
            </summary>
            <param name="configurationIdentifier">Identifier of cache to check</param>
            <returns>True if caching is enabled for the <paramref name="configurationIdentifier" /></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.CacheEnabled``1(``0)">
            <summary>
            Check if cache is enabled for the <paramref name="cacheableInstance"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheableInstance">A instance implementing <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/></param>
            <returns>True if caching is enabled for the <paramref name="cacheableInstance"/></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.CacheProvider(System.String)">
            <summary>
            Cache provider for the <paramref name="configurationIdentifier" />
            </summary>
            <param name="configurationIdentifier">Identifier of cache to check</param>
            <returns>Cache provider to use for the <paramref name="configurationIdentifier" /></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.CacheProvider``1(``0)">
            <summary>
            Cache provider for the <paramref name="cacheableInstance"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheableInstance">A instance implementing <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/></param>
            <returns>Cache provider to use for the <paramref name="cacheableInstance"/></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.CacheExpiration(System.String)">
            <summary>
            Expiration time for the <paramref name="configurationIdentifier" />
            </summary>
            <param name="configurationIdentifier">Identifier of cache to check</param>
            <returns>Expiration for the <paramref name="configurationIdentifier" /></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.CacheExpiration``1(``0)">
            <summary>
            Expiration time for the <paramref name="cacheableInstance"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheableInstance">A instance implementing <see cref="T:MyWebGrocer.Caching.IConfigurableCache"/></param>
            <returns>Expiration for the <paramref name="cacheableInstance"/></returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.ConfigurationFor(System.String)">
            <summary>
            Get Cache configuration for a particular named cache type
            </summary>
            <param name="configurationIdentifier">Name of cache to get configuration for</param>
            <returns>Cache configuration for the named cache type</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.ConfigurableCacheFactory.DefaultConfiguration">
            <summary>
            Get default cache configuration
            </summary>
            <returns>Default cache configuration</returns>
        </member>
        <member name="T:MyWebGrocer.Caching.Configuration.CacheConfigurationCollection">
            <summary>
            Collection of cache configurations
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.Configuration.CacheConfigurationCollection.CreateNewElement">
            <summary>
            When overridden in a derived class, creates a new <see cref="T:System.Configuration.ConfigurationElement" />.
            </summary>
            <returns>A new <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.Configuration.CacheConfigurationCollection.GetElementKey(System.Configuration.ConfigurationElement)">
            <summary>
            Gets the element key for a specified configuration element when overridden in a derived class.
            </summary>
            <param name="element">The <see cref="T:System.Configuration.ConfigurationElement" /> to return the key for.</param>
            <returns>An <see cref="T:System.Object" /> that acts as the key for the specified <see cref="T:System.Configuration.ConfigurationElement" />.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.Configuration.CacheConfigurationCollection.Add(MyWebGrocer.Caching.Configuration.CacheConfigurationElement)">
            <summary>
            Adds the specified cache element.
            </summary>
            <param name="cacheElement">The cache element.</param>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.CacheConfigurationCollection.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:MyWebGrocer.Caching.Configuration.CacheConfigurationElement"/> at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>CacheConfigurationElement.</returns>
        </member>
        <member name="T:MyWebGrocer.Caching.Configuration.CacheConfigurationElement">
            <summary>
            Configuration for an individual named cache
            </summary>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.CacheConfigurationElement.Identifier">
            <summary>
            Configuration identifier of the cache
            </summary>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.CacheConfigurationElement.Provider">
            <summary>
            Cache Provider to use
            </summary>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.CacheConfigurationElement.Enabled">
            <summary>
            Is cached enabled, defaults to true
            </summary>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.CacheConfigurationElement.Expiration">
            <summary>
            Cache expiration, defaults to 25 hours
            </summary>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.CacheConfigurationElement.Default">
            <summary>
            Is default configuration, defaults to false
            </summary>
        </member>
        <member name="T:MyWebGrocer.Caching.Configuration.CacheConfigurationSection">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Caching.Configuration.ICacheConfigurationSection">
            <summary>
            Cache configurations settings for each named cache type
            </summary>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.ICacheConfigurationSection.CacheConfigurationCollection">
            <summary>
            Collection of caches configurations
            </summary>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.ICacheConfigurationSection.Prefix">
            <summary>
            Cache key prefix
            </summary>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.CacheConfigurationSection.CacheConfigurationCollection">
            <inheritdoc />
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.CacheConfigurationSection.Prefix">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Caching.Configuration.CacheProvider">
            <summary>
            Available caching providers
            </summary>
        </member>
        <member name="F:MyWebGrocer.Caching.Configuration.CacheProvider.Memcached">
            <summary>
            Memcached cache provider
            </summary>
        </member>
        <member name="F:MyWebGrocer.Caching.Configuration.CacheProvider.Null">
            <summary>
            Null cache provider
            </summary>
        </member>
        <member name="F:MyWebGrocer.Caching.Configuration.CacheProvider.Runtime">
            <summary>
            System.Runtime.Caching.MemoryCache cache provider
            </summary>
        </member>
        <member name="T:MyWebGrocer.Caching.Configuration.ExpirationElement">
            <summary>
            Configuration of a cache expiration
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.Configuration.ExpirationElement.ExpiresAt">
            <summary>
            Calculates the expiration
            </summary>
            <returns>Date and Time when cache will expire</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.Configuration.ExpirationElement.ToTimeSpan">
            <summary>
            To the time span.
            </summary>
            <returns>TimeSpan.</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.Configuration.ExpirationElement.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents this instance.</returns>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.ExpirationElement.Minutes">
            <summary>
            Gets or sets the minutes.
            </summary>
            <value>The minutes.</value>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.ExpirationElement.Hours">
            <summary>
            Gets or sets the hours.
            </summary>
            <value>The hours.</value>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.ExpirationElement.Days">
            <summary>
            Gets or sets the days.
            </summary>
            <value>The days.</value>
        </member>
        <member name="P:MyWebGrocer.Caching.Configuration.ExpirationElement.Seconds">
            <summary>
            Gets or sets the seconds.
            </summary>
            <value>The seconds.</value>
        </member>
        <member name="T:MyWebGrocer.Caching.IConfigurableCache">
            <summary>
            A configurable cache
            </summary>
        </member>
        <member name="P:MyWebGrocer.Caching.IConfigurableCache.ConfigurationIdentifier">
            <summary>
            *.Config cache configuration identifier (key)
            </summary>
        </member>
        <member name="T:MyWebGrocer.Caching.NullCacheProvider">
            <summary>
            A cache provider that doesn't actually cache.  Configure this
            when something expects a cache, but you don't want to cache.
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Get``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Remove``1(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Remove``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Store(System.String,System.Object,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Store(MyWebGrocer.Caching.ICacheable,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Store(MyWebGrocer.Caching.ICacheable,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Store(System.String,System.Object,System.TimeSpan,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Store``1(System.String,``0,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Store``1(System.String,``0,System.TimeSpan,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Get``1(MyWebGrocer.Caching.ICacheable)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Get``1(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Get``1(MyWebGrocer.Caching.ICacheable,System.Func{``0},System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Get(MyWebGrocer.Caching.ICacheable)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Get(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Contains``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Contains``1(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:MyWebGrocer.Caching.NullCacheProvider.Remove(MyWebGrocer.Caching.ICacheable)">
            <inheritdoc />
        </member>
        <member name="T:MyWebGrocer.Caching.RepositoryThroughCache`1">
            <summary>
            Abstract generic framework for caching operations on a specific type, with the following features:
              Retries with auto incremental back off via IExecutor (to avoid hitting DB in a quick succession when it's having a hard time);
              Secondary (aka. last-known-good/backup) cache (used when primary cache expires and failed to get object from the DB/storage);
              Force refresh operation for individual object or all objects from DB/storage
            </summary>
            <typeparam name="T">Type of the object being cached</typeparam>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.#ctor(MyWebGrocer.Caching.ICachingService,MyWebGrocer.Threading.IExecutor,System.TimeSpan,System.TimeSpan,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MyWebGrocer.Caching.RepositoryThroughCache`1"/> class.
            </summary>
            <param name="cachingService">The caching service.</param>
            <param name="executor">The executor.</param>
            <param name="cacheTimeSpan">The cache time span.</param>
            <param name="secondaryCacheTimeSpan">The secondary cache time span.</param>
            <param name="loadMaxRetries">The load maximum retries.</param>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.Get(`0)">
            <summary>
            Read object through the cache (will read from database/storage on cache miss)
            </summary>
            <param name="objectIdentifier">identifier of the object to read</param>
            <returns>the full object</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.ForceReload(`0)">
            <summary>
            Force reload (DB to Cache) of the object identified by objectIdentifier
            </summary>
            <param name="objectIdentifier">identifier of the object to be reloaded</param>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.ForceReload">
            <summary>
            Force reload (DB to Cache) of all object retrieved from Load()
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.Load(`0)">
            <summary>
            Override this method to load object from the database/storage
            </summary>
            <param name="objectIdentifier">object with info enough to identify the object to be load</param>
            <returns>the object from the database/storage</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.Load">
            <summary>
            Load all objects of this type from the database/storage
            </summary>
            <returns>a collection of all objects of this type from database/storage</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.OnSecondaryCacheLoad">
            <summary>
            Override this to perform custom handling, e.g. event logging, when such an event occurs
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.OnExecuteException(`0,System.Byte,System.Exception)">
            <summary>
            Override this to perform custom exception handling, e.g. logging exception
            </summary>
            <param name="objectIdentifier">the object identifier</param>
            <param name="attempt">current number of attempts</param>
            <param name="exception">the exception thrown</param>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.OnFinalAttemptFail">
            <summary>
            Override this to perform custom exception handling, e.g. logging exception
            </summary>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.LoadWithRetries(`0)">
            <summary>
            Retrieve object through Load(), object from last-known-good will be provided if attempt fails
            </summary>
            <param name="objectIdentifier">identifier of the object to retrieve</param>
            <returns>the full object</returns>
        </member>
        <member name="M:MyWebGrocer.Caching.RepositoryThroughCache`1.Set(`0)">
            <summary>
            Force cache update of cached item (and its last-known-good)
            </summary>
            <param name="value">object to be updated</param>
        </member>
        <member name="P:MyWebGrocer.Caching.RepositoryThroughCache`1.CacheTimeSpan">
            <summary>
            Gets the cache time span.
            </summary>
            <value>The cache time span.</value>
        </member>
        <member name="P:MyWebGrocer.Caching.RepositoryThroughCache`1.SecondaryCacheTimeSpan">
            <summary>
            Gets the secondary cache time span.
            </summary>
            <value>The secondary cache time span.</value>
        </member>
        <member name="T:MyWebGrocer.Caching.SecondaryCacheable`1">
            <summary>
            Secondary (last-known-good) cache item for a type T object
            Note: no locking, since primary item already has locking if locking is required
            </summary>
            <typeparam name="T">type of primary cache item</typeparam>
        </member>
        <member name="M:MyWebGrocer.Caching.SecondaryCacheable`1.GetCacheKey">
            <summary>
            Gets a string which must uniquely identify an instance.
            </summary>
            <returns>A <see cref="T:System.String" />.</returns>
            <remarks>The key only needs to be unique for instances
            of a particular type.  Objects of different types are
            not required to have distinct keys, as the type of
            the object will be taken into consideration when adding
            or retrieving items from the cache.</remarks>
        </member>
        <member name="P:MyWebGrocer.Caching.SecondaryCacheable`1.Item">
            <summary>
            Gets or sets the item.
            </summary>
            <value>The item.</value>
        </member>
    </members>
</doc>
